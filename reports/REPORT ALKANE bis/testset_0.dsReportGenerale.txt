
+++++++++++++++++++++++++++++++++++REPORT+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

LISTA TEST FILE  
dict_keys(['molecule125.ct', 'molecule017.ct', 'molecule142.ct', 'molecule013.ct', 'molecule144.ct', 'molecule115.ct', 'molecule100.ct', 'molecule016.ct', 'molecule014.ct', 'molecule086.ct', 'molecule020.ct', 'molecule037.ct', 'molecule074.ct', 'molecule038.ct', 'molecule024.ct', 'molecule072.ct', 'molecule129.ct', 'molecule136.ct', 'molecule005.ct', 'molecule047.ct', 'molecule122.ct', 'molecule045.ct', 'molecule147.ct', 'molecule063.ct', 'molecule076.ct', 'molecule054.ct', 'molecule084.ct', 'molecule116.ct', 'molecule008.ct', 'molecule011.ct', 'molecule058.ct', 'molecule018.ct', 'molecule078.ct', 'molecule067.ct', 'molecule080.ct', 'molecule062.ct', 'molecule055.ct', 'molecule098.ct', 'molecule006.ct', 'molecule145.ct', 'molecule112.ct', 'molecule095.ct', 'molecule064.ct', 'molecule134.ct', 'molecule030.ct', 'molecule091.ct', 'molecule127.ct', 'molecule051.ct', 'molecule138.ct', 'molecule041.ct', 'molecule096.ct', 'molecule061.ct', 'molecule043.ct', 'molecule105.ct', 'molecule035.ct', 'molecule019.ct', 'molecule034.ct', 'molecule001.ct', 'molecule082.ct', 'molecule057.ct', 'molecule039.ct', 'molecule131.ct', 'molecule102.ct', 'molecule137.ct', 'molecule089.ct', 'molecule044.ct', 'molecule133.ct', 'molecule130.ct', 'molecule110.ct', 'molecule113.ct', 'molecule141.ct', 'molecule103.ct', 'molecule143.ct', 'molecule032.ct', 'molecule042.ct', 'molecule132.ct', 'molecule065.ct', 'molecule123.ct', 'molecule003.ct', 'molecule007.ct', 'molecule118.ct', 'molecule070.ct', 'molecule048.ct', 'molecule150.ct', 'molecule040.ct', 'molecule050.ct', 'molecule128.ct', 'molecule081.ct', 'molecule025.ct', 'molecule033.ct', 'molecule068.ct', 'molecule046.ct', 'molecule075.ct', 'molecule099.ct', 'molecule111.ct', 'molecule140.ct', 'molecule028.ct', 'molecule073.ct', 'molecule077.ct', 'molecule093.ct', 'molecule009.ct', 'molecule121.ct', 'molecule060.ct', 'molecule052.ct', 'molecule027.ct', 'molecule106.ct', 'molecule071.ct', 'molecule087.ct', 'molecule002.ct', 'molecule139.ct', 'molecule119.ct', 'molecule148.ct', 'molecule036.ct', 'molecule107.ct', 'molecule124.ct', 'molecule004.ct', 'molecule149.ct', 'molecule022.ct', 'molecule120.ct', 'molecule094.ct', 'molecule117.ct', 'molecule015.ct', 'molecule090.ct', 'molecule104.ct', 'molecule101.ct', 'molecule049.ct', 'molecule088.ct', 'molecule146.ct', 'molecule021.ct', 'molecule059.ct', 'molecule114.ct', 'molecule126.ct', 'molecule010.ct', 'molecule066.ct', 'molecule085.ct'])----------------------------------------------------------------------------------------------------------

LISTA VALIDATION FILE  
dict_keys(['molecule023.ct', 'molecule053.ct', 'molecule097.ct', 'molecule108.ct', 'molecule056.ct', 'molecule026.ct', 'molecule083.ct', 'molecule069.ct', 'molecule135.ct', 'molecule079.ct', 'molecule031.ct', 'molecule029.ct', 'molecule012.ct', 'molecule109.ct', 'molecule092.ct'])----------------------------------------------------------------------------------------------------------

Our model: 

Net(
  (fc1): Linear(in_features=12, out_features=4, bias=False)
  (fc2): Linear(in_features=4, out_features=1, bias=False)
  (LRelu): LeakyReLU(negative_slope=0.25)
  (fc1Root): Linear(in_features=12, out_features=4, bias=False)
  (fc2Root): Linear(in_features=4, out_features=1, bias=False)
  (LReluRoot): LeakyReLU(negative_slope=0.25)
)
Printing children
------------------------------[Linear(in_features=12, out_features=4, bias=False), Linear(in_features=4, out_features=1, bias=False), LeakyReLU(negative_slope=0.25), Linear(in_features=12, out_features=4, bias=False), Linear(in_features=4, out_features=1, bias=False), LeakyReLU(negative_slope=0.25)]

Printing Modules
------------------------------[Net(
  (fc1): Linear(in_features=12, out_features=4, bias=False)
  (fc2): Linear(in_features=4, out_features=1, bias=False)
  (LRelu): LeakyReLU(negative_slope=0.25)
  (fc1Root): Linear(in_features=12, out_features=4, bias=False)
  (fc2Root): Linear(in_features=4, out_features=1, bias=False)
  (LReluRoot): LeakyReLU(negative_slope=0.25)
), Linear(in_features=12, out_features=4, bias=False), Linear(in_features=4, out_features=1, bias=False), LeakyReLU(negative_slope=0.25), Linear(in_features=12, out_features=4, bias=False), Linear(in_features=4, out_features=1, bias=False), LeakyReLU(negative_slope=0.25)]
The state dict keys: 

odict_keys(['fc1.weight', 'fc2.weight', 'fc1Root.weight', 'fc2Root.weight'])Models state_dict:fc1.weight	torch.Size([4, 12])fc2.weight	torch.Size([1, 4])fc1Root.weight	torch.Size([4, 12])fc2Root.weight	torch.Size([1, 4])OrderedDict([('fc1.weight', tensor([[ 8.7354e-01, -3.9031e-01,  3.0408e-43,  1.3032e-42,  1.7796e-42,
          7.9517e-01, -1.7979e-42,  1.1154e-42,  2.2393e-42,  2.8332e+00,
          1.6826e+00,  5.8435e-01],
        [-3.6404e-01, -8.4603e-02,  1.7993e-42,  1.6661e-42, -3.6154e-43,
         -6.6258e-01, -7.5670e-43, -1.5512e-42, -1.8637e-42,  1.5484e+00,
          8.1675e-01,  5.2088e-02],
        [-2.5481e-01,  4.0033e-01,  1.0706e-42, -1.3593e-42,  1.6774e-42,
          4.2158e-02,  1.9044e-42,  3.4892e-43, -3.0212e-42, -5.1433e-02,
         -5.2391e-02, -1.2969e-01],
        [-4.2804e-01,  3.7225e-01,  1.7152e-42,  1.6703e-42,  1.4223e-42,
         -3.7630e-01,  5.8154e-43, -1.8483e-42, -1.1098e-42, -6.3167e-02,
         -2.5695e-01, -4.0013e-01]])), ('fc2.weight', tensor([[-1.9918, -1.0740,  0.4231,  0.5204]])), ('fc1Root.weight', tensor([[-2.5246e+00, -1.0973e+00,  7.8178e-42,  1.7822e-41,  1.5470e-42,
         -2.2414e+00,  4.2613e-42, -1.9478e-42, -1.0504e-41, -1.1053e+00,
         -1.1351e+00, -5.2892e-01],
        [ 7.3126e+00,  1.0107e+00,  5.9877e-42, -1.6675e-43, -2.5193e-41,
          7.2164e+00,  1.5134e-42, -1.1286e-41, -8.1486e-42,  1.0321e+00,
          1.2199e+00,  2.1527e+00],
        [ 5.7990e+00,  1.3086e+00, -3.2874e-42, -1.0059e-41, -4.4828e-42,
          5.9101e+00, -8.8604e-42,  2.6654e-41, -6.1321e-42,  1.2997e+00,
         -3.5298e-02,  2.4845e+00],
        [ 4.8621e+00,  3.1242e-01, -9.9394e-42,  8.4316e-42,  4.1962e-19,
          4.7294e+00,  2.6563e-41, -1.0817e-41,  8.9263e-43,  8.9511e-01,
          6.2705e-01, -1.5276e+00]])), ('fc2Root.weight', tensor([[ 1.7889, -3.5942, -3.3412, -3.6457]]))])
---------------plt.close(fig)    # close the figure window-------------------------------------------------------------------------------------------

 Optimizer's state_dict:
CRITERION = MSELoss()
OPTIMIZER = Adam (
Parameter Group 0
    amsgrad: False
    betas: (0.9, 0.999)
    eps: 1e-08
    lr: 0.001
    weight_decay: 0
)
Tempo di training 36.977083921432495


state	{2409936864664: {'step': 10000, 'exp_avg': tensor([[-8.9741e-01,  2.9517e-01,  6.3058e-44,  3.0128e-43,  4.2039e-43,
         -9.1618e-01, -4.2740e-43,  2.5924e-43,  5.2549e-43,  4.4843e-01,
          1.1212e+00,  8.4343e-01],
        [-4.0064e-02,  1.8952e-01,  4.2740e-43,  3.9937e-43, -7.7071e-44,
         -1.1162e-01, -1.7516e-43, -3.7134e-43, -4.4141e-43,  2.4753e-01,
          5.8386e-01,  1.0371e+00],
        [-2.1925e-03,  7.5275e-02,  2.4523e-43, -3.1529e-43,  3.9937e-43,
          6.9168e-02,  4.5542e-43,  7.7071e-44, -6.8243e-43,  4.5886e-05,
         -5.1191e-02, -6.8757e-02],
        [-3.0313e-02,  6.3812e-02,  3.9937e-43,  3.9937e-43,  3.2931e-43,
         -1.7870e-02,  1.3312e-43, -4.4141e-43, -2.5924e-43,  7.9386e-05,
         -1.0939e-01, -1.4253e-01]]), 'exp_avg_sq': tensor([[6.3985e+01, 9.0614e+02, 2.0707e-08, 2.1604e-07, 3.0259e-07, 6.4017e+01,
         6.0927e-07, 4.4986e-08, 8.0661e-10, 2.5629e-01, 1.0220e+01, 3.4143e+01],
        [8.5216e+00, 1.0829e+02, 3.2786e-07, 8.1943e-07, 7.4875e-09, 8.4899e+00,
         1.2859e-10, 4.5391e-11, 3.8024e-07, 8.6297e-02, 1.6781e+00, 7.3337e+00],
        [4.8382e-01, 6.0214e+00, 4.4705e-08, 1.9889e-08, 3.2817e-07, 4.9111e-01,
         3.4519e-07, 3.1636e-08, 1.1049e-08, 4.2370e-05, 6.3379e-02, 2.8872e-01],
        [3.4570e-01, 4.8323e+00, 2.9825e-09, 2.7195e-07, 1.5546e-06, 3.4558e-01,
         7.1618e-11, 5.3820e-07, 8.9895e-08, 3.6677e-05, 7.4754e-02, 2.1122e-01]])}, 2409933202360: {'step': 10000, 'exp_avg': tensor([[-0.3249, -0.5614,  0.1455,  0.1479]]), 'exp_avg_sq': tensor([[203.1624,  30.5729,   5.2726,  12.0922]])}, 2409933203640: {'step': 10000, 'exp_avg': tensor([[-6.2213e-02, -1.8964e+00,  1.0370e-43,  2.2981e-43,  1.9618e-44,
         -5.8678e-02,  6.1657e-44, -3.3631e-44, -1.3172e-43, -3.1724e-02,
         -2.1173e-01,  3.8391e-01],
        [-1.2350e+00, -3.8984e-01,  7.5670e-44, -5.6052e-45, -3.1389e-43,
         -1.2362e+00,  1.9618e-44, -1.4574e-43, -1.0370e-43,  2.1895e-02,
          1.6276e-01,  3.8305e-01],
        [-1.0870e+00, -1.7730e+00, -4.7644e-44, -1.3172e-43, -6.1657e-44,
         -1.0856e+00, -1.1771e-43,  3.4192e-43, -8.9683e-44,  2.4605e-02,
          2.0999e-01,  2.1606e-01],
        [-1.4405e+00, -3.5041e-01, -1.3172e-43,  1.1771e-43, -2.0640e-22,
         -1.4422e+00,  3.4192e-43, -1.4574e-43,  1.9618e-44, -4.3243e-02,
          6.4615e-02,  2.7369e-01]]), 'exp_avg_sq': tensor([[2.0162e+00, 5.9868e+02, 3.8513e-10, 2.2389e-08, 3.7598e-13, 2.0205e+00,
         1.0892e-12, 5.5745e-09, 1.1975e-08, 2.5938e-01, 5.8470e-01, 5.2214e-01],
        [8.1536e+00, 1.7011e+01, 6.0581e-10, 6.1978e-11, 4.0071e-08, 8.1607e+00,
         8.7216e-11, 1.2756e-08, 5.4597e-11, 1.3300e-02, 1.4424e-01, 2.2993e-01],
        [6.3496e+00, 2.3341e+01, 1.5155e-10, 6.8729e-11, 3.2376e-13, 6.3422e+00,
         5.8922e-11, 6.7446e-08, 2.0437e-09, 1.2096e-02, 9.4681e-02, 9.7463e-02],
        [9.0348e+00, 7.2933e+01, 9.9829e-11, 4.7326e-10, 8.7179e-14, 9.0451e+00,
         6.1943e-08, 9.3723e-10, 8.1730e-10, 1.4569e-01, 1.9652e-01, 2.2518e-01]])}, 2409933202440: {'step': 10000, 'exp_avg': tensor([[1.3155, 5.0961, 4.5197, 3.9920]]), 'exp_avg_sq': tensor([[243.8313, 220.3177, 137.6043,  82.5439]])}}param_groups	[{'lr': 0.001, 'betas': (0.9, 0.999), 'eps': 1e-08, 'weight_decay': 0, 'amsgrad': False, 'params': [2409936864664, 2409933202360, 2409933203640, 2409933202440]}]
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Average Error Test Dataset= 4.006203969319661
RMSE Train Dataset = [22.151807503759006, 20.526126495188624, 17.623106509825124, 10.2588328938408, 6.624026532898621]
RMSE Test Dataset = [11.297713421407275, 9.631116236624855, 7.396167443120774, 5.369975735913234, 5.195235035254248]
Number of epochs 10000
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
pred =106.51611328125
true = tensor([106.5000])
differenza = tensor([0.0161])


pred =133.0215301513672
true = tensor([132.7000])
differenza = tensor([0.3215])


pred =158.07318115234375
true = tensor([153.3000])
differenza = tensor([4.7732])


pred =156.15206909179688
true = tensor([155.])
differenza = tensor([1.1521])


pred =138.43789672851562
true = tensor([140.6000])
differenza = tensor([2.1621])


pred =106.26380920410156
true = tensor([99.2000])
differenza = tensor([7.0638])


pred =157.07432556152344
true = tensor([162.2000])
differenza = tensor([5.1257])


pred =132.5224609375
true = tensor([135.2000])
differenza = tensor([2.6775])


pred =165.966064453125
true = tensor([160.])
differenza = tensor([5.9661])


pred =160.0789337158203
true = tensor([170.5000])
differenza = tensor([10.4211])


pred =113.3642807006836
true = tensor([115.6000])
differenza = tensor([2.2357])


pred =112.21627044677734
true = tensor([118.2000])
differenza = tensor([5.9837])


pred =62.227882385253906
true = tensor([63.3000])
differenza = tensor([1.0721])


pred =160.3627166748047
true = tensor([161.2000])
differenza = tensor([0.8373])


pred =159.15493774414062
true = tensor([169.4400])
differenza = tensor([10.2851])


