
+++++++++++++++++++++++++++++++++++REPORT+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

LISTA TEST FILE  
dict_keys(['molecule058.ct', 'molecule018.ct', 'molecule078.ct', 'molecule067.ct', 'molecule080.ct', 'molecule062.ct', 'molecule055.ct', 'molecule098.ct', 'molecule006.ct', 'molecule145.ct', 'molecule112.ct', 'molecule095.ct', 'molecule064.ct', 'molecule134.ct', 'molecule030.ct', 'molecule091.ct', 'molecule127.ct', 'molecule051.ct', 'molecule138.ct', 'molecule041.ct', 'molecule096.ct', 'molecule061.ct', 'molecule043.ct', 'molecule105.ct', 'molecule035.ct', 'molecule019.ct', 'molecule034.ct', 'molecule001.ct', 'molecule082.ct', 'molecule057.ct', 'molecule039.ct', 'molecule131.ct', 'molecule102.ct', 'molecule137.ct', 'molecule089.ct', 'molecule044.ct', 'molecule133.ct', 'molecule130.ct', 'molecule110.ct', 'molecule113.ct', 'molecule141.ct', 'molecule103.ct', 'molecule143.ct', 'molecule032.ct', 'molecule042.ct', 'molecule132.ct', 'molecule065.ct', 'molecule123.ct', 'molecule003.ct', 'molecule007.ct', 'molecule118.ct', 'molecule070.ct', 'molecule048.ct', 'molecule150.ct', 'molecule040.ct', 'molecule050.ct', 'molecule128.ct', 'molecule081.ct', 'molecule025.ct', 'molecule033.ct', 'molecule068.ct', 'molecule046.ct', 'molecule075.ct', 'molecule099.ct', 'molecule111.ct', 'molecule140.ct', 'molecule028.ct', 'molecule073.ct', 'molecule077.ct', 'molecule093.ct', 'molecule009.ct', 'molecule121.ct', 'molecule060.ct', 'molecule052.ct', 'molecule027.ct', 'molecule106.ct', 'molecule071.ct', 'molecule087.ct', 'molecule002.ct', 'molecule139.ct', 'molecule119.ct', 'molecule148.ct', 'molecule036.ct', 'molecule107.ct', 'molecule124.ct', 'molecule004.ct', 'molecule149.ct', 'molecule022.ct', 'molecule120.ct', 'molecule094.ct', 'molecule117.ct', 'molecule015.ct', 'molecule090.ct', 'molecule104.ct', 'molecule101.ct', 'molecule049.ct', 'molecule088.ct', 'molecule146.ct', 'molecule021.ct', 'molecule059.ct', 'molecule114.ct', 'molecule126.ct', 'molecule010.ct', 'molecule066.ct', 'molecule085.ct', 'molecule023.ct', 'molecule053.ct', 'molecule097.ct', 'molecule108.ct', 'molecule056.ct', 'molecule026.ct', 'molecule083.ct', 'molecule069.ct', 'molecule135.ct', 'molecule079.ct', 'molecule031.ct', 'molecule029.ct', 'molecule012.ct', 'molecule109.ct', 'molecule092.ct', 'molecule125.ct', 'molecule017.ct', 'molecule142.ct', 'molecule013.ct', 'molecule144.ct', 'molecule115.ct', 'molecule100.ct', 'molecule016.ct', 'molecule014.ct', 'molecule086.ct', 'molecule020.ct', 'molecule037.ct', 'molecule074.ct', 'molecule038.ct', 'molecule024.ct'])----------------------------------------------------------------------------------------------------------

LISTA VALIDATION FILE  
dict_keys(['molecule072.ct', 'molecule129.ct', 'molecule136.ct', 'molecule005.ct', 'molecule047.ct', 'molecule122.ct', 'molecule045.ct', 'molecule147.ct', 'molecule063.ct', 'molecule076.ct', 'molecule054.ct', 'molecule084.ct', 'molecule116.ct', 'molecule008.ct', 'molecule011.ct'])----------------------------------------------------------------------------------------------------------

Our model: 

Net(
  (fc1): Linear(in_features=12, out_features=4, bias=False)
  (fc2): Linear(in_features=4, out_features=1, bias=False)
  (LRelu): LeakyReLU(negative_slope=0.25)
  (fc1Root): Linear(in_features=12, out_features=4, bias=False)
  (fc2Root): Linear(in_features=4, out_features=1, bias=False)
  (LReluRoot): LeakyReLU(negative_slope=0.25)
)
Printing children
------------------------------[Linear(in_features=12, out_features=4, bias=False), Linear(in_features=4, out_features=1, bias=False), LeakyReLU(negative_slope=0.25), Linear(in_features=12, out_features=4, bias=False), Linear(in_features=4, out_features=1, bias=False), LeakyReLU(negative_slope=0.25)]

Printing Modules
------------------------------[Net(
  (fc1): Linear(in_features=12, out_features=4, bias=False)
  (fc2): Linear(in_features=4, out_features=1, bias=False)
  (LRelu): LeakyReLU(negative_slope=0.25)
  (fc1Root): Linear(in_features=12, out_features=4, bias=False)
  (fc2Root): Linear(in_features=4, out_features=1, bias=False)
  (LReluRoot): LeakyReLU(negative_slope=0.25)
), Linear(in_features=12, out_features=4, bias=False), Linear(in_features=4, out_features=1, bias=False), LeakyReLU(negative_slope=0.25), Linear(in_features=12, out_features=4, bias=False), Linear(in_features=4, out_features=1, bias=False), LeakyReLU(negative_slope=0.25)]
The state dict keys: 

odict_keys(['fc1.weight', 'fc2.weight', 'fc1Root.weight', 'fc2Root.weight'])Models state_dict:fc1.weight	torch.Size([4, 12])fc2.weight	torch.Size([1, 4])fc1Root.weight	torch.Size([4, 12])fc2Root.weight	torch.Size([1, 4])OrderedDict([('fc1.weight', tensor([[ 9.4232e-01, -3.3524e-01,  6.4460e-43, -1.8119e-42,  1.8063e-42,
          8.9947e-01, -5.3249e-44,  8.3097e-43,  3.7695e-43,  1.8116e+00,
          7.8336e-01,  3.2168e-01],
        [ 4.6147e-01,  6.0198e-02,  8.0014e-43,  1.3088e-42,  6.7963e-43,
         -1.8965e-01, -4.5122e-43, -8.0435e-43,  9.9072e-43, -9.1728e-02,
         -4.3300e-02,  5.3681e-01],
        [ 2.0797e-02, -3.9271e-01,  7.8333e-43,  4.1198e-43, -1.6045e-42,
          5.7952e-01,  1.3495e-42, -1.9240e-42,  4.3020e-43,  5.3585e-01,
          5.6976e-01,  3.9029e-01],
        [ 2.6530e-01,  4.2280e-01,  1.7825e-42, -8.5059e-43, -1.2205e-42,
         -4.4491e-01,  1.4489e-42, -2.1440e-43, -1.7194e-42, -3.3338e-01,
         -5.0454e-01, -6.0300e-02]])), ('fc2.weight', tensor([[-1.6099,  0.4554, -0.6250,  1.5714]])), ('fc1Root.weight', tensor([[ 6.3872e+00,  7.1790e-01,  6.0620e-42, -2.1804e-42, -2.9581e-42,
          7.6185e+00,  1.8962e-41,  1.6886e-42,  5.1568e-42,  2.0230e+00,
         -4.6077e-01,  1.3793e-01],
        [ 3.8676e+00,  8.1490e-01, -1.7272e-41,  1.4155e-41,  1.5186e-41,
          3.7990e+00,  1.1308e-41,  1.7590e-41,  9.6718e-42,  7.1876e-01,
         -7.8600e-01,  4.2754e-01],
        [-3.0149e+00, -1.6376e+00, -3.6322e-42, -1.5339e-41, -1.3332e-41,
         -3.3431e+00,  7.9370e-42,  6.6015e-42, -2.6064e-42, -1.8207e+00,
         -1.1602e+00, -2.5918e+00],
        [-2.9009e+00, -1.2988e+00, -4.4407e-42,  5.5057e-42, -7.6385e-42,
         -2.6560e+00,  9.2934e-42,  2.6064e-43,  1.3647e-41, -5.6530e-01,
         -1.4163e+00, -2.1821e+00]])), ('fc2Root.weight', tensor([[-5.8984, -6.0317,  0.9411,  1.1998]]))])
---------------plt.close(fig)    # close the figure window-------------------------------------------------------------------------------------------

 Optimizer's state_dict:
CRITERION = MSELoss()
OPTIMIZER = Adam (
Parameter Group 0
    amsgrad: False
    betas: (0.9, 0.999)
    eps: 1e-08
    lr: 0.001
    weight_decay: 0
)
Tempo di training 38.79773020744324


state	{2409927665528: {'step': 10000, 'exp_avg': tensor([[-3.6853e-02,  8.4216e-01,  2.1720e-43, -6.1797e-43,  6.0956e-43,
         -5.1574e-02, -7.0065e-45,  2.7325e-43,  1.1911e-43,  1.8183e-01,
          8.3045e-01,  8.5972e-01],
        [ 2.6496e-01,  2.1781e-01,  2.7325e-43,  4.4141e-43,  2.3121e-43,
          4.0696e-02, -1.4714e-43, -2.7325e-43,  3.2931e-43, -2.6183e-04,
         -7.6518e-02,  5.7461e-02],
        [-1.3301e-01,  2.3683e-01,  2.5924e-43,  1.3312e-43, -5.3950e-43,
          5.9147e-02,  4.5542e-43, -6.5160e-43,  1.4714e-43,  1.2856e-02,
          4.1448e-01,  4.2557e-01],
        [ 1.7942e-01, -8.8636e-02,  6.0956e-43, -2.8727e-43, -4.1338e-43,
         -6.4801e-02,  4.9746e-43, -6.3058e-44, -5.8154e-43, -6.8755e-03,
         -3.1114e-01, -2.0402e-01]]), 'exp_avg_sq': tensor([[5.4837e+01, 9.5931e+02, 1.3604e-07, 3.5305e-09, 1.8167e-08, 5.4835e+01,
         3.0641e-08, 1.9207e-06, 4.0610e-07, 5.6536e-02, 1.4570e+01, 2.7743e+01],
        [1.3980e+00, 9.9332e+00, 4.8978e-07, 3.4543e-08, 3.9846e-09, 1.3418e+00,
         3.3059e-07, 4.2036e-10, 4.8670e-09, 2.9874e-05, 4.5882e-01, 5.1936e-01],
        [6.0021e+00, 1.1359e+02, 5.0762e-07, 1.4961e-07, 1.3038e-07, 6.0071e+00,
         2.2140e-07, 1.0688e-06, 3.1670e-08, 2.8023e-03, 1.7493e+00, 3.4632e+00],
        [7.5206e+00, 9.6250e+01, 5.7708e-09, 1.7449e-08, 7.5776e-07, 7.5099e+00,
         1.0254e-06, 5.0653e-06, 9.6244e-07, 1.4174e-03, 1.5873e+00, 4.0859e+00]])}, 2409927664728: {'step': 10000, 'exp_avg': tensor([[ 0.0119,  0.1324, -0.1289,  0.6164]]), 'exp_avg_sq': tensor([[296.1564,   1.6429, 180.7005,   7.5804]])}, 2409927666408: {'step': 10000, 'exp_avg': tensor([[-1.7825e+00, -3.5701e-01,  8.9683e-44, -3.3631e-44, -4.7644e-44,
         -1.7648e+00,  2.8586e-43,  3.3631e-44,  7.5670e-44, -2.4006e-02,
          1.0267e-01,  4.4072e-01],
        [-1.7958e+00, -2.8312e+00, -2.5784e-43,  2.1580e-43,  2.2981e-43,
         -1.7968e+00,  1.7376e-43,  2.5784e-43,  1.4574e-43,  7.2811e-02,
          4.8374e-02,  4.0265e-01],
        [-1.6452e-03, -5.8017e-01, -6.1657e-44, -2.2981e-43, -2.0179e-43,
         -6.3679e-03,  1.1771e-43,  1.0370e-43, -4.7644e-44, -6.5241e-02,
         -1.3017e-02,  2.4237e-01],
        [ 1.1464e-02, -7.2830e-01, -7.5670e-44,  8.9683e-44, -1.1771e-43,
          1.4987e-02,  1.4574e-43,  5.6052e-45,  2.0179e-43, -5.7895e-02,
         -1.5688e-02,  3.2509e-01]]), 'exp_avg_sq': tensor([[1.9271e+01, 2.0072e+01, 2.1095e-10, 2.7533e-09, 2.3026e-09, 1.9113e+01,
         6.2120e-08, 4.5705e-09, 2.6991e-10, 2.2043e-01, 2.0196e-01, 3.0959e-01],
        [1.4674e+01, 5.9921e+01, 5.0752e-08, 3.6999e-09, 1.2448e-08, 1.4681e+01,
         9.5559e-09, 2.3653e-08, 3.7343e-09, 2.4382e-01, 9.8835e-02, 1.7192e-01],
        [2.7755e-01, 3.6969e+01, 3.4669e-09, 1.4754e-08, 1.0885e-08, 2.7485e-01,
         8.3040e-11, 4.8536e-09, 5.1630e-09, 5.1897e-02, 3.6675e-02, 7.0120e-02],
        [5.0018e-01, 8.0874e+01, 1.7731e-10, 1.1724e-10, 3.9969e-11, 5.0268e-01,
         1.8053e-09, 7.9936e-10, 1.1917e-08, 9.8127e-02, 7.9537e-02, 1.3761e-01]])}, 2409927665848: {'step': 10000, 'exp_avg': tensor([[ 4.3738,  2.5662,  0.0132, -0.0772]]), 'exp_avg_sq': tensor([[122.6139,  19.5912, 461.5565, 254.5133]])}}param_groups	[{'lr': 0.001, 'betas': (0.9, 0.999), 'eps': 1e-08, 'weight_decay': 0, 'amsgrad': False, 'params': [2409927665528, 2409927664728, 2409927666408, 2409927665848]}]
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Average Error Test Dataset= 3.499291737874349
RMSE Train Dataset = [21.582259967679473, 20.000236509832046, 14.961524955829411, 9.457270446298635, 6.448676915458003]
RMSE Test Dataset = [17.282083501599278, 16.09440892916844, 8.410116788255074, 4.9213824313296755, 4.515248847263012]
Number of epochs 10000
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
pred =141.41395568847656
true = tensor([142.4000])
differenza = tensor([0.9860])


pred =167.298583984375
true = tensor([167.])
differenza = tensor([0.2986])


pred =164.08062744140625
true = tensor([160.])
differenza = tensor([4.0806])


pred =3.0035667419433594
true = tensor([-0.5000])
differenza = tensor([3.5036])


pred =134.57330322265625
true = tensor([137.7000])
differenza = tensor([3.1267])


pred =162.8600311279297
true = tensor([157.])
differenza = tensor([5.8600])


pred =135.131591796875
true = tensor([140.5000])
differenza = tensor([5.3684])


pred =166.33636474609375
true = tensor([165.1000])
differenza = tensor([1.2364])


pred =140.1492156982422
true = tensor([140.1000])
differenza = tensor([0.0492])


pred =156.54644775390625
true = tensor([166.0500])
differenza = tensor([9.5036])


pred =136.39630126953125
true = tensor([137.3000])
differenza = tensor([0.9037])


pred =154.11123657226562
true = tensor([148.4000])
differenza = tensor([5.7112])


pred =163.42022705078125
true = tensor([164.])
differenza = tensor([0.5798])


pred =44.35148239135742
true = tensor([36.1000])
differenza = tensor([8.2515])


pred =63.330101013183594
true = tensor([60.3000])
differenza = tensor([3.0301])


