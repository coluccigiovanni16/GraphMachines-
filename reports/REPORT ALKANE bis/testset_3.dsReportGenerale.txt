
+++++++++++++++++++++++++++++++++++REPORT+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

LISTA TEST FILE  
dict_keys(['molecule106.ct', 'molecule071.ct', 'molecule087.ct', 'molecule002.ct', 'molecule139.ct', 'molecule119.ct', 'molecule148.ct', 'molecule036.ct', 'molecule107.ct', 'molecule124.ct', 'molecule004.ct', 'molecule149.ct', 'molecule022.ct', 'molecule120.ct', 'molecule094.ct', 'molecule117.ct', 'molecule015.ct', 'molecule090.ct', 'molecule104.ct', 'molecule101.ct', 'molecule049.ct', 'molecule088.ct', 'molecule146.ct', 'molecule021.ct', 'molecule059.ct', 'molecule114.ct', 'molecule126.ct', 'molecule010.ct', 'molecule066.ct', 'molecule085.ct', 'molecule023.ct', 'molecule053.ct', 'molecule097.ct', 'molecule108.ct', 'molecule056.ct', 'molecule026.ct', 'molecule083.ct', 'molecule069.ct', 'molecule135.ct', 'molecule079.ct', 'molecule031.ct', 'molecule029.ct', 'molecule012.ct', 'molecule109.ct', 'molecule092.ct', 'molecule125.ct', 'molecule017.ct', 'molecule142.ct', 'molecule013.ct', 'molecule144.ct', 'molecule115.ct', 'molecule100.ct', 'molecule016.ct', 'molecule014.ct', 'molecule086.ct', 'molecule020.ct', 'molecule037.ct', 'molecule074.ct', 'molecule038.ct', 'molecule024.ct', 'molecule072.ct', 'molecule129.ct', 'molecule136.ct', 'molecule005.ct', 'molecule047.ct', 'molecule122.ct', 'molecule045.ct', 'molecule147.ct', 'molecule063.ct', 'molecule076.ct', 'molecule054.ct', 'molecule084.ct', 'molecule116.ct', 'molecule008.ct', 'molecule011.ct', 'molecule058.ct', 'molecule018.ct', 'molecule078.ct', 'molecule067.ct', 'molecule080.ct', 'molecule062.ct', 'molecule055.ct', 'molecule098.ct', 'molecule006.ct', 'molecule145.ct', 'molecule112.ct', 'molecule095.ct', 'molecule064.ct', 'molecule134.ct', 'molecule030.ct', 'molecule091.ct', 'molecule127.ct', 'molecule051.ct', 'molecule138.ct', 'molecule041.ct', 'molecule096.ct', 'molecule061.ct', 'molecule043.ct', 'molecule105.ct', 'molecule035.ct', 'molecule019.ct', 'molecule034.ct', 'molecule001.ct', 'molecule082.ct', 'molecule057.ct', 'molecule039.ct', 'molecule131.ct', 'molecule102.ct', 'molecule137.ct', 'molecule089.ct', 'molecule044.ct', 'molecule133.ct', 'molecule130.ct', 'molecule110.ct', 'molecule113.ct', 'molecule141.ct', 'molecule103.ct', 'molecule143.ct', 'molecule032.ct', 'molecule042.ct', 'molecule132.ct', 'molecule065.ct', 'molecule123.ct', 'molecule003.ct', 'molecule007.ct', 'molecule118.ct', 'molecule070.ct', 'molecule048.ct', 'molecule150.ct', 'molecule040.ct', 'molecule050.ct', 'molecule128.ct', 'molecule081.ct', 'molecule025.ct', 'molecule033.ct'])----------------------------------------------------------------------------------------------------------

LISTA VALIDATION FILE  
dict_keys(['molecule068.ct', 'molecule046.ct', 'molecule075.ct', 'molecule099.ct', 'molecule111.ct', 'molecule140.ct', 'molecule028.ct', 'molecule073.ct', 'molecule077.ct', 'molecule093.ct', 'molecule009.ct', 'molecule121.ct', 'molecule060.ct', 'molecule052.ct', 'molecule027.ct'])----------------------------------------------------------------------------------------------------------

Our model: 

Net(
  (fc1): Linear(in_features=12, out_features=4, bias=False)
  (fc2): Linear(in_features=4, out_features=1, bias=False)
  (LRelu): LeakyReLU(negative_slope=0.25)
  (fc1Root): Linear(in_features=12, out_features=4, bias=False)
  (fc2Root): Linear(in_features=4, out_features=1, bias=False)
  (LReluRoot): LeakyReLU(negative_slope=0.25)
)
Printing children
------------------------------[Linear(in_features=12, out_features=4, bias=False), Linear(in_features=4, out_features=1, bias=False), LeakyReLU(negative_slope=0.25), Linear(in_features=12, out_features=4, bias=False), Linear(in_features=4, out_features=1, bias=False), LeakyReLU(negative_slope=0.25)]

Printing Modules
------------------------------[Net(
  (fc1): Linear(in_features=12, out_features=4, bias=False)
  (fc2): Linear(in_features=4, out_features=1, bias=False)
  (LRelu): LeakyReLU(negative_slope=0.25)
  (fc1Root): Linear(in_features=12, out_features=4, bias=False)
  (fc2Root): Linear(in_features=4, out_features=1, bias=False)
  (LReluRoot): LeakyReLU(negative_slope=0.25)
), Linear(in_features=12, out_features=4, bias=False), Linear(in_features=4, out_features=1, bias=False), LeakyReLU(negative_slope=0.25), Linear(in_features=12, out_features=4, bias=False), Linear(in_features=4, out_features=1, bias=False), LeakyReLU(negative_slope=0.25)]
The state dict keys: 

odict_keys(['fc1.weight', 'fc2.weight', 'fc1Root.weight', 'fc2Root.weight'])Models state_dict:fc1.weight	torch.Size([4, 12])fc2.weight	torch.Size([1, 4])fc1Root.weight	torch.Size([4, 12])fc2Root.weight	torch.Size([1, 4])OrderedDict([('fc1.weight', tensor([[-2.3892e-01,  2.3995e-01,  1.4588e-42, -1.3789e-42,  8.1556e-43,
         -7.6619e-01,  2.8250e-42, -1.4714e-42, -1.4812e-42, -1.4577e-01,
         -4.8737e-01, -3.4196e-02],
        [-5.3471e-01,  5.6667e-01, -8.0995e-43,  4.7644e-44,  1.2696e-42,
         -3.6167e-01,  1.7404e-42, -1.6423e-42, -1.8595e-42, -1.3361e-01,
         -3.0154e-01, -6.9930e-02],
        [ 3.3138e-01, -3.6283e-01,  2.1272e-42,  7.3568e-43, -1.0370e-42,
          5.2347e-01, -6.4460e-43, -9.5288e-43, -1.4237e-42,  2.1927e+00,
          6.7699e-01,  3.4553e-01],
        [ 1.0996e+00, -3.2278e-01, -1.8217e-44, -8.4358e-43,  5.8154e-43,
          3.8649e-01,  1.5779e-42,  6.3479e-43, -7.2727e-43,  8.0013e-01,
          1.2564e+00,  2.4463e-01]])), ('fc2.weight', tensor([[ 0.8706,  0.8035, -1.5305, -0.7353]])), ('fc1Root.weight', tensor([[-3.8657e+00, -1.4401e+00,  1.6265e-41, -1.3579e-41,  3.5523e-42,
         -3.6243e+00,  1.8225e-41, -1.5274e-43,  1.5966e-41, -1.2490e+00,
         -1.3318e+00,  3.4101e-01],
        [ 6.9905e+00,  7.7345e-01, -2.0679e-41, -9.2065e-43,  8.2270e-42,
          6.7853e+00, -4.7084e-43, -1.1928e-41, -1.9520e-41,  2.1248e+00,
          1.1110e-01,  7.6110e-01],
        [-2.5508e+00, -1.3139e+00,  1.9107e-41, -9.4293e-42,  8.0519e-42,
         -2.1298e+00,  4.2025e-42, -2.0942e-41,  4.4926e-42, -4.9976e-02,
         -1.3170e+00, -5.9563e-01],
        [ 5.6319e+00,  1.3797e+00,  1.0089e-43,  6.0158e-42,  1.1435e-41,
          5.5117e+00,  2.1532e-41, -1.8543e-41,  2.0917e-41,  1.1707e-01,
         -3.2194e-01,  2.3111e+00]])), ('fc2Root.weight', tensor([[ 1.4383, -5.4490,  1.0278, -3.5054]]))])
---------------plt.close(fig)    # close the figure window-------------------------------------------------------------------------------------------

 Optimizer's state_dict:
CRITERION = MSELoss()
OPTIMIZER = Adam (
Parameter Group 0
    amsgrad: False
    betas: (0.9, 0.999)
    eps: 1e-08
    lr: 0.001
    weight_decay: 0
)
Tempo di training 41.037957191467285


state	{2409965664520: {'step': 10000, 'exp_avg': tensor([[ 6.1588e-02,  1.3204e-02,  4.2740e-43, -3.9937e-43,  2.3121e-43,
         -9.4137e-02,  2.1580e-43, -4.2740e-43, -4.2740e-43, -7.7875e-04,
         -2.3785e-01, -8.4208e-02],
        [-3.6027e-02,  1.1396e-01, -2.3121e-43,  7.0065e-45,  3.7134e-43,
          1.5108e-02,  5.1147e-43, -4.8345e-43, -5.3950e-43, -4.4110e-04,
         -1.7577e-01, -8.9110e-02],
        [-8.2853e-01,  2.9691e-01,  6.2358e-43,  2.1720e-43, -3.0128e-43,
         -7.7192e-01, -1.8918e-43, -2.7325e-43, -4.1338e-43,  3.5188e-01,
          8.5458e-01,  6.2049e-01],
        [-1.2087e-01,  9.8876e-02, -5.6052e-45, -2.4523e-43,  1.6115e-43,
         -3.3116e-01,  4.5542e-43,  1.7516e-43, -2.0319e-43,  9.4819e-02,
          6.8569e-01,  3.2152e-01]]), 'exp_avg_sq': tensor([[1.1855e+00, 2.4593e+01, 3.5780e-08, 2.9136e-07, 3.2970e-08, 1.1777e+00,
         2.7271e-09, 3.6679e-07, 3.9826e-07, 6.6969e-04, 3.8313e-01, 4.9090e-01],
        [8.0893e-01, 1.7230e+01, 8.9587e-07, 1.0293e-06, 6.0736e-09, 8.1170e-01,
         2.7979e-06, 6.0419e-09, 9.5017e-09, 4.3082e-04, 2.6133e-01, 3.4600e-01],
        [3.2896e+01, 6.5409e+02, 2.8213e-08, 1.7036e-07, 2.4994e-07, 3.2811e+01,
         1.4943e-08, 1.1686e-06, 5.3078e-07, 1.4480e-01, 8.8675e+00, 1.3421e+01],
        [6.6730e+00, 1.3983e+02, 1.0727e-07, 1.8711e-07, 1.2864e-07, 6.7822e+00,
         3.4880e-07, 4.9470e-11, 1.8158e-07, 2.8928e-02, 2.2181e+00, 2.8574e+00]])}, 2409965664920: {'step': 10000, 'exp_avg': tensor([[ 0.3014,  0.2475, -0.1094,  0.1615]]), 'exp_avg_sq': tensor([[  8.2791,  18.1557, 128.5087, 234.8809]])}, 2409965665800: {'step': 10000, 'exp_avg': tensor([[ 3.8668e-02, -4.3734e-01,  2.2981e-43, -1.8777e-43,  4.7644e-44,
          4.1936e-02,  2.5784e-43, -5.6052e-45,  2.1580e-43, -4.4042e-02,
         -1.1075e-01,  2.5730e-01],
        [-2.8891e+00, -2.6195e-01, -2.8586e-43, -1.9618e-44,  1.1771e-43,
         -2.8919e+00, -1.9618e-44, -1.7376e-43, -2.7185e-43, -3.4499e-02,
          2.7197e-01,  7.0738e-01],
        [ 3.0492e-02, -3.1636e-01,  2.6905e-43, -1.3172e-43,  1.1771e-43,
          3.6193e-02,  6.1657e-44, -2.8586e-43,  6.1657e-44, -2.0060e-02,
         -8.4088e-02,  1.7250e-01],
        [-1.8127e+00, -1.5013e+00, -5.6052e-45,  8.9683e-44,  1.5975e-43,
         -1.8143e+00,  2.9988e-43, -2.5784e-43,  2.8586e-43,  1.8094e-02,
          1.4180e-01,  2.0098e-01]]), 'exp_avg_sq': tensor([[2.9881e-01, 1.3450e+01, 1.4389e-08, 1.1423e-08, 6.5705e-10, 3.0057e-01,
         1.5932e-08, 9.9154e-11, 1.6909e-07, 7.8585e-02, 1.2645e-01, 1.0682e-01],
        [2.7181e+01, 1.9074e+01, 2.6089e-08, 4.7062e-10, 9.4435e-10, 2.7212e+01,
         1.0360e-09, 1.0828e-08, 2.0209e-08, 1.1042e-01, 2.8181e-01, 3.9389e-01],
        [5.4796e-01, 7.4169e+01, 1.7491e-08, 8.9142e-09, 6.9453e-11, 5.5179e-01,
         5.4165e-10, 3.0641e-08, 2.8539e-09, 7.4973e-02, 1.2944e-01, 9.0015e-02],
        [8.7961e+00, 1.8733e+01, 1.4313e-10, 2.9025e-11, 1.3978e-09, 8.8064e+00,
         3.6516e-08, 1.7339e-08, 2.3927e-08, 1.7858e-02, 4.3759e-02, 1.5684e-01]])}, 2409965663480: {'step': 10000, 'exp_avg': tensor([[0.1587, 7.3407, 0.0988, 6.4013]]), 'exp_avg_sq': tensor([[ 92.5096, 197.9066, 301.4170, 132.1284]])}}param_groups	[{'lr': 0.001, 'betas': (0.9, 0.999), 'eps': 1e-08, 'weight_decay': 0, 'amsgrad': False, 'params': [2409965664520, 2409965664920, 2409965665800, 2409965663480]}]
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Average Error Test Dataset= 3.5690035502115887
RMSE Train Dataset = [21.808624885232117, 20.45312350792584, 15.988560401759225, 10.756060289287028, 7.0340830880887895]
RMSE Test Dataset = [9.803428781877678, 9.044097104954572, 7.022316373255605, 4.461157263905945, 4.957241718222026]
Number of epochs 10000
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
pred =136.63555908203125
true = tensor([136.])
differenza = tensor([0.6356])


pred =132.43099975585938
true = tensor([141.5000])
differenza = tensor([9.0690])


pred =139.98959350585938
true = tensor([150.7700])
differenza = tensor([10.7804])


pred =155.87493896484375
true = tensor([147.7000])
differenza = tensor([8.1749])


pred =163.85824584960938
true = tensor([163.8000])
differenza = tensor([0.0582])


pred =160.580078125
true = tensor([160.])
differenza = tensor([0.5801])


pred =111.70718383789062
true = tensor([112.])
differenza = tensor([0.2928])


pred =142.31466674804688
true = tensor([143.])
differenza = tensor([0.6853])


pred =160.847412109375
true = tensor([158.])
differenza = tensor([2.8474])


pred =157.5172119140625
true = tensor([153.])
differenza = tensor([4.5172])


pred =53.24103546142578
true = tensor([49.7000])
differenza = tensor([3.5410])


pred =159.05755615234375
true = tensor([157.])
differenza = tensor([2.0576])


pred =131.8826904296875
true = tensor([131.3000])
differenza = tensor([0.5827])


pred =131.0042724609375
true = tensor([124.])
differenza = tensor([7.0043])


pred =109.50849914550781
true = tensor([106.8000])
differenza = tensor([2.7085])


