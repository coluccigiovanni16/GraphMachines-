
+++++++++++++++++++++++++++++++++++REPORT+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

LISTA TEST FILE  
dict_keys(['molecule072.ct', 'molecule129.ct', 'molecule136.ct', 'molecule005.ct', 'molecule047.ct', 'molecule122.ct', 'molecule045.ct', 'molecule147.ct', 'molecule063.ct', 'molecule076.ct', 'molecule054.ct', 'molecule084.ct', 'molecule116.ct', 'molecule008.ct', 'molecule011.ct', 'molecule058.ct', 'molecule018.ct', 'molecule078.ct', 'molecule067.ct', 'molecule080.ct', 'molecule062.ct', 'molecule055.ct', 'molecule098.ct', 'molecule006.ct', 'molecule145.ct', 'molecule112.ct', 'molecule095.ct', 'molecule064.ct', 'molecule134.ct', 'molecule030.ct', 'molecule091.ct', 'molecule127.ct', 'molecule051.ct', 'molecule138.ct', 'molecule041.ct', 'molecule096.ct', 'molecule061.ct', 'molecule043.ct', 'molecule105.ct', 'molecule035.ct', 'molecule019.ct', 'molecule034.ct', 'molecule001.ct', 'molecule082.ct', 'molecule057.ct', 'molecule039.ct', 'molecule131.ct', 'molecule102.ct', 'molecule137.ct', 'molecule089.ct', 'molecule044.ct', 'molecule133.ct', 'molecule130.ct', 'molecule110.ct', 'molecule113.ct', 'molecule141.ct', 'molecule103.ct', 'molecule143.ct', 'molecule032.ct', 'molecule042.ct', 'molecule132.ct', 'molecule065.ct', 'molecule123.ct', 'molecule003.ct', 'molecule007.ct', 'molecule118.ct', 'molecule070.ct', 'molecule048.ct', 'molecule150.ct', 'molecule040.ct', 'molecule050.ct', 'molecule128.ct', 'molecule081.ct', 'molecule025.ct', 'molecule033.ct', 'molecule068.ct', 'molecule046.ct', 'molecule075.ct', 'molecule099.ct', 'molecule111.ct', 'molecule140.ct', 'molecule028.ct', 'molecule073.ct', 'molecule077.ct', 'molecule093.ct', 'molecule009.ct', 'molecule121.ct', 'molecule060.ct', 'molecule052.ct', 'molecule027.ct', 'molecule106.ct', 'molecule071.ct', 'molecule087.ct', 'molecule002.ct', 'molecule139.ct', 'molecule119.ct', 'molecule148.ct', 'molecule036.ct', 'molecule107.ct', 'molecule124.ct', 'molecule004.ct', 'molecule149.ct', 'molecule022.ct', 'molecule120.ct', 'molecule094.ct', 'molecule117.ct', 'molecule015.ct', 'molecule090.ct', 'molecule104.ct', 'molecule101.ct', 'molecule049.ct', 'molecule088.ct', 'molecule146.ct', 'molecule021.ct', 'molecule059.ct', 'molecule114.ct', 'molecule126.ct', 'molecule010.ct', 'molecule066.ct', 'molecule085.ct', 'molecule023.ct', 'molecule053.ct', 'molecule097.ct', 'molecule108.ct', 'molecule056.ct', 'molecule026.ct', 'molecule083.ct', 'molecule069.ct', 'molecule135.ct', 'molecule079.ct', 'molecule031.ct', 'molecule029.ct', 'molecule012.ct', 'molecule109.ct', 'molecule092.ct'])----------------------------------------------------------------------------------------------------------

LISTA VALIDATION FILE  
dict_keys(['molecule125.ct', 'molecule017.ct', 'molecule142.ct', 'molecule013.ct', 'molecule144.ct', 'molecule115.ct', 'molecule100.ct', 'molecule016.ct', 'molecule014.ct', 'molecule086.ct', 'molecule020.ct', 'molecule037.ct', 'molecule074.ct', 'molecule038.ct', 'molecule024.ct'])----------------------------------------------------------------------------------------------------------

Our model: 

Net(
  (fc1): Linear(in_features=12, out_features=4, bias=False)
  (fc2): Linear(in_features=4, out_features=1, bias=False)
  (LRelu): LeakyReLU(negative_slope=0.25)
  (fc1Root): Linear(in_features=12, out_features=4, bias=False)
  (fc2Root): Linear(in_features=4, out_features=1, bias=False)
  (LReluRoot): LeakyReLU(negative_slope=0.25)
)
Printing children
------------------------------[Linear(in_features=12, out_features=4, bias=False), Linear(in_features=4, out_features=1, bias=False), LeakyReLU(negative_slope=0.25), Linear(in_features=12, out_features=4, bias=False), Linear(in_features=4, out_features=1, bias=False), LeakyReLU(negative_slope=0.25)]

Printing Modules
------------------------------[Net(
  (fc1): Linear(in_features=12, out_features=4, bias=False)
  (fc2): Linear(in_features=4, out_features=1, bias=False)
  (LRelu): LeakyReLU(negative_slope=0.25)
  (fc1Root): Linear(in_features=12, out_features=4, bias=False)
  (fc2Root): Linear(in_features=4, out_features=1, bias=False)
  (LReluRoot): LeakyReLU(negative_slope=0.25)
), Linear(in_features=12, out_features=4, bias=False), Linear(in_features=4, out_features=1, bias=False), LeakyReLU(negative_slope=0.25), Linear(in_features=12, out_features=4, bias=False), Linear(in_features=4, out_features=1, bias=False), LeakyReLU(negative_slope=0.25)]
The state dict keys: 

odict_keys(['fc1.weight', 'fc2.weight', 'fc1Root.weight', 'fc2Root.weight'])Models state_dict:fc1.weight	torch.Size([4, 12])fc2.weight	torch.Size([1, 4])fc1Root.weight	torch.Size([4, 12])fc2Root.weight	torch.Size([1, 4])OrderedDict([('fc1.weight', tensor([[ 9.4145e-02, -1.9774e-01,  1.3452e-43, -9.8091e-43, -9.3326e-43,
          8.0913e-01, -8.5479e-43, -1.5022e-42, -2.6765e-43,  4.5481e-01,
          1.1846e-01,  2.8885e-01],
        [ 9.9537e-01, -1.9526e-01,  1.6765e-04,  1.1449e-42,  1.6984e-42,
          2.0895e-01,  7.0625e-43, -1.0342e-42, -1.4559e-42,  1.2016e+00,
          4.4284e-01, -2.0062e-01],
        [-7.4323e-01,  7.2509e-01,  5.6052e-43, -2.6485e-43,  4.2740e-43,
          5.3270e-02,  7.3989e-43, -9.3467e-43,  1.4475e-42, -9.7900e-02,
         -2.5967e-01, -6.8220e-01],
        [ 2.3182e-01, -5.9627e-01, -1.4588e-42,  1.6115e-43,  8.7581e-43,
          1.2166e-01,  1.2906e-42, -1.2163e-42, -6.7262e-43,  2.5749e-01,
          8.6639e-01,  5.2417e-01]])), ('fc2.weight', tensor([[-0.7855, -1.5197,  0.9761, -0.5484]])), ('fc1Root.weight', tensor([[-4.3530e+00,  2.0419e-01,  2.8054e-42, -2.8124e-42, -3.6994e-43,
         -4.8165e+00, -1.6227e-42,  1.5899e-41,  1.4618e-41,  1.4763e-01,
          6.8496e-01, -2.6187e+00],
        [-2.4509e+00, -1.1795e+00, -1.1725e-41, -4.4477e-42, -1.4433e-42,
         -1.7629e+00,  7.8347e-42, -8.6404e-42,  1.4087e-41, -2.2070e-01,
         -4.6670e-02, -1.3363e+00],
        [-2.4619e+00, -1.4966e+00,  1.0197e-41,  4.7980e-42,  3.0483e-12,
         -1.8752e+00,  1.1802e-41,  5.3417e-42,  9.3144e-42, -4.5702e-01,
          4.3196e-01, -1.0054e+00],
        [ 6.3690e+00,  7.4189e-01,  7.6931e-43,  1.5832e-41,  4.7210e-42,
          6.3283e+00,  1.1748e-41,  1.6219e-41,  9.5541e-42,  1.1416e+00,
         -1.1715e+00, -2.8969e-01]])), ('fc2Root.weight', tensor([[ 5.3218,  1.7610,  2.3258, -7.9586]]))])
---------------plt.close(fig)    # close the figure window-------------------------------------------------------------------------------------------

 Optimizer's state_dict:
CRITERION = MSELoss()
OPTIMIZER = Adam (
Parameter Group 0
    amsgrad: False
    betas: (0.9, 0.999)
    eps: 1e-08
    lr: 0.001
    weight_decay: 0
)
Tempo di training 41.52328419685364


state	{2409959858728: {'step': 10000, 'exp_avg': tensor([[-3.3734e-01,  2.2891e-01,  4.9045e-44, -3.7134e-43, -3.4332e-43,
         -6.5661e-02, -3.1529e-43, -5.6753e-43, -9.1084e-44,  6.2196e-02,
          5.8176e-01,  3.4111e-01],
        [-3.4361e-01,  5.1404e-01,  9.5777e-07,  4.2740e-43,  6.3759e-43,
         -6.4229e-01,  2.5924e-43, -3.8536e-43, -5.5211e-43,  2.4203e-01,
          1.2058e+00,  3.7103e-01],
        [-1.6659e-01,  1.8095e-01,  2.0319e-43, -9.1084e-44,  1.6115e-43,
          1.3640e-01,  2.7325e-43, -3.4332e-43,  5.3950e-43, -2.5770e-03,
         -2.6614e-01, -3.3184e-01],
        [-1.7269e-01, -1.4049e-02, -5.5351e-43,  4.9045e-44,  3.2931e-43,
         -2.1456e-01,  4.8345e-43, -4.5542e-43, -2.4523e-43,  2.0353e-02,
          7.0493e-01,  3.6114e-01]]), 'exp_avg_sq': tensor([[2.2574e+01, 1.4905e+02, 4.5505e-08, 5.5520e-07, 1.8685e-06, 2.2386e+01,
         1.6191e-07, 2.9219e-08, 3.5584e-07, 2.3831e-02, 6.3448e+00, 8.7358e+00],
        [1.4930e+02, 8.3138e+02, 1.9813e-09, 1.6165e-07, 6.6725e-06, 1.4972e+02,
         2.3471e-07, 5.0063e-08, 9.1308e-08, 1.2728e-01, 4.4708e+01, 5.4149e+01],
        [3.8604e+00, 2.1318e+01, 9.4974e-09, 3.2858e-08, 2.2064e-07, 3.9004e+00,
         5.0599e-07, 4.6600e-09, 1.9304e-09, 1.7051e-03, 1.1681e+00, 1.5449e+00],
        [8.4896e+00, 6.3364e+01, 3.7489e-09, 3.3903e-08, 2.5422e-07, 8.5160e+00,
         3.2218e-11, 6.0844e-07, 2.1220e-08, 8.2398e-03, 2.9141e+00, 3.4490e+00]])}, 2409959861048: {'step': 10000, 'exp_avg': tensor([[ 0.0184, -0.1687,  0.4171, -0.5821]]), 'exp_avg_sq': tensor([[ 79.4832,  94.2244,  36.7481, 319.0852]])}, 2409965275160: {'step': 10000, 'exp_avg': tensor([[ 4.7329e-01,  5.4216e-01,  4.7644e-44, -4.7644e-44, -5.6052e-45,
          4.6593e-01, -3.3631e-44,  2.5784e-43,  2.4383e-43,  6.6290e-03,
         -2.0504e-01,  1.2295e-01],
        [-6.9436e-02,  1.6423e-01, -1.8777e-43, -7.5670e-44, -3.3631e-44,
         -5.8512e-02,  1.3172e-43, -1.4574e-43,  2.2981e-43,  2.1642e-03,
         -2.8664e-01,  3.5859e-01],
        [-7.9396e-02,  2.1790e-01,  1.7376e-43,  7.5670e-44, -2.3467e-15,
         -7.0081e-02,  1.8777e-43,  8.9683e-44,  1.5975e-43,  2.3004e-04,
         -3.7073e-01,  4.8564e-01],
        [-3.9318e+00, -3.1287e-01,  1.9618e-44,  2.5784e-43,  7.5670e-44,
         -3.9325e+00,  1.8777e-43,  2.5784e-43,  1.5975e-43,  2.3019e-01,
          2.4721e-01,  6.2185e-01]]), 'exp_avg_sq': tensor([[8.8175e-01, 3.6565e+00, 2.6791e-09, 4.6200e-09, 1.8306e-13, 8.6675e-01,
         6.4276e-09, 1.1013e-07, 3.3719e-08, 2.4027e-02, 4.9685e-02, 3.2924e-02],
        [7.3744e-01, 3.9998e+01, 2.2819e-08, 2.7460e-11, 3.1587e-09, 7.4382e-01,
         2.9175e-10, 6.3944e-10, 3.8794e-08, 1.6180e-01, 2.3423e-01, 1.9551e-01],
        [2.5335e+00, 1.1849e+02, 1.6629e-08, 5.7164e-09, 1.9665e-13, 2.5426e+00,
         5.0005e-09, 1.3780e-10, 1.9177e-10, 4.5724e-01, 7.1267e-01, 5.9630e-01],
        [5.0089e+01, 1.3476e+01, 5.2727e-09, 4.6260e-08, 1.1390e-10, 5.0099e+01,
         2.3692e-08, 6.4181e-08, 3.3405e-10, 4.7302e-01, 3.0088e-01, 3.7593e-01]])}, 2409961761512: {'step': 10000, 'exp_avg': tensor([[-0.9152, -0.2929, -0.3202,  6.3348]]), 'exp_avg_sq': tensor([[  2.6554,  31.8569,  67.2886, 116.5787]])}}param_groups	[{'lr': 0.001, 'betas': (0.9, 0.999), 'eps': 1e-08, 'weight_decay': 0, 'amsgrad': False, 'params': [2409959858728, 2409959861048, 2409965275160, 2409961761512]}]
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Average Error Test Dataset= 3.072193400065104
RMSE Train Dataset = [21.299212746555842, 19.678401915631387, 13.734853829466001, 9.757331634718726, 7.056259774268031]
RMSE Test Dataset = [9.039783709478902, 7.445610945044786, 4.475648477122783, 4.235559727094192, 3.973043567302416]
Number of epochs 10000
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
pred =162.14434814453125
true = tensor([164.3100])
differenza = tensor([2.1656])


pred =86.77049255371094
true = tensor([89.8000])
differenza = tensor([3.0295])


pred =153.71240234375
true = tensor([159.8700])
differenza = tensor([6.1576])


pred =72.36897277832031
true = tensor([69.])
differenza = tensor([3.3690])


pred =161.35816955566406
true = tensor([167.8000])
differenza = tensor([6.4418])


pred =161.98599243164062
true = tensor([163.])
differenza = tensor([1.0140])


pred =156.80812072753906
true = tensor([147.])
differenza = tensor([9.8081])


pred =85.11133575439453
true = tensor([86.1000])
differenza = tensor([0.9887])


pred =81.37381744384766
true = tensor([80.9000])
differenza = tensor([0.4738])


pred =159.00723266601562
true = tensor([159.])
differenza = tensor([0.0072])


pred =89.2996826171875
true = tensor([92.])
differenza = tensor([2.7003])


pred =114.40734100341797
true = tensor([118.])
differenza = tensor([3.5927])


pred =143.0337371826172
true = tensor([141.2000])
differenza = tensor([1.8337])


pred =115.5625228881836
true = tensor([117.7000])
differenza = tensor([2.1375])


pred =107.63668823242188
true = tensor([110.])
differenza = tensor([2.3633])


