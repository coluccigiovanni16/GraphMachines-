
+++++++++++++++++++++++++++++++++++REPORT+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

LISTA TEST FILE  
dict_keys(['molecule039.ct', 'molecule131.ct', 'molecule102.ct', 'molecule137.ct', 'molecule089.ct', 'molecule044.ct', 'molecule133.ct', 'molecule130.ct', 'molecule110.ct', 'molecule113.ct', 'molecule141.ct', 'molecule103.ct', 'molecule143.ct', 'molecule032.ct', 'molecule042.ct', 'molecule132.ct', 'molecule065.ct', 'molecule123.ct', 'molecule003.ct', 'molecule007.ct', 'molecule118.ct', 'molecule070.ct', 'molecule048.ct', 'molecule150.ct', 'molecule040.ct', 'molecule050.ct', 'molecule128.ct', 'molecule081.ct', 'molecule025.ct', 'molecule033.ct', 'molecule068.ct', 'molecule046.ct', 'molecule075.ct', 'molecule099.ct', 'molecule111.ct', 'molecule140.ct', 'molecule028.ct', 'molecule073.ct', 'molecule077.ct', 'molecule093.ct', 'molecule009.ct', 'molecule121.ct', 'molecule060.ct', 'molecule052.ct', 'molecule027.ct', 'molecule106.ct', 'molecule071.ct', 'molecule087.ct', 'molecule002.ct', 'molecule139.ct', 'molecule119.ct', 'molecule148.ct', 'molecule036.ct', 'molecule107.ct', 'molecule124.ct', 'molecule004.ct', 'molecule149.ct', 'molecule022.ct', 'molecule120.ct', 'molecule094.ct', 'molecule117.ct', 'molecule015.ct', 'molecule090.ct', 'molecule104.ct', 'molecule101.ct', 'molecule049.ct', 'molecule088.ct', 'molecule146.ct', 'molecule021.ct', 'molecule059.ct', 'molecule114.ct', 'molecule126.ct', 'molecule010.ct', 'molecule066.ct', 'molecule085.ct', 'molecule023.ct', 'molecule053.ct', 'molecule097.ct', 'molecule108.ct', 'molecule056.ct', 'molecule026.ct', 'molecule083.ct', 'molecule069.ct', 'molecule135.ct', 'molecule079.ct', 'molecule031.ct', 'molecule029.ct', 'molecule012.ct', 'molecule109.ct', 'molecule092.ct', 'molecule125.ct', 'molecule017.ct', 'molecule142.ct', 'molecule013.ct', 'molecule144.ct', 'molecule115.ct', 'molecule100.ct', 'molecule016.ct', 'molecule014.ct', 'molecule086.ct', 'molecule020.ct', 'molecule037.ct', 'molecule074.ct', 'molecule038.ct', 'molecule024.ct', 'molecule072.ct', 'molecule129.ct', 'molecule136.ct', 'molecule005.ct', 'molecule047.ct', 'molecule122.ct', 'molecule045.ct', 'molecule147.ct', 'molecule063.ct', 'molecule076.ct', 'molecule054.ct', 'molecule084.ct', 'molecule116.ct', 'molecule008.ct', 'molecule011.ct', 'molecule058.ct', 'molecule018.ct', 'molecule078.ct', 'molecule067.ct', 'molecule080.ct', 'molecule062.ct', 'molecule055.ct', 'molecule098.ct', 'molecule006.ct', 'molecule145.ct', 'molecule112.ct', 'molecule095.ct', 'molecule064.ct', 'molecule134.ct', 'molecule030.ct'])----------------------------------------------------------------------------------------------------------

LISTA VALIDATION FILE  
dict_keys(['molecule091.ct', 'molecule127.ct', 'molecule051.ct', 'molecule138.ct', 'molecule041.ct', 'molecule096.ct', 'molecule061.ct', 'molecule043.ct', 'molecule105.ct', 'molecule035.ct', 'molecule019.ct', 'molecule034.ct', 'molecule001.ct', 'molecule082.ct', 'molecule057.ct'])----------------------------------------------------------------------------------------------------------

Our model: 

Net(
  (fc1): Linear(in_features=12, out_features=4, bias=False)
  (fc2): Linear(in_features=4, out_features=1, bias=False)
  (LRelu): LeakyReLU(negative_slope=0.25)
  (fc1Root): Linear(in_features=12, out_features=4, bias=False)
  (fc2Root): Linear(in_features=4, out_features=1, bias=False)
  (LReluRoot): LeakyReLU(negative_slope=0.25)
)
Printing children
------------------------------[Linear(in_features=12, out_features=4, bias=False), Linear(in_features=4, out_features=1, bias=False), LeakyReLU(negative_slope=0.25), Linear(in_features=12, out_features=4, bias=False), Linear(in_features=4, out_features=1, bias=False), LeakyReLU(negative_slope=0.25)]

Printing Modules
------------------------------[Net(
  (fc1): Linear(in_features=12, out_features=4, bias=False)
  (fc2): Linear(in_features=4, out_features=1, bias=False)
  (LRelu): LeakyReLU(negative_slope=0.25)
  (fc1Root): Linear(in_features=12, out_features=4, bias=False)
  (fc2Root): Linear(in_features=4, out_features=1, bias=False)
  (LReluRoot): LeakyReLU(negative_slope=0.25)
), Linear(in_features=12, out_features=4, bias=False), Linear(in_features=4, out_features=1, bias=False), LeakyReLU(negative_slope=0.25), Linear(in_features=12, out_features=4, bias=False), Linear(in_features=4, out_features=1, bias=False), LeakyReLU(negative_slope=0.25)]
The state dict keys: 

odict_keys(['fc1.weight', 'fc2.weight', 'fc1Root.weight', 'fc2Root.weight'])Models state_dict:fc1.weight	torch.Size([4, 12])fc2.weight	torch.Size([1, 4])fc1Root.weight	torch.Size([4, 12])fc2Root.weight	torch.Size([1, 4])OrderedDict([('fc1.weight', tensor([[ 6.5240e-01, -1.1688e-01,  9.1225e-43, -2.4102e-43,  1.6591e-42,
          7.5102e-02, -8.6881e-43, -1.2472e-42, -1.7544e-42,  6.6679e-01,
          1.7582e+00,  7.9059e-01],
        [ 6.4376e-01,  3.6561e-01, -1.7796e-42, -1.5064e-42, -2.4663e-43,
          8.9533e-01,  7.0712e-06,  2.4383e-42, -9.0944e-43,  1.0474e+00,
          4.4897e-01,  4.8697e-02],
        [ 2.6376e-01,  1.8453e-01,  1.2612e-43,  1.6353e-42, -1.6465e-42,
          5.1314e-02,  2.2813e-42,  9.4728e-43,  2.4635e-42,  3.1849e-01,
         -1.1545e-01,  5.8892e-01],
        [ 1.9396e-01,  2.8023e-01,  1.3635e-42, -1.8833e-42, -9.8371e-43,
          6.4832e-01, -1.7909e-42, -1.8833e-42, -2.2491e-42,  2.3763e+00,
          9.2848e-01,  1.4958e-01]])), ('fc2.weight', tensor([[1.1987, 1.0865, 0.4192, 2.0561]])), ('fc1Root.weight', tensor([[-4.4972e+00,  1.2330e+00, -3.1417e-42, -2.0039e-42,  1.6129e-42,
         -3.5571e+00,  1.2921e-41, -3.1936e-42,  1.0134e-41, -3.7951e-01,
         -1.9869e-01,  7.0458e-01],
        [-2.0606e+00,  8.5604e-01,  5.4791e-43,  1.6126e-41, -7.2447e-43,
         -2.8640e+00, -5.1862e-42,  4.1436e-42,  3.4304e-42, -5.6081e-01,
         -7.6877e-01,  2.9257e-02],
        [ 3.8536e+00, -3.3738e-01,  6.1657e-43,  6.3093e-14, -3.6532e-42,
          4.8646e+00, -1.3950e-41, -1.5061e-41,  1.5386e-41,  1.8499e+00,
          5.5504e-01,  2.6739e+00],
        [ 4.3993e+00,  5.0485e-01,  4.2880e-42, -6.4698e-42, -1.2191e-42,
          4.0718e+00, -8.9627e-42, -9.4560e-42,  3.5075e-42, -3.6352e-01,
         -1.7919e+00,  2.3123e+00]])), ('fc2Root.weight', tensor([[ 2.6271,  1.3776, -4.0617, -2.4219]]))])
---------------plt.close(fig)    # close the figure window-------------------------------------------------------------------------------------------

 Optimizer's state_dict:
CRITERION = MSELoss()
OPTIMIZER = Adam (
Parameter Group 0
    amsgrad: False
    betas: (0.9, 0.999)
    eps: 1e-08
    lr: 0.001
    weight_decay: 0
)
Tempo di training 39.99931335449219


state	{2409929375400: {'step': 10000, 'exp_avg': tensor([[-5.5670e-01, -4.3252e+00,  2.3121e-43, -5.6052e-44,  4.2740e-43,
         -7.0599e-01, -2.1720e-43, -3.1529e-43, -4.4141e-43,  1.2170e-01,
          4.3554e-01, -9.7555e-02],
        [-1.0876e-01, -8.6742e-02, -4.5542e-43, -3.8536e-43, -6.3058e-44,
         -4.3713e-02, -9.0393e-08,  6.2358e-43, -2.3121e-43,  8.3430e-02,
          6.2263e-01,  7.8134e-01],
        [-3.8113e-02, -2.1992e-02,  2.1019e-44,  4.1338e-43, -4.1338e-43,
         -9.3079e-02,  5.8154e-43,  2.4523e-43,  6.3479e-43,  9.9212e-03,
          1.6607e-01,  4.4957e-01],
        [-4.7075e-01, -2.7120e-01,  3.4332e-43, -4.8345e-43, -2.4523e-43,
         -3.5330e-01, -4.5542e-43, -4.8345e-43, -5.8154e-43,  2.5901e-01,
          1.1981e+00,  1.4933e+00]]), 'exp_avg_sq': tensor([[1.1179e+01, 1.2187e+03, 7.6362e-07, 7.9741e-10, 1.5939e-11, 1.1340e+01,
         1.1555e-08, 7.5689e-08, 8.3083e-11, 4.4845e-02, 3.6186e+00, 5.6494e+00],
        [1.8135e+01, 5.2956e+02, 1.3096e-10, 2.4557e-08, 4.8952e-09, 1.8103e+01,
         6.8436e-11, 4.3109e-07, 2.7375e-06, 1.8293e-02, 3.1879e+00, 1.0249e+01],
        [4.0253e+00, 1.0632e+02, 1.8757e-08, 6.4211e-08, 2.1541e-08, 4.0429e+00,
         2.3359e-07, 2.1779e-08, 1.1633e-09, 2.0548e-03, 6.0007e-01, 2.4997e+00],
        [7.0673e+01, 2.0085e+03, 6.4404e-07, 1.1044e-09, 6.9116e-10, 7.0515e+01,
         5.0427e-07, 3.3312e-08, 3.1391e-08, 8.0106e-02, 1.2303e+01, 3.9317e+01]])}, 2409929371720: {'step': 10000, 'exp_avg': tensor([[0.1800, 0.0235, 0.3583, 0.6435]]), 'exp_avg_sq': tensor([[ 25.3181, 193.5946,  41.4314, 109.7548]])}, 2409929372840: {'step': 10000, 'exp_avg': tensor([[ 2.4214e-02, -8.6303e-01, -6.1657e-44, -3.3631e-44,  3.3631e-44,
          3.9919e-02,  2.1580e-43, -6.1657e-44,  1.7376e-43, -1.5623e-01,
         -3.8507e-01, -1.8736e-02],
        [ 4.3853e-02, -2.9309e-01,  1.9618e-44,  2.7185e-43, -1.9618e-44,
          3.0432e-02, -8.9683e-44,  7.5670e-44,  6.1657e-44, -8.7981e-02,
         -2.1307e-01,  1.0670e-02],
        [-1.1301e+00,  5.5488e-01,  1.9618e-44,  1.2367e-16, -6.1657e-44,
         -1.1132e+00, -2.4383e-43, -2.5784e-43,  2.5784e-43, -2.3418e-01,
          1.3116e-01,  2.5367e-01],
        [-6.4052e-02,  5.4885e-01,  7.5670e-44, -1.1771e-43, -3.3631e-44,
         -6.9525e-02, -1.5975e-43, -1.5975e-43,  6.1657e-44,  1.3211e-01,
          3.2190e-01,  2.0765e-02]]), 'exp_avg_sq': tensor([[3.8269e-01, 2.0011e+02, 5.2731e-12, 5.0141e-13, 2.8677e-09, 3.9256e-01,
         1.1128e-07, 2.6182e-10, 5.2148e-09, 1.0018e-01, 3.6880e-01, 1.5371e-01],
        [7.2531e-01, 4.9711e+02, 7.0930e-11, 2.8227e-08, 5.6747e-10, 7.1578e-01,
         4.7232e-11, 1.2560e-10, 8.0839e-12, 1.0966e-01, 2.5076e-01, 1.3105e-01],
        [2.7234e+00, 1.7418e+02, 1.2989e-09, 2.0746e-13, 2.2997e-09, 2.6659e+00,
         6.6492e-09, 2.3847e-08, 2.2372e-08, 9.8695e-02, 1.2037e-01, 3.3814e-01],
        [2.1972e-01, 9.8245e+01, 4.7788e-09, 5.3786e-10, 1.7525e-10, 2.2348e-01,
         1.2676e-08, 2.0913e-09, 7.2327e-11, 3.2208e-02, 2.0067e-01, 2.2010e-02]])}, 2409929374760: {'step': 10000, 'exp_avg': tensor([[-0.5814, -0.2767,  2.4299,  0.5782]]), 'exp_avg_sq': tensor([[ 39.1302, 235.6055,  17.4657,  14.9784]])}}param_groups	[{'lr': 0.001, 'betas': (0.9, 0.999), 'eps': 1e-08, 'weight_decay': 0, 'amsgrad': False, 'params': [2409929375400, 2409929371720, 2409929372840, 2409929374760]}]
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Average Error Test Dataset= 11.040597025553385
RMSE Train Dataset = [16.264611820029707, 13.870269243835333, 10.497425672027694, 7.447789103520425, 6.119758698936023]
RMSE Test Dataset = [43.625029380810304, 42.100370094684145, 39.34951277047071, 33.144236380906975, 26.569774968835006]
Number of epochs 10000
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
pred =164.31544494628906
true = tensor([170.])
differenza = tensor([5.6846])


pred =163.7958984375
true = tensor([166.])
differenza = tensor([2.2041])


pred =132.63308715820312
true = tensor([126.5000])
differenza = tensor([6.1331])


pred =161.94644165039062
true = tensor([156.8000])
differenza = tensor([5.1464])


pred =132.76768493652344
true = tensor([140.2700])
differenza = tensor([7.5023])


pred =166.94935607910156
true = tensor([174.])
differenza = tensor([7.0506])


pred =136.95101928710938
true = tensor([140.5000])
differenza = tensor([3.5490])


pred =129.80416870117188
true = tensor([131.7000])
differenza = tensor([1.8958])


pred =155.87933349609375
true = tensor([148.])
differenza = tensor([7.8793])


pred =105.62279510498047
true = tensor([109.])
differenza = tensor([3.3772])


pred =82.7560806274414
true = tensor([90.])
differenza = tensor([7.2439])


pred =110.0726318359375
true = tensor([109.4000])
differenza = tensor([0.6726])


pred =-62.91203689575195
true = tensor([-164.])
differenza = tensor([101.0880])


pred =157.5151824951172
true = tensor([155.3000])
differenza = tensor([2.2152])


pred =142.2332305908203
true = tensor([146.2000])
differenza = tensor([3.9668])


