
+++++++++++++++++++++++++++++++++++REPORT+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

LISTA TEST FILE  
dict_keys(['molecule023.ct', 'molecule053.ct', 'molecule097.ct', 'molecule108.ct', 'molecule056.ct', 'molecule026.ct', 'molecule083.ct', 'molecule069.ct', 'molecule135.ct', 'molecule079.ct', 'molecule031.ct', 'molecule029.ct', 'molecule012.ct', 'molecule109.ct', 'molecule092.ct', 'molecule125.ct', 'molecule017.ct', 'molecule142.ct', 'molecule013.ct', 'molecule144.ct', 'molecule115.ct', 'molecule100.ct', 'molecule016.ct', 'molecule014.ct', 'molecule086.ct', 'molecule020.ct', 'molecule037.ct', 'molecule074.ct', 'molecule038.ct', 'molecule024.ct', 'molecule072.ct', 'molecule129.ct', 'molecule136.ct', 'molecule005.ct', 'molecule047.ct', 'molecule122.ct', 'molecule045.ct', 'molecule147.ct', 'molecule063.ct', 'molecule076.ct', 'molecule054.ct', 'molecule084.ct', 'molecule116.ct', 'molecule008.ct', 'molecule011.ct', 'molecule058.ct', 'molecule018.ct', 'molecule078.ct', 'molecule067.ct', 'molecule080.ct', 'molecule062.ct', 'molecule055.ct', 'molecule098.ct', 'molecule006.ct', 'molecule145.ct', 'molecule112.ct', 'molecule095.ct', 'molecule064.ct', 'molecule134.ct', 'molecule030.ct', 'molecule091.ct', 'molecule127.ct', 'molecule051.ct', 'molecule138.ct', 'molecule041.ct', 'molecule096.ct', 'molecule061.ct', 'molecule043.ct', 'molecule105.ct', 'molecule035.ct', 'molecule019.ct', 'molecule034.ct', 'molecule001.ct', 'molecule082.ct', 'molecule057.ct', 'molecule039.ct', 'molecule131.ct', 'molecule102.ct', 'molecule137.ct', 'molecule089.ct', 'molecule044.ct', 'molecule133.ct', 'molecule130.ct', 'molecule110.ct', 'molecule113.ct', 'molecule141.ct', 'molecule103.ct', 'molecule143.ct', 'molecule032.ct', 'molecule042.ct', 'molecule132.ct', 'molecule065.ct', 'molecule123.ct', 'molecule003.ct', 'molecule007.ct', 'molecule118.ct', 'molecule070.ct', 'molecule048.ct', 'molecule150.ct', 'molecule040.ct', 'molecule050.ct', 'molecule128.ct', 'molecule081.ct', 'molecule025.ct', 'molecule033.ct', 'molecule068.ct', 'molecule046.ct', 'molecule075.ct', 'molecule099.ct', 'molecule111.ct', 'molecule140.ct', 'molecule028.ct', 'molecule073.ct', 'molecule077.ct', 'molecule093.ct', 'molecule009.ct', 'molecule121.ct', 'molecule060.ct', 'molecule052.ct', 'molecule027.ct', 'molecule106.ct', 'molecule071.ct', 'molecule087.ct', 'molecule002.ct', 'molecule139.ct', 'molecule119.ct', 'molecule148.ct', 'molecule036.ct', 'molecule107.ct', 'molecule124.ct', 'molecule004.ct', 'molecule149.ct', 'molecule022.ct', 'molecule120.ct', 'molecule094.ct'])----------------------------------------------------------------------------------------------------------

LISTA VALIDATION FILE  
dict_keys(['molecule117.ct', 'molecule015.ct', 'molecule090.ct', 'molecule104.ct', 'molecule101.ct', 'molecule049.ct', 'molecule088.ct', 'molecule146.ct', 'molecule021.ct', 'molecule059.ct', 'molecule114.ct', 'molecule126.ct', 'molecule010.ct', 'molecule066.ct', 'molecule085.ct'])----------------------------------------------------------------------------------------------------------

Our model: 

Net(
  (fc1): Linear(in_features=12, out_features=4, bias=False)
  (fc2): Linear(in_features=4, out_features=1, bias=False)
  (LRelu): LeakyReLU(negative_slope=0.25)
  (fc1Root): Linear(in_features=12, out_features=4, bias=False)
  (fc2Root): Linear(in_features=4, out_features=1, bias=False)
  (LReluRoot): LeakyReLU(negative_slope=0.25)
)
Printing children
------------------------------[Linear(in_features=12, out_features=4, bias=False), Linear(in_features=4, out_features=1, bias=False), LeakyReLU(negative_slope=0.25), Linear(in_features=12, out_features=4, bias=False), Linear(in_features=4, out_features=1, bias=False), LeakyReLU(negative_slope=0.25)]

Printing Modules
------------------------------[Net(
  (fc1): Linear(in_features=12, out_features=4, bias=False)
  (fc2): Linear(in_features=4, out_features=1, bias=False)
  (LRelu): LeakyReLU(negative_slope=0.25)
  (fc1Root): Linear(in_features=12, out_features=4, bias=False)
  (fc2Root): Linear(in_features=4, out_features=1, bias=False)
  (LReluRoot): LeakyReLU(negative_slope=0.25)
), Linear(in_features=12, out_features=4, bias=False), Linear(in_features=4, out_features=1, bias=False), LeakyReLU(negative_slope=0.25), Linear(in_features=12, out_features=4, bias=False), Linear(in_features=4, out_features=1, bias=False), LeakyReLU(negative_slope=0.25)]
The state dict keys: 

odict_keys(['fc1.weight', 'fc2.weight', 'fc1Root.weight', 'fc2Root.weight'])Models state_dict:fc1.weight	torch.Size([4, 12])fc2.weight	torch.Size([1, 4])fc1Root.weight	torch.Size([4, 12])fc2Root.weight	torch.Size([1, 4])OrderedDict([('fc1.weight', tensor([[-1.1910e-01, -5.7968e-01,  2.5223e-44,  4.3020e-43,  4.2599e-43,
         -4.1745e-01,  1.0860e-42, -4.0343e-42, -4.8205e-43,  7.0088e-02,
          8.1670e-02, -9.3050e-01],
        [-1.2183e-01,  1.0448e+00, -3.4612e-43, -4.7504e-43, -1.3410e-42,
         -3.2523e-01,  3.3631e-44,  1.1639e-11,  5.1848e-44,  1.2454e-02,
          2.4280e-01, -3.2459e-01],
        [ 9.9099e-01,  8.8081e-03, -6.4558e-42, -5.6052e-43,  1.0173e-42,
          3.2007e-01, -5.5898e-42,  4.2740e-43, -2.5083e-43,  1.1908e-01,
          4.5492e-01,  3.8072e-01],
        [-1.4364e-01,  3.8054e-01, -1.9758e-43, -1.4714e-42, -3.7975e-43,
         -4.8503e-01,  7.9173e-43,  2.4803e-43,  1.2051e-42,  1.2849e-02,
          8.0634e-02, -3.5096e-01]])), ('fc2.weight', tensor([[-1.2920,  0.6321, -1.5537,  0.6615]])), ('fc1Root.weight', tensor([[ 7.3772e+00,  1.4398e+00, -1.6858e-41,  1.8294e-41, -1.8329e-42,
          7.7636e+00,  1.7932e-41, -8.3447e-42, -4.1619e-43,  4.0129e+00,
         -3.6417e-01,  2.1778e+00],
        [-6.0774e-01, -9.3775e-01,  8.5381e-42,  1.8555e-41,  1.7990e-41,
         -1.3562e+00,  2.0036e-41, -1.3312e-43, -9.9814e-42,  2.6551e-01,
         -3.0630e-02, -6.0987e-01],
        [-4.1965e+00,  3.6007e-01,  1.9289e-41,  5.8210e-42, -4.3650e-42,
         -4.4835e+00,  1.9520e-42,  1.8665e-41, -1.1983e-41, -3.0416e-01,
          1.6911e+00, -3.0964e+00],
        [-4.6478e+00, -1.9088e+00, -1.9925e-41, -1.8433e-41, -1.6353e-41,
         -4.4471e+00, -1.0378e-41, -9.8371e-43, -3.8676e-43, -1.4352e+00,
          1.5438e+00, -9.1433e-01]])), ('fc2Root.weight', tensor([[-5.1864,  2.3942,  5.7928,  4.6496]]))])
---------------plt.close(fig)    # close the figure window-------------------------------------------------------------------------------------------

 Optimizer's state_dict:
CRITERION = MSELoss()
OPTIMIZER = Adam (
Parameter Group 0
    amsgrad: False
    betas: (0.9, 0.999)
    eps: 1e-08
    lr: 0.001
    weight_decay: 0
)
Tempo di training 37.6626501083374


state	{2409933203000: {'step': 10000, 'exp_avg': tensor([[ 3.3871e-01, -1.3047e-01,  7.0065e-45,  1.8918e-43,  1.8918e-43,
          2.0193e-01,  4.9746e-43, -1.6830e-42, -2.1720e-43,  8.2741e-02,
          7.9154e-01,  6.9551e-01],
        [ 4.6572e-02,  4.6265e-01, -1.4714e-43, -2.1720e-43, -6.0956e-43,
         -4.6905e-02,  1.9618e-44, -2.0825e-13,  2.1019e-44, -3.9849e-04,
          1.9168e-02, -1.3621e-01],
        [-5.5112e-01,  1.6668e-01, -3.6714e-43, -2.4523e-43,  4.5542e-43,
         -8.5862e-01, -1.1210e-44,  1.8918e-43, -1.0510e-43,  1.1546e-01,
          1.1155e+00,  4.5177e-02],
        [ 4.1336e-02,  1.5718e-01, -9.1084e-44, -6.6562e-43, -1.6115e-43,
         -1.1552e-01,  3.5733e-43,  1.0510e-43,  5.3950e-43, -5.0110e-04,
         -5.9891e-02, -1.4768e-01]]), 'exp_avg_sq': tensor([[6.8653e+01, 1.1556e+03, 6.5210e-07, 4.1704e-07, 6.0423e-10, 6.8537e+01,
         1.1040e-06, 2.9285e-09, 2.0117e-07, 6.2427e-02, 3.5749e+01, 1.7822e+01],
        [2.3636e+00, 1.8971e+01, 5.3854e-07, 1.8520e-09, 1.6131e-06, 2.3446e+00,
         6.4885e-07, 1.6911e-10, 8.4351e-11, 3.1341e-04, 5.6610e-01, 9.0691e-01],
        [2.4177e+02, 1.9033e+03, 2.9442e-09, 4.0547e-08, 8.2817e-08, 2.4248e+02,
         3.5319e-10, 2.3048e-08, 4.6897e-07, 8.4463e-02, 6.0129e+01, 8.8714e+01],
        [2.8042e+00, 2.3063e+01, 5.9811e-07, 1.4642e-09, 2.5200e-09, 2.7864e+00,
         1.9260e-08, 2.4402e-07, 5.7173e-09, 4.8073e-04, 6.9799e-01, 1.0686e+00]])}, 2409933203160: {'step': 10000, 'exp_avg': tensor([[ 0.3965,  0.1430, -0.0932,  0.1675]]), 'exp_avg_sq': tensor([[197.6343,  90.8506, 252.4955,  27.4059]])}, 2409933204120: {'step': 10000, 'exp_avg': tensor([[-3.9975e+00, -3.4754e-01, -2.2981e-43,  2.4383e-43, -3.3631e-44,
         -3.9926e+00,  2.4383e-43, -1.1771e-43, -5.6052e-45, -9.9422e-02,
          1.8117e-01,  8.4825e-01],
        [ 8.9207e-02,  4.0959e-01,  1.1771e-43,  2.4383e-43,  2.4383e-43,
          7.9574e-02,  2.5784e-43, -5.6052e-45, -1.3172e-43,  5.7447e-02,
         -4.3429e-01,  2.6860e-01],
        [ 8.6917e-01,  5.5709e-01,  2.5784e-43,  7.5670e-44, -6.1657e-44,
          8.6547e-01,  3.3631e-44,  2.4383e-43, -1.5975e-43,  2.8743e-02,
         -2.4051e-01,  5.1375e-03],
        [ 1.2852e-01,  7.9382e-01, -2.5784e-43, -2.4383e-43, -2.1580e-43,
          1.3111e-01, -1.4574e-43, -1.9618e-44, -5.6052e-45,  8.6427e-02,
         -8.2230e-01,  5.2490e-01]]), 'exp_avg_sq': tensor([[2.9718e+01, 6.6675e+00, 1.5967e-08, 2.1239e-08, 4.1417e-11, 2.9657e+01,
         3.3942e-08, 7.7263e-09, 3.8431e-10, 7.8231e-02, 2.9663e-01, 4.3905e-01],
        [6.1106e+00, 3.6287e+02, 1.8693e-10, 2.5091e-08, 2.2735e-08, 6.0958e+00,
         5.9044e-08, 1.7201e-09, 8.6877e-09, 9.8087e-01, 1.9071e+00, 1.3786e+00],
        [1.9314e+00, 1.4177e+01, 3.7685e-08, 3.2647e-11, 5.6647e-12, 1.9202e+00,
         9.4515e-11, 3.2399e-08, 4.4047e-09, 8.8665e-02, 9.2880e-02, 4.5826e-02],
        [6.3487e-01, 6.3264e+01, 5.3130e-08, 2.1840e-08, 1.4324e-08, 6.3773e-01,
         8.8619e-09, 5.3344e-09, 2.8328e-09, 6.7375e-02, 1.3125e+00, 2.0001e-01]])}, 2409933204600: {'step': 10000, 'exp_avg': tensor([[11.7248, -0.2516, -1.3266, -1.0203]]), 'exp_avg_sq': tensor([[307.3369,  68.2638,   4.1793,   9.6598]])}}param_groups	[{'lr': 0.001, 'betas': (0.9, 0.999), 'eps': 1e-08, 'weight_decay': 0, 'amsgrad': False, 'params': [2409933203000, 2409933203160, 2409933204120, 2409933204600]}]
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Average Error Test Dataset= 4.703000132242838
RMSE Train Dataset = [21.8724510233657, 19.30631016172036, 15.302732256102278, 11.40798293235754, 7.709934405135632]
RMSE Test Dataset = [10.937199005344993, 10.163216510959156, 6.85509898174786, 6.979426531911878, 7.021890472001201]
Number of epochs 10000
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
pred =161.409423828125
true = tensor([164.])
differenza = tensor([2.5906])


pred =84.31314849853516
true = tensor([79.2000])
differenza = tensor([5.1132])


pred =160.9331512451172
true = tensor([164.])
differenza = tensor([3.0668])


pred =158.32553100585938
true = tensor([137.4600])
differenza = tensor([20.8655])


pred =159.1217041015625
true = tensor([155.6800])
differenza = tensor([3.4417])


pred =134.8555450439453
true = tensor([122.7000])
differenza = tensor([12.1555])


pred =160.9331512451172
true = tensor([165.])
differenza = tensor([4.0668])


pred =166.91091918945312
true = tensor([166.])
differenza = tensor([0.9109])


pred =90.897216796875
true = tensor([93.5000])
differenza = tensor([2.6028])


pred =136.96607971191406
true = tensor([136.7300])
differenza = tensor([0.2361])


pred =154.52362060546875
true = tensor([161.])
differenza = tensor([6.4764])


pred =165.54931640625
true = tensor([166.])
differenza = tensor([0.4507])


pred =56.976993560791016
true = tensor([58.])
differenza = tensor([1.0230])


pred =139.3773193359375
true = tensor([133.8000])
differenza = tensor([5.5773])


pred =159.96762084960938
true = tensor([158.])
differenza = tensor([1.9676])


