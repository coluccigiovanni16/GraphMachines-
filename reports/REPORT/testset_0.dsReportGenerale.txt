
+++++++++++++++++++++++++++++++++++REPORT+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

LISTA TEST FILE  
dict_keys(['molecule125.ct', 'molecule017.ct', 'molecule142.ct', 'molecule013.ct', 'molecule144.ct', 'molecule115.ct', 'molecule100.ct', 'molecule016.ct', 'molecule014.ct', 'molecule086.ct', 'molecule020.ct', 'molecule037.ct', 'molecule074.ct', 'molecule038.ct', 'molecule024.ct', 'molecule072.ct', 'molecule129.ct', 'molecule136.ct', 'molecule005.ct', 'molecule047.ct', 'molecule122.ct', 'molecule045.ct', 'molecule147.ct', 'molecule063.ct', 'molecule076.ct', 'molecule054.ct', 'molecule084.ct', 'molecule116.ct', 'molecule008.ct', 'molecule011.ct', 'molecule058.ct', 'molecule018.ct', 'molecule078.ct', 'molecule067.ct', 'molecule080.ct', 'molecule062.ct', 'molecule055.ct', 'molecule098.ct', 'molecule006.ct', 'molecule145.ct', 'molecule112.ct', 'molecule095.ct', 'molecule064.ct', 'molecule134.ct', 'molecule030.ct', 'molecule091.ct', 'molecule127.ct', 'molecule051.ct', 'molecule138.ct', 'molecule041.ct', 'molecule096.ct', 'molecule061.ct', 'molecule043.ct', 'molecule105.ct', 'molecule035.ct', 'molecule019.ct', 'molecule034.ct', 'molecule001.ct', 'molecule082.ct', 'molecule057.ct', 'molecule039.ct', 'molecule131.ct', 'molecule102.ct', 'molecule137.ct', 'molecule089.ct', 'molecule044.ct', 'molecule133.ct', 'molecule130.ct', 'molecule110.ct', 'molecule113.ct', 'molecule141.ct', 'molecule103.ct', 'molecule143.ct', 'molecule032.ct', 'molecule042.ct', 'molecule132.ct', 'molecule065.ct', 'molecule123.ct', 'molecule003.ct', 'molecule007.ct', 'molecule118.ct', 'molecule070.ct', 'molecule048.ct', 'molecule150.ct', 'molecule040.ct', 'molecule050.ct', 'molecule128.ct', 'molecule081.ct', 'molecule025.ct', 'molecule033.ct', 'molecule068.ct', 'molecule046.ct', 'molecule075.ct', 'molecule099.ct', 'molecule111.ct', 'molecule140.ct', 'molecule028.ct', 'molecule073.ct', 'molecule077.ct', 'molecule093.ct', 'molecule009.ct', 'molecule121.ct', 'molecule060.ct', 'molecule052.ct', 'molecule027.ct', 'molecule106.ct', 'molecule071.ct', 'molecule087.ct', 'molecule002.ct', 'molecule139.ct', 'molecule119.ct', 'molecule148.ct', 'molecule036.ct', 'molecule107.ct', 'molecule124.ct', 'molecule004.ct', 'molecule149.ct', 'molecule022.ct', 'molecule120.ct', 'molecule094.ct', 'molecule117.ct', 'molecule015.ct', 'molecule090.ct', 'molecule104.ct', 'molecule101.ct', 'molecule049.ct', 'molecule088.ct', 'molecule146.ct', 'molecule021.ct', 'molecule059.ct', 'molecule114.ct', 'molecule126.ct', 'molecule010.ct', 'molecule066.ct', 'molecule085.ct'])


LISTA VALIDATION FILE  
dict_keys(['molecule023.ct', 'molecule053.ct', 'molecule097.ct', 'molecule108.ct', 'molecule056.ct', 'molecule026.ct', 'molecule083.ct', 'molecule069.ct', 'molecule135.ct', 'molecule079.ct', 'molecule031.ct', 'molecule029.ct', 'molecule012.ct', 'molecule109.ct', 'molecule092.ct'])


Our model: 

RegressionGm(
  (fc1): Linear(in_features=12, out_features=4, bias=False)
  (fc2): Linear(in_features=4, out_features=1, bias=False)
  (LRelu): SELU()
  (fc1Root): Linear(in_features=12, out_features=4, bias=False)
  (fc2Root): Linear(in_features=4, out_features=1, bias=False)
  (LReluRoot): SELU()
)
Printing children
------------------------------[Linear(in_features=12, out_features=4, bias=False), Linear(in_features=4, out_features=1, bias=False), SELU(), Linear(in_features=12, out_features=4, bias=False), Linear(in_features=4, out_features=1, bias=False), SELU()]

Printing Modules
------------------------------[RegressionGm(
  (fc1): Linear(in_features=12, out_features=4, bias=False)
  (fc2): Linear(in_features=4, out_features=1, bias=False)
  (LRelu): SELU()
  (fc1Root): Linear(in_features=12, out_features=4, bias=False)
  (fc2Root): Linear(in_features=4, out_features=1, bias=False)
  (LReluRoot): SELU()
), Linear(in_features=12, out_features=4, bias=False), Linear(in_features=4, out_features=1, bias=False), SELU(), Linear(in_features=12, out_features=4, bias=False), Linear(in_features=4, out_features=1, bias=False), SELU()]
The state dict keys: 

odict_keys(['fc1.weight', 'fc2.weight', 'fc1Root.weight', 'fc2Root.weight'])Models state_dict:fc1.weight	torch.Size([4, 12])fc2.weight	torch.Size([1, 4])fc1Root.weight	torch.Size([4, 12])fc2Root.weight	torch.Size([1, 4])OrderedDict([('fc1.weight', tensor([[ 1.0355e-01, -2.4245e-01, -7.0896e-02, -7.8075e-02, -1.6955e-02,
         -2.2875e-01, -6.0978e-03, -1.8775e-01,  8.3566e-04,  6.9066e-02,
         -2.8370e-01, -2.6572e-01],
        [-1.7515e-02,  1.8855e-01,  1.4032e-04, -4.7279e-02,  7.7044e-04,
          7.4745e-02, -1.5432e-01,  2.7662e-05,  5.0097e-02, -4.2271e-02,
          1.2595e-01, -2.8141e-01],
        [ 1.4927e-02, -1.8136e-01, -4.0021e-02,  1.7874e-01,  1.4445e-01,
          4.4729e-02,  6.4197e-02, -8.8678e-02,  2.8205e-03,  1.4337e-01,
         -3.6139e-01,  1.7547e-01],
        [ 1.6149e-01, -2.2410e-01, -1.6564e-01,  1.6831e-01, -8.2104e-03,
         -1.2567e-01, -4.6465e-02, -4.8105e-02,  1.2065e-03,  2.1445e-02,
         -2.6875e-01, -7.3348e-02]])), ('fc2.weight', tensor([[-0.2360, -0.4273, -0.1025, -0.4470]])), ('fc1Root.weight', tensor([[ 3.9645e-02,  3.0065e-01, -1.2802e-01,  8.1120e-05, -1.5824e-02,
          2.8334e-01, -1.1559e-01, -1.0718e-01, -2.5706e-02, -1.3272e-01,
          3.6358e-01,  1.6735e-01],
        [-3.0248e-01,  1.7236e-01, -1.5639e-01,  1.4656e-01, -1.6211e-01,
         -1.6460e-01,  7.7814e-02, -5.8286e-05, -1.2143e-01, -3.8163e-01,
         -1.4624e-01,  6.1055e-02],
        [ 1.3152e-01,  7.9760e-02, -1.2695e-01,  1.3578e-01,  1.2709e-01,
         -5.6953e-02,  8.0321e-07,  7.1980e-02,  2.6311e-04, -3.4612e-01,
         -9.8751e-02, -3.1114e-01],
        [-2.7572e-01, -2.2995e-01, -1.4680e-01,  1.0942e-01, -5.3713e-02,
          9.1817e-02, -1.8435e-03, -1.6556e-02, -1.3556e-01, -2.8023e-01,
          6.8144e-02, -2.7503e-02]])), ('fc2Root.weight', tensor([[ 0.5317, -0.2437, -0.5698, -0.5434]]))])
---------------plt.close(fig)    # close the figure window-------------------------------------------------------------------------------------------

 Optimizer's state_dict:
CRITERION = MSELoss()
OPTIMIZER = Adam (
Parameter Group 0
    amsgrad: False
    betas: (0.9, 0.999)
    eps: 1e-08
    lr: 0.001
    weight_decay: 0
)
Tempo di training 0.2264556884765625


state	{140259197882688: {'step': 100, 'exp_avg': tensor([[ 3.8692e+01,  6.3851e+00, -7.8565e-02, -8.5905e-02, -2.2001e-02,
          3.8360e+01, -9.5411e-03, -1.9681e-01,  2.5894e-03,  5.3887e-01,
          2.0641e+01,  2.0691e+01],
        [ 7.9662e+01,  1.3180e+01, -1.4635e-04, -5.4228e-02,  2.4886e-03,
          7.9754e+01, -1.6315e-01, -1.8550e-05,  5.7152e-02,  6.0639e-01,
          4.0012e+01,  4.8091e+01],
        [ 1.7620e+01,  3.4973e+00, -4.6660e-02,  1.8775e-01,  1.5320e-01,
          1.7649e+01,  7.1695e-02, -9.6716e-02,  5.3955e-03,  2.9436e-01,
          1.0770e+01,  9.3528e+00],
        [ 9.3367e+01,  1.6075e+01, -1.7455e-01,  1.7724e-01, -1.2070e-02,
          9.3080e+01, -5.3382e-02, -5.5086e-02,  3.1479e-03,  9.7928e-01,
          5.0623e+01,  5.1973e+01]]), 'exp_avg_sq': tensor([[7.0670e+01, 1.0720e+00, 1.1071e-03, 1.2589e-03, 2.4467e-04, 6.9123e+01,
         1.2465e-04, 4.6737e-03, 6.3824e-05, 1.6250e-02, 1.9688e+01, 2.1201e+01],
        [3.9971e+02, 4.9910e+00, 1.2197e-05, 6.6981e-04, 6.2896e-05, 4.0075e+02,
         3.4146e-03, 3.9605e-07, 7.1704e-04, 4.2912e-02, 9.3003e+01, 1.5661e+02],
        [2.2097e+01, 4.1564e-01, 5.5435e-04, 4.3155e-03, 3.0795e-03, 2.2173e+01,
         9.7347e-04, 1.4991e-03, 8.8579e-05, 9.9005e-03, 8.0601e+00, 5.7851e+00],
        [3.8876e+02, 6.7354e+00, 3.8194e-03, 3.9181e-03, 1.4733e-04, 3.8562e+02,
         6.5643e-04, 6.8352e-04, 6.8887e-05, 5.4756e-02, 1.3101e+02, 1.1371e+02]])}, 140259197882848: {'step': 100, 'exp_avg': tensor([[94.1662, -0.9826, 20.7565, 38.0984]]), 'exp_avg_sq': tensor([[280.0244,  23.2390,  30.5056,  41.7898]])}, 140259197885328: {'step': 100, 'exp_avg': tensor([[-1.4089e+02, -1.2351e+02, -2.3346e-02, -1.2449e-06, -3.5144e-03,
         -1.4085e+02, -2.1193e-02, -1.9734e-02, -5.3547e-03, -6.2516e+01,
         -8.0387e+01, -7.4835e+01],
        [ 6.6093e+01,  5.7526e+01, -2.8251e-02,  2.6554e-02, -2.9239e-02,
          6.6116e+01,  1.4619e-02, -6.6165e-06, -2.2206e-02,  2.5119e+01,
          4.1967e+01,  3.9372e+01],
        [ 2.0828e+02,  1.8324e+02, -2.3161e-02,  2.4689e-02,  2.3187e-02,
          2.0825e+02, -1.8369e-04,  1.3597e-02,  8.2157e-05,  9.6709e+01,
          1.1397e+02,  1.0763e+02],
        [ 1.5761e+02,  1.3216e+02, -2.6595e-02,  2.0124e-02, -1.0382e-02,
          1.5767e+02, -6.7006e-04, -3.6531e-03, -2.4652e-02,  5.5565e+01,
          1.0495e+02,  9.7067e+01]]), 'exp_avg_sq': tensor([[1.7212e+03, 4.6686e+02, 8.2735e-05, 4.5669e-08, 7.5088e-06, 1.7202e+03,
         7.1008e-05, 6.3558e-05, 1.1424e-05, 3.9527e+02, 4.9783e+02, 4.3150e+02],
        [3.0725e+02, 9.0240e+01, 1.1270e-04, 1.0182e-04, 1.1928e-04, 3.0750e+02,
         4.0582e-05, 3.4746e-08, 7.6417e-05, 4.1270e+01, 1.2966e+02, 1.1407e+02],
        [3.8317e+03, 1.0157e+03, 8.1696e-05, 9.0492e-05, 8.1836e-05, 3.8305e+03,
         1.6052e-06, 3.6582e-05, 6.5096e-07, 8.0416e+02, 1.1745e+03, 1.0563e+03],
        [2.3343e+03, 6.1399e+02, 1.0207e-04, 6.5507e-05, 2.5265e-05, 2.3362e+03,
         2.4798e-06, 7.7833e-06, 9.0273e-05, 4.6555e+02, 8.0045e+02, 6.8869e+02]])}, 140259197882768: {'step': 100, 'exp_avg': tensor([[-211.3552,  172.8531,   75.8726,  154.5576]]), 'exp_avg_sq': tensor([[1676.1796, 2589.5361,  228.8610,  721.0054]])}}param_groups	[{'lr': 0.001, 'betas': (0.9, 0.999), 'eps': 1e-08, 'weight_decay': 0, 'amsgrad': False, 'params': [140259197882688, 140259197882848, 140259197885328, 140259197882768]}]

Average Error Test Dataset= 134.98824259440104
RMSE Train Dataset = [140.18986845970718, 140.083875544261, 139.98113014572715, 139.88328700875957, 139.79381440848877, 139.70018818213882, 139.5852254224995, 139.44978374848776, 139.29155293394498, 139.10065487804147]
RMSE Test Dataset = [139.30112251656482, 139.18569683385215, 139.07436747114832, 138.96963893914022, 138.87909956820357, 138.7857710083242, 138.675338865189, 138.5449568844893, 138.38984789355035, 138.19775374666912]
Number of epochs 100

pred =1.1340446472167969
true = tensor([106.5000])
difference = tensor([105.3660])


pred =1.1678881645202637
true = tensor([132.7000])
difference = tensor([131.5321])


pred =1.1665058135986328
true = tensor([153.3000])
difference = tensor([152.1335])


pred =1.16788911819458
true = tensor([155.])
difference = tensor([153.8321])


pred =1.173996925354004
true = tensor([140.6000])
difference = tensor([139.4260])


pred =1.1727135181427002
true = tensor([99.2000])
difference = tensor([98.0273])


pred =1.2124160528182983
true = tensor([162.2000])
difference = tensor([160.9876])


pred =1.280397653579712
true = tensor([135.2000])
difference = tensor([133.9196])


pred =1.294656753540039
true = tensor([160.])
difference = tensor([158.7053])


pred =1.1377989053726196
true = tensor([170.5000])
difference = tensor([169.3622])


pred =1.3322498798370361
true = tensor([115.6000])
difference = tensor([114.2677])


pred =1.1735947132110596
true = tensor([118.2000])
difference = tensor([117.0264])


pred =1.2836172580718994
true = tensor([63.3000])
difference = tensor([62.0164])


pred =1.170978307723999
true = tensor([161.2000])
difference = tensor([160.0290])


pred =1.247596025466919
true = tensor([169.4400])
difference = tensor([168.1924])


