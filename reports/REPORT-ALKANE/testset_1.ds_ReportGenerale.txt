
+++++++++++++++++++++++++++++++++++REPORT+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

LISTA TEST FILE  
dict_keys(['molecule023.ct', 'molecule053.ct', 'molecule097.ct', 'molecule108.ct', 'molecule056.ct', 'molecule026.ct', 'molecule083.ct', 'molecule069.ct', 'molecule135.ct', 'molecule079.ct', 'molecule031.ct', 'molecule029.ct', 'molecule012.ct', 'molecule109.ct', 'molecule092.ct', 'molecule125.ct', 'molecule017.ct', 'molecule142.ct', 'molecule013.ct', 'molecule144.ct', 'molecule115.ct', 'molecule100.ct', 'molecule016.ct', 'molecule014.ct', 'molecule086.ct', 'molecule020.ct', 'molecule037.ct', 'molecule074.ct', 'molecule038.ct', 'molecule024.ct', 'molecule072.ct', 'molecule129.ct', 'molecule136.ct', 'molecule005.ct', 'molecule047.ct', 'molecule122.ct', 'molecule045.ct', 'molecule147.ct', 'molecule063.ct', 'molecule076.ct', 'molecule054.ct', 'molecule084.ct', 'molecule116.ct', 'molecule008.ct', 'molecule011.ct', 'molecule058.ct', 'molecule018.ct', 'molecule078.ct', 'molecule067.ct', 'molecule080.ct', 'molecule062.ct', 'molecule055.ct', 'molecule098.ct', 'molecule006.ct', 'molecule145.ct', 'molecule112.ct', 'molecule095.ct', 'molecule064.ct', 'molecule134.ct', 'molecule030.ct', 'molecule091.ct', 'molecule127.ct', 'molecule051.ct', 'molecule138.ct', 'molecule041.ct', 'molecule096.ct', 'molecule061.ct', 'molecule043.ct', 'molecule105.ct', 'molecule035.ct', 'molecule019.ct', 'molecule034.ct', 'molecule001.ct', 'molecule082.ct', 'molecule057.ct', 'molecule039.ct', 'molecule131.ct', 'molecule102.ct', 'molecule137.ct', 'molecule089.ct', 'molecule044.ct', 'molecule133.ct', 'molecule130.ct', 'molecule110.ct', 'molecule113.ct', 'molecule141.ct', 'molecule103.ct', 'molecule143.ct', 'molecule032.ct', 'molecule042.ct', 'molecule132.ct', 'molecule065.ct', 'molecule123.ct', 'molecule003.ct', 'molecule007.ct', 'molecule118.ct', 'molecule070.ct', 'molecule048.ct', 'molecule150.ct', 'molecule040.ct', 'molecule050.ct', 'molecule128.ct', 'molecule081.ct', 'molecule025.ct', 'molecule033.ct', 'molecule068.ct', 'molecule046.ct', 'molecule075.ct', 'molecule099.ct', 'molecule111.ct', 'molecule140.ct', 'molecule028.ct', 'molecule073.ct', 'molecule077.ct', 'molecule093.ct', 'molecule009.ct', 'molecule121.ct', 'molecule060.ct', 'molecule052.ct', 'molecule027.ct', 'molecule106.ct', 'molecule071.ct', 'molecule087.ct', 'molecule002.ct', 'molecule139.ct', 'molecule119.ct', 'molecule148.ct', 'molecule036.ct', 'molecule107.ct', 'molecule124.ct', 'molecule004.ct', 'molecule149.ct', 'molecule022.ct', 'molecule120.ct', 'molecule094.ct'])
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

LISTA VALIDATION FILE  
dict_keys(['molecule117.ct', 'molecule015.ct', 'molecule090.ct', 'molecule104.ct', 'molecule101.ct', 'molecule049.ct', 'molecule088.ct', 'molecule146.ct', 'molecule021.ct', 'molecule059.ct', 'molecule114.ct', 'molecule126.ct', 'molecule010.ct', 'molecule066.ct', 'molecule085.ct'])


Our model: 

RegressionGm(
  (fc1): Linear(in_features=12, out_features=4, bias=False)
  (fc2): Linear(in_features=4, out_features=1, bias=False)
  (LRelu): SELU()
  (fc1Root): Linear(in_features=12, out_features=4, bias=False)
  (fc2Root): Linear(in_features=4, out_features=1, bias=False)
  (LReluRoot): SELU()
)
Printing children
------------------------------[Linear(in_features=12, out_features=4, bias=False), Linear(in_features=4, out_features=1, bias=False), SELU(), Linear(in_features=12, out_features=4, bias=False), Linear(in_features=4, out_features=1, bias=False), SELU()]

Printing Modules
------------------------------[RegressionGm(
  (fc1): Linear(in_features=12, out_features=4, bias=False)
  (fc2): Linear(in_features=4, out_features=1, bias=False)
  (LRelu): SELU()
  (fc1Root): Linear(in_features=12, out_features=4, bias=False)
  (fc2Root): Linear(in_features=4, out_features=1, bias=False)
  (LReluRoot): SELU()
), Linear(in_features=12, out_features=4, bias=False), Linear(in_features=4, out_features=1, bias=False), SELU(), Linear(in_features=12, out_features=4, bias=False), Linear(in_features=4, out_features=1, bias=False), SELU()]
The state dict keys: 

odict_keys(['fc1.weight', 'fc2.weight', 'fc1Root.weight', 'fc2Root.weight'])Models state_dict:fc1.weight	torch.Size([4, 12])fc2.weight	torch.Size([1, 4])fc1Root.weight	torch.Size([4, 12])fc2Root.weight	torch.Size([1, 4])OrderedDict([('fc1.weight', tensor([[-3.8401e-01,  2.4200e-01,  5.9938e-06, -8.0271e-26,  9.2552e-05,
         -4.5532e-01,  3.2809e-07,  1.8500e-24,  3.6584e-06, -6.8669e-02,
         -2.4609e-01, -5.2880e-01],
        [-1.9279e-01,  6.0924e-01,  9.1350e-06, -6.4712e-22, -8.2914e-22,
         -1.4475e-01,  7.0265e-07,  1.3987e-09, -8.3081e-18, -1.6159e-03,
         -6.0371e-02, -3.9288e-01],
        [-2.1265e-01,  4.9992e-01,  6.1445e-25, -4.3520e-05, -3.5743e-25,
         -3.3840e-01,  6.3407e-07,  2.9168e-09,  2.1294e-07, -1.6314e-04,
         -4.3327e-01, -3.0769e-01],
        [-9.8623e-03,  5.2863e-01,  3.3956e-06, -4.2868e-05,  1.7384e-07,
         -4.5594e-01, -2.1092e-04, -2.9080e-06,  1.5336e-04, -1.2583e-02,
         -3.8380e-01, -3.4098e-01]])), ('fc2.weight', tensor([[0.7938, 0.5714, 0.5208, 0.8457]])), ('fc1Root.weight', tensor([[-4.1256e-01,  4.8563e-01,  1.7490e-05, -9.4269e-15, -5.7106e-08,
         -3.3673e-01,  8.9059e-26, -1.2436e-04,  8.0845e-23, -6.0613e-02,
         -2.4796e-01, -1.3426e-02],
        [-1.0704e-01,  5.9550e-01,  9.7086e-17, -1.6622e-25, -7.4570e-24,
         -1.3164e-01,  2.1266e-10, -5.1891e-08, -8.0712e-09, -3.9158e-01,
         -2.4129e-01, -2.8085e-01],
        [ 1.4637e-01,  6.1879e-01, -5.9397e-05,  2.2965e-18,  1.8286e-24,
          1.4117e-01, -2.2030e-04, -1.2870e-04, -1.7890e-24, -4.1468e-01,
         -2.8100e-01, -2.3434e-01],
        [-3.6181e-02,  4.9727e-01,  1.5038e-05, -1.5025e-22, -9.3682e-18,
         -2.5642e-01,  9.0252e-09, -4.8484e-25,  9.2159e-08,  1.4405e-02,
         -3.7500e-01, -1.2166e-01]])), ('fc2Root.weight', tensor([[-1.4847, -1.2807, -1.2090, -1.3269]]))])
---------------plt.close(fig)    # close the figure window-------------------------------------------------------------------------------------------

 Optimizer's state_dict:
CRITERION = MSELoss()
OPTIMIZER = Adam (
Parameter Group 0
    amsgrad: False
    betas: (0.9, 0.999)
    eps: 1e-08
    lr: 0.001
    weight_decay: 0
)
Tempo di training 2.2267096042633057


state	{140075157356128: {'step': 1000, 'exp_avg': tensor([[ 2.4179e-01, -1.0536e+00,  4.3029e-06, -9.0270e-28,  6.3151e-05,
          1.9908e-01,  2.5026e-07, -1.4679e-24,  2.6521e-06, -4.1372e-02,
          1.3793e-01, -1.1759e-01],
        [ 2.3030e-01,  2.4950e-03,  6.5044e-06,  9.8177e-23, -1.4457e-21,
          2.5909e-01,  5.2711e-07,  1.2300e-09, -2.8863e-17, -9.7835e-04,
          5.7208e-02,  1.8907e-02],
        [ 1.4762e-01,  1.0560e-02,  1.7353e-25, -3.0097e-05, -7.4894e-26,
          7.2170e-02,  4.7672e-07,  2.5087e-09,  1.6402e-07, -4.9371e-06,
         -1.8794e-01,  1.9962e-02],
        [ 4.6151e-01, -1.6121e-01,  2.4653e-06, -2.9654e-05,  1.3453e-07,
          1.9434e-01, -1.4188e-04, -2.1179e-06,  1.0373e-04, -7.5804e-03,
         -1.0907e-01,  1.4542e-01]]), 'exp_avg_sq': tensor([[2.4605e+02, 1.1898e+02, 1.1207e-03, 1.9984e-08, 1.8799e-03, 2.4537e+02,
         7.4336e-04, 1.8889e-05, 1.0365e-03, 2.5161e-02, 9.0504e+01, 5.5594e+01],
        [5.8535e+01, 1.7860e+01, 1.2018e-03, 8.4473e-05, 8.8386e-05, 5.8786e+01,
         8.1912e-04, 4.3384e-04, 1.7364e-04, 6.6254e-03, 1.4078e+01, 2.0312e+01],
        [5.2009e+00, 1.8421e+00, 2.3069e-06, 1.6034e-03, 7.8506e-07, 4.9690e+00,
         8.0816e-04, 4.6034e-04, 7.0554e-04, 9.2097e-05, 7.1770e-01, 2.3354e+00],
        [3.7620e+02, 6.5554e+01, 1.0247e-03, 1.5986e-03, 6.8892e-04, 3.7100e+02,
         2.2769e-03, 1.0008e-03, 2.1091e-03, 4.3265e-02, 7.2532e+01, 1.4495e+02]])}, 140075157356048: {'step': 1000, 'exp_avg': tensor([[-2.9748, -3.1235, -3.2372, -2.9792]]), 'exp_avg_sq': tensor([[1180.4705,  314.3155,  146.0304,  815.4954]])}, 140075157356208: {'step': 1000, 'exp_avg': tensor([[-2.7681e+00, -6.5657e+00,  2.6263e-06,  5.5631e-15, -9.7051e-09,
         -2.7584e+00, -3.1094e-26, -1.8015e-05,  4.8590e-24,  1.2098e-01,
          5.5598e-01, -2.3724e-02],
        [-4.3782e+00, -1.6629e+00,  2.7641e-17,  4.9909e-27, -4.5780e-25,
         -4.3813e+00,  4.2802e-11, -8.8399e-09, -1.4441e-09, -2.1779e-02,
          2.0826e-01, -2.4564e-01],
        [-3.2730e+00, -1.7433e+00, -8.7189e-06, -5.4774e-18,  1.0680e-25,
         -3.2737e+00, -3.1599e-05, -1.8634e-05,  1.3465e-25, -2.1141e-02,
          2.6408e-01, -3.9898e-01],
        [-3.9842e+00, -6.8875e+00,  2.2646e-06, -2.3626e-23, -2.0653e-18,
         -4.0123e+00,  1.6098e-09, -3.4782e-27,  1.5480e-08,  1.6779e-01,
          5.5424e-01, -1.4097e-01]]), 'exp_avg_sq': tensor([[4.3361e+02, 2.7380e+03, 6.0104e-05, 1.1464e-05, 2.7240e-05, 4.3376e+02,
         5.4468e-08, 8.9549e-05, 2.5919e-06, 9.3127e+01, 1.3666e+02, 1.1545e+02],
        [7.4558e+01, 2.9745e+02, 8.2251e-06, 7.0122e-09, 1.2823e-06, 7.4548e+01,
         1.6980e-05, 2.6967e-05, 2.2517e-05, 1.3384e+01, 2.5523e+01, 2.0110e+01],
        [4.2567e+01, 3.3069e+02, 7.6217e-05, 7.8061e-06, 4.6057e-07, 4.2565e+01,
         1.0255e-04, 9.0256e-05, 6.6175e-07, 7.0942e+00, 1.5370e+01, 1.1919e+01],
        [1.9310e+02, 2.3819e+03, 5.8495e-05, 2.8371e-06, 7.1050e-06, 1.9281e+02,
         2.2745e-05, 4.9271e-08, 2.8680e-05, 4.7552e+01, 5.5741e+01, 4.5470e+01]])}, 140075157354368: {'step': 1000, 'exp_avg': tensor([[429.2227, 430.8310, 432.6116, 430.4157]]), 'exp_avg_sq': tensor([[112484.6719, 116884.8672, 113864.3359, 108773.3047]])}}param_groups	[{'lr': 0.001, 'betas': (0.9, 0.999), 'eps': 1e-08, 'weight_decay': 0, 'amsgrad': False, 'params': [140075157356128, 140075157356048, 140075157356208, 140075157354368]}]

Average Error Test Dataset= 128.09011561075846
RMSE Train Dataset = [138.71810585004755, 137.34520405942465, 136.34996332966136, 135.53097979567255, 134.77558024824083, 134.05174782057114, 133.34704926197278, 132.65528194582, 131.97272001487656, 131.29689638373026]
RMSE Test Dataset = [140.09445753223073, 138.67738809463495, 137.6549553003814, 136.81003738076018, 136.02921475045352, 135.28053173174993, 134.55162084447366, 133.8363550081778, 133.13119117058932, 132.43387943375743]
Number of epochs 1000

pred =9.312516212463379
true = tensor([164.])
difference = tensor([154.6875])


pred =9.314841270446777
true = tensor([79.2000])
difference = tensor([69.8852])


pred =9.318092346191406
true = tensor([164.])
difference = tensor([154.6819])


pred =9.314935684204102
true = tensor([137.4600])
difference = tensor([128.1451])


pred =9.31756591796875
true = tensor([155.6800])
difference = tensor([146.3624])


pred =9.314990997314453
true = tensor([122.7000])
difference = tensor([113.3850])


pred =9.317852973937988
true = tensor([165.])
difference = tensor([155.6821])


pred =9.315799713134766
true = tensor([166.])
difference = tensor([156.6842])


pred =9.315145492553711
true = tensor([93.5000])
difference = tensor([84.1849])


pred =9.317024230957031
true = tensor([136.7300])
difference = tensor([127.4130])


pred =9.304652214050293
true = tensor([161.])
difference = tensor([151.6953])


pred =9.316705703735352
true = tensor([166.])
difference = tensor([156.6833])


pred =9.304203987121582
true = tensor([58.])
difference = tensor([48.6958])


pred =9.315845489501953
true = tensor([133.8000])
difference = tensor([124.4842])


pred =9.318077087402344
true = tensor([158.])
difference = tensor([148.6819])


