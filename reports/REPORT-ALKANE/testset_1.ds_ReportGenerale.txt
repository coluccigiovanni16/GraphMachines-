
+++++++++++++++++++++++++++++++++++REPORT+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

LISTA TEST FILE  
dict_keys(['molecule023.ct', 'molecule053.ct', 'molecule097.ct', 'molecule108.ct', 'molecule056.ct', 'molecule026.ct', 'molecule083.ct', 'molecule069.ct', 'molecule135.ct', 'molecule079.ct', 'molecule031.ct', 'molecule029.ct', 'molecule012.ct', 'molecule109.ct', 'molecule092.ct', 'molecule125.ct', 'molecule017.ct', 'molecule142.ct', 'molecule013.ct', 'molecule144.ct', 'molecule115.ct', 'molecule100.ct', 'molecule016.ct', 'molecule014.ct', 'molecule086.ct', 'molecule020.ct', 'molecule037.ct', 'molecule074.ct', 'molecule038.ct', 'molecule024.ct', 'molecule072.ct', 'molecule129.ct', 'molecule136.ct', 'molecule005.ct', 'molecule047.ct', 'molecule122.ct', 'molecule045.ct', 'molecule147.ct', 'molecule063.ct', 'molecule076.ct', 'molecule054.ct', 'molecule084.ct', 'molecule116.ct', 'molecule008.ct', 'molecule011.ct', 'molecule058.ct', 'molecule018.ct', 'molecule078.ct', 'molecule067.ct', 'molecule080.ct', 'molecule062.ct', 'molecule055.ct', 'molecule098.ct', 'molecule006.ct', 'molecule145.ct', 'molecule112.ct', 'molecule095.ct', 'molecule064.ct', 'molecule134.ct', 'molecule030.ct', 'molecule091.ct', 'molecule127.ct', 'molecule051.ct', 'molecule138.ct', 'molecule041.ct', 'molecule096.ct', 'molecule061.ct', 'molecule043.ct', 'molecule105.ct', 'molecule035.ct', 'molecule019.ct', 'molecule034.ct', 'molecule001.ct', 'molecule082.ct', 'molecule057.ct', 'molecule039.ct', 'molecule131.ct', 'molecule102.ct', 'molecule137.ct', 'molecule089.ct', 'molecule044.ct', 'molecule133.ct', 'molecule130.ct', 'molecule110.ct', 'molecule113.ct', 'molecule141.ct', 'molecule103.ct', 'molecule143.ct', 'molecule032.ct', 'molecule042.ct', 'molecule132.ct', 'molecule065.ct', 'molecule123.ct', 'molecule003.ct', 'molecule007.ct', 'molecule118.ct', 'molecule070.ct', 'molecule048.ct', 'molecule150.ct', 'molecule040.ct', 'molecule050.ct', 'molecule128.ct', 'molecule081.ct', 'molecule025.ct', 'molecule033.ct', 'molecule068.ct', 'molecule046.ct', 'molecule075.ct', 'molecule099.ct', 'molecule111.ct', 'molecule140.ct', 'molecule028.ct', 'molecule073.ct', 'molecule077.ct', 'molecule093.ct', 'molecule009.ct', 'molecule121.ct', 'molecule060.ct', 'molecule052.ct', 'molecule027.ct', 'molecule106.ct', 'molecule071.ct', 'molecule087.ct', 'molecule002.ct', 'molecule139.ct', 'molecule119.ct', 'molecule148.ct', 'molecule036.ct', 'molecule107.ct', 'molecule124.ct', 'molecule004.ct', 'molecule149.ct', 'molecule022.ct', 'molecule120.ct', 'molecule094.ct'])


LISTA VALIDATION FILE  
dict_keys(['molecule117.ct', 'molecule015.ct', 'molecule090.ct', 'molecule104.ct', 'molecule101.ct', 'molecule049.ct', 'molecule088.ct', 'molecule146.ct', 'molecule021.ct', 'molecule059.ct', 'molecule114.ct', 'molecule126.ct', 'molecule010.ct', 'molecule066.ct', 'molecule085.ct'])
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Our model: 

RegressionGm(
  (fc1): Linear(in_features=12, out_features=4, bias=False)
  (fc2): Linear(in_features=4, out_features=1, bias=False)
  (LRelu): SELU()
  (fc1Root): Linear(in_features=12, out_features=4, bias=False)
  (fc2Root): Linear(in_features=4, out_features=1, bias=False)
  (LReluRoot): SELU()
)
Printing children
------------------------------[Linear(in_features=12, out_features=4, bias=False), Linear(in_features=4, out_features=1, bias=False), SELU(), Linear(in_features=12, out_features=4, bias=False), Linear(in_features=4, out_features=1, bias=False), SELU()]

Printing Modules
------------------------------[RegressionGm(
  (fc1): Linear(in_features=12, out_features=4, bias=False)
  (fc2): Linear(in_features=4, out_features=1, bias=False)
  (LRelu): SELU()
  (fc1Root): Linear(in_features=12, out_features=4, bias=False)
  (fc2Root): Linear(in_features=4, out_features=1, bias=False)
  (LReluRoot): SELU()
), Linear(in_features=12, out_features=4, bias=False), Linear(in_features=4, out_features=1, bias=False), SELU(), Linear(in_features=12, out_features=4, bias=False), Linear(in_features=4, out_features=1, bias=False), SELU()]
The state dict keys: 

odict_keys(['fc1.weight', 'fc2.weight', 'fc1Root.weight', 'fc2Root.weight'])Models state_dict:fc1.weight	torch.Size([4, 12])fc2.weight	torch.Size([1, 4])fc1Root.weight	torch.Size([4, 12])fc2Root.weight	torch.Size([1, 4])OrderedDict([('fc1.weight', tensor([[ 7.5412e-01,  6.8278e-01,  6.6448e-01,  9.4412e-01, -4.5643e-11,
          8.1407e-01, -8.7161e-43, -1.2163e-42,  1.2752e-43,  2.1840e-01,
          2.3174e-01,  5.2276e-02],
        [-2.0484e-01, -3.3602e-01, -1.6043e-01, -4.8074e-02,  5.1147e-43,
         -1.9132e-01,  9.9634e-08,  1.2110e-06,  1.2331e-42, -1.1361e-02,
         -1.1107e-01, -8.5347e-02],
        [-2.3538e-01, -6.7522e-01,  2.1105e-01, -5.8706e-02, -1.4069e-42,
         -2.3570e-01,  4.7084e-43,  5.0447e-44,  6.6982e-43, -1.3930e-02,
         -1.5412e-01, -1.8241e-01],
        [-1.7594e-01,  2.1858e-01, -1.6852e-01, -2.0057e-01, -8.7054e-16,
         -1.3285e-01, -1.4574e-43,  3.1787e-09,  4.7644e-44, -4.9503e-02,
          1.6690e-02,  1.1470e-01]])), ('fc2.weight', tensor([[ 1.5612, -0.6185, -0.7558, -0.5746]])), ('fc1Root.weight', tensor([[ 3.9656e+00, -5.5606e-02, -8.0433e-03, -1.1395e-01, -7.9296e-01,
          4.1495e+00,  5.1512e-42, -4.0441e-42, -1.0328e-42,  7.7034e-01,
         -7.6250e-01,  5.2832e-01],
        [ 5.6491e+00, -1.5840e+00, -3.0077e-01, -1.7809e-01, -1.5065e-01,
          5.5501e+00, -1.5036e-42, -1.1650e-41,  4.9101e-42,  3.6992e-01,
         -1.3167e+00,  7.8106e-01],
        [-1.4453e+00,  1.7430e+00,  1.8035e+00,  1.5572e+00,  1.3376e+00,
         -1.2898e+00, -1.1953e-42, -2.2127e-42,  2.5125e-42, -1.2479e+00,
          2.0791e-01, -5.5172e-01],
        [ 4.8637e+00, -1.3537e+00, -1.7939e-01, -7.7088e-01, -4.3303e-02,
          5.0036e+00,  1.4770e-42, -2.8811e-42, -1.4574e-42, -7.1096e-01,
          7.3361e-02,  2.7488e-02]])), ('fc2Root.weight', tensor([[-3.7413, -6.1065,  2.2114, -5.3758]]))])
---------------plt.close(fig)    # close the figure window-------------------------------------------------------------------------------------------

 Optimizer's state_dict:
CRITERION = MSELoss()
OPTIMIZER = Adam (
Parameter Group 0
    amsgrad: False
    betas: (0.9, 0.999)
    eps: 1e-08
    lr: 0.001
    weight_decay: 0
)
Tempo di training 52.65399146080017


state	{140017351308784: {'step': 20000, 'exp_avg': tensor([[-2.1648e-01, -9.2511e-01, -1.3665e-01, -4.6407e-03,  1.0054e-12,
         -1.8729e-01, -4.1338e-43, -5.8154e-43,  4.9045e-44, -1.0525e-03,
         -9.3140e-02, -1.4182e-01],
        [ 7.7436e-02,  1.1540e-02,  4.0746e-03,  2.8750e-04,  2.4523e-43,
          8.4033e-02, -3.5261e-09, -4.2720e-08,  5.9555e-43,  6.7602e-05,
          6.7794e-03,  6.1774e-02],
        [ 8.6296e-02,  1.9441e-02,  3.3314e-02,  3.3326e-04, -6.7963e-43,
          8.6140e-02,  2.1720e-43,  2.1019e-44,  3.1529e-43,  7.9347e-05,
          5.0526e-03,  8.2750e-02],
        [ 1.0356e-01,  2.9139e-01,  4.0640e-02,  9.9155e-04,  2.0252e-17,
          1.2456e-01, -6.3058e-44, -1.1639e-12,  2.1019e-44,  2.6896e-04,
          3.5693e-02,  1.0698e-01]]), 'exp_avg_sq': tensor([[2.8378e+01, 3.2058e+02, 1.0974e+01, 1.1520e-02, 1.5543e-10, 2.8385e+01,
         4.5986e-12, 1.2673e-11, 8.9383e-13, 5.4917e-04, 3.7663e+00, 1.4193e+01],
        [2.4612e+00, 1.7173e-01, 5.4088e-03, 2.6381e-05, 1.2433e-12, 2.4611e+00,
         2.3794e-10, 2.2850e-10, 4.9106e-12, 1.3574e-06, 8.9342e-03, 2.2119e+00],
        [2.4385e+00, 1.3862e-01, 7.5899e-01, 4.1315e-05, 6.5135e-12, 2.4385e+00,
         1.1041e-11, 3.5133e-12, 3.6506e-15, 2.1363e-06, 8.1181e-03, 2.3633e+00],
        [5.9824e+00, 4.4407e+01, 6.2288e-01, 4.5001e-04, 1.6485e-10, 5.9816e+00,
         3.7044e-17, 2.0009e-10, 6.6412e-13, 2.5527e-05, 4.9498e-01, 3.4611e+00]])}, 140017351307664: {'step': 20000, 'exp_avg': tensor([[-0.8537,  0.0182,  0.1334, -0.0685]]), 'exp_avg_sq': tensor([[234.7787,  11.4060,  13.6388,   1.1628]])}, 140017351311264: {'step': 20000, 'exp_avg': tensor([[ 1.8514e-02,  8.2809e-02,  1.4201e-01,  2.0766e-01,  5.5846e-02,
          2.1331e-02,  7.7071e-44, -6.1657e-44, -1.9618e-44,  4.6564e-03,
          9.0779e-03,  3.8274e-04],
        [ 3.0431e-02,  8.0815e-02,  6.4635e-02,  1.0450e-01,  1.9123e-01,
          2.8914e-02, -3.3631e-44, -1.7516e-43,  7.5670e-44,  1.8530e-02,
          2.0048e-03,  3.8044e-03],
        [-6.6104e-03, -6.7074e-02, -1.2990e-01, -1.9689e-01, -1.3320e-01,
         -4.2274e-03, -1.9618e-44, -3.3631e-44,  4.7644e-44,  2.5394e-03,
         -9.0853e-03, -3.8949e-03],
        [ 1.2567e-02,  2.3199e-02,  4.5628e-02,  1.6439e-02,  8.7549e-02,
          1.4713e-02,  3.3631e-44, -4.7644e-44, -3.3631e-44,  7.4405e-03,
          1.0948e-03,  3.9828e-04]]), 'exp_avg_sq': tensor([[4.0981e-02, 1.3911e+00, 5.7223e+00, 1.5196e+01, 1.7918e-01, 4.1026e-02,
         6.9584e-14, 2.1768e-15, 5.2264e-15, 1.9764e-03, 2.7344e-02, 2.1285e-02],
        [4.6513e-02, 7.5146e-01, 1.1601e+00, 4.2142e+00, 1.2975e+01, 4.6448e-02,
         1.3005e-13, 3.7135e-13, 1.2044e-13, 2.5919e-02, 2.7528e-03, 2.1383e-03],
        [3.0378e-02, 6.9677e-01, 2.5521e+00, 7.2597e+00, 3.1072e+00, 3.0400e-02,
         3.9890e-14, 1.6508e-16, 7.5154e-14, 6.1081e-03, 9.3057e-03, 7.2100e-03],
        [7.6729e-03, 1.2141e-01, 4.8389e-01, 7.4565e-02, 2.5325e+00, 7.7236e-03,
         8.0860e-14, 7.9206e-15, 4.5979e-16, 4.1503e-03, 4.3706e-04, 1.2395e-05]])}, 140017351308064: {'step': 20000, 'exp_avg': tensor([[-0.0035,  0.0151, -0.4537,  0.0128]]), 'exp_avg_sq': tensor([[3.1163e-02, 8.6617e-03, 2.1829e+01, 1.3550e-02]])}}param_groups	[{'lr': 0.001, 'betas': (0.9, 0.999), 'eps': 1e-08, 'weight_decay': 0, 'amsgrad': False, 'params': [140017351308784, 140017351307664, 140017351311264, 140017351308064]}]

Average Error Test Dataset= 4.281252034505209
RMSE Train Dataset = [20.868403506080146, 16.615060689001975, 12.693416324739532, 7.3030720765559405, 4.668236377657578, 4.566889702206965, 4.516473710183673, 4.485034641570117, 4.466052328155946, 4.4541228665421775]
RMSE Test Dataset = [11.803196386838993, 8.67059657665591, 6.164927916217529, 5.763142369145587, 5.681595640506001, 5.713467518949232, 5.697889961398608, 5.683143372404799, 5.708269699001876, 5.7214175813888115]
Number of epochs 20000

pred =163.90567016601562
true = tensor([164.])
difference = tensor([0.0943])


pred =83.13139343261719
true = tensor([79.2000])
difference = tensor([3.9314])


pred =161.83139038085938
true = tensor([164.])
difference = tensor([2.1686])


pred =153.20037841796875
true = tensor([137.4600])
difference = tensor([15.7404])


pred =158.2196044921875
true = tensor([155.6800])
difference = tensor([2.5396])


pred =131.92202758789062
true = tensor([122.7000])
difference = tensor([9.2220])


pred =158.79315185546875
true = tensor([165.])
difference = tensor([6.2068])


pred =162.4124755859375
true = tensor([166.])
difference = tensor([3.5875])


pred =97.05293273925781
true = tensor([93.5000])
difference = tensor([3.5529])


pred =135.97132873535156
true = tensor([136.7300])
difference = tensor([0.7587])


pred =157.48353576660156
true = tensor([161.])
difference = tensor([3.5165])


pred =160.66575622558594
true = tensor([166.])
difference = tensor([5.3342])


pred =55.10456848144531
true = tensor([58.])
difference = tensor([2.8954])


pred =137.99171447753906
true = tensor([133.8000])
difference = tensor([4.1917])


pred =158.47860717773438
true = tensor([158.])
difference = tensor([0.4786])


