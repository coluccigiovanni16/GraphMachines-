
+++++++++++++++++++++++++++++++++++REPORT+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

LISTA TEST FILE  
dict_keys(['molecule125.ct', 'molecule017.ct', 'molecule142.ct', 'molecule013.ct', 'molecule144.ct', 'molecule115.ct', 'molecule100.ct', 'molecule016.ct', 'molecule014.ct', 'molecule086.ct', 'molecule020.ct', 'molecule037.ct', 'molecule074.ct', 'molecule038.ct', 'molecule024.ct', 'molecule072.ct', 'molecule129.ct', 'molecule136.ct', 'molecule005.ct', 'molecule047.ct', 'molecule122.ct', 'molecule045.ct', 'molecule147.ct', 'molecule063.ct', 'molecule076.ct', 'molecule054.ct', 'molecule084.ct', 'molecule116.ct', 'molecule008.ct', 'molecule011.ct', 'molecule058.ct', 'molecule018.ct', 'molecule078.ct', 'molecule067.ct', 'molecule080.ct', 'molecule062.ct', 'molecule055.ct', 'molecule098.ct', 'molecule006.ct', 'molecule145.ct', 'molecule112.ct', 'molecule095.ct', 'molecule064.ct', 'molecule134.ct', 'molecule030.ct', 'molecule091.ct', 'molecule127.ct', 'molecule051.ct', 'molecule138.ct', 'molecule041.ct', 'molecule096.ct', 'molecule061.ct', 'molecule043.ct', 'molecule105.ct', 'molecule035.ct', 'molecule019.ct', 'molecule034.ct', 'molecule001.ct', 'molecule082.ct', 'molecule057.ct', 'molecule039.ct', 'molecule131.ct', 'molecule102.ct', 'molecule137.ct', 'molecule089.ct', 'molecule044.ct', 'molecule133.ct', 'molecule130.ct', 'molecule110.ct', 'molecule113.ct', 'molecule141.ct', 'molecule103.ct', 'molecule143.ct', 'molecule032.ct', 'molecule042.ct', 'molecule132.ct', 'molecule065.ct', 'molecule123.ct', 'molecule003.ct', 'molecule007.ct', 'molecule118.ct', 'molecule070.ct', 'molecule048.ct', 'molecule150.ct', 'molecule040.ct', 'molecule050.ct', 'molecule128.ct', 'molecule081.ct', 'molecule025.ct', 'molecule033.ct', 'molecule068.ct', 'molecule046.ct', 'molecule075.ct', 'molecule099.ct', 'molecule111.ct', 'molecule140.ct', 'molecule028.ct', 'molecule073.ct', 'molecule077.ct', 'molecule093.ct', 'molecule009.ct', 'molecule121.ct', 'molecule060.ct', 'molecule052.ct', 'molecule027.ct', 'molecule106.ct', 'molecule071.ct', 'molecule087.ct', 'molecule002.ct', 'molecule139.ct', 'molecule119.ct', 'molecule148.ct', 'molecule036.ct', 'molecule107.ct', 'molecule124.ct', 'molecule004.ct', 'molecule149.ct', 'molecule022.ct', 'molecule120.ct', 'molecule094.ct', 'molecule117.ct', 'molecule015.ct', 'molecule090.ct', 'molecule104.ct', 'molecule101.ct', 'molecule049.ct', 'molecule088.ct', 'molecule146.ct', 'molecule021.ct', 'molecule059.ct', 'molecule114.ct', 'molecule126.ct', 'molecule010.ct', 'molecule066.ct', 'molecule085.ct'])


LISTA VALIDATION FILE  
dict_keys(['molecule023.ct', 'molecule053.ct', 'molecule097.ct', 'molecule108.ct', 'molecule056.ct', 'molecule026.ct', 'molecule083.ct', 'molecule069.ct', 'molecule135.ct', 'molecule079.ct', 'molecule031.ct', 'molecule029.ct', 'molecule012.ct', 'molecule109.ct', 'molecule092.ct'])
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Our model: 

RegressionGm(
  (fc1): Linear(in_features=12, out_features=4, bias=False)
  (fc2): Linear(in_features=4, out_features=1, bias=False)
  (LRelu): SELU()
  (fc1Root): Linear(in_features=12, out_features=4, bias=False)
  (fc2Root): Linear(in_features=4, out_features=1, bias=False)
  (LReluRoot): SELU()
)
Printing children
------------------------------[Linear(in_features=12, out_features=4, bias=False), Linear(in_features=4, out_features=1, bias=False), SELU(), Linear(in_features=12, out_features=4, bias=False), Linear(in_features=4, out_features=1, bias=False), SELU()]

Printing Modules
------------------------------[RegressionGm(
  (fc1): Linear(in_features=12, out_features=4, bias=False)
  (fc2): Linear(in_features=4, out_features=1, bias=False)
  (LRelu): SELU()
  (fc1Root): Linear(in_features=12, out_features=4, bias=False)
  (fc2Root): Linear(in_features=4, out_features=1, bias=False)
  (LReluRoot): SELU()
), Linear(in_features=12, out_features=4, bias=False), Linear(in_features=4, out_features=1, bias=False), SELU(), Linear(in_features=12, out_features=4, bias=False), Linear(in_features=4, out_features=1, bias=False), SELU()]
The state dict keys: 

odict_keys(['fc1.weight', 'fc2.weight', 'fc1Root.weight', 'fc2Root.weight'])Models state_dict:fc1.weight	torch.Size([4, 12])fc2.weight	torch.Size([1, 4])fc1Root.weight	torch.Size([4, 12])fc2Root.weight	torch.Size([1, 4])OrderedDict([('fc1.weight', tensor([[-7.9885e-01, -6.6252e-01, -6.5412e-07, -5.8038e-03, -5.1795e-03,
         -8.9339e-01,  5.9109e-11, -6.0601e-18,  1.5941e-26, -1.4765e-02,
         -3.5627e-01, -8.9904e-01],
        [ 8.1135e-01,  5.6770e-01,  3.4607e-03,  3.9229e-03, -4.6459e-26,
          9.9126e-01,  2.2195e-04,  3.9355e-03, -1.3842e-17,  1.0371e+00,
          7.8239e-01,  1.0070e+00],
        [ 1.2388e+00,  5.2523e-01,  2.0871e-04, -6.2357e-20,  2.3244e-04,
          1.1658e+00, -1.8379e-03,  1.2181e-24,  8.5465e-07,  1.1214e+00,
          8.9585e-01,  9.5526e-01],
        [-1.0604e+00, -5.1232e-01,  8.0267e-25,  3.4728e-24,  1.7573e-05,
         -1.0479e+00, -1.7439e-03,  2.5035e-16,  8.2790e-24, -1.3433e-05,
         -1.8297e-01, -6.8016e-01]])), ('fc2.weight', tensor([[-1.2509,  0.7074,  1.2838, -1.1347]])), ('fc1Root.weight', tensor([[-4.9766e-01, -6.0952e-01, -6.4884e-12,  1.0085e-24, -5.5635e-17,
         -2.2851e-01,  4.5394e-25, -2.2174e-07, -3.7300e-04, -1.6295e-01,
         -3.7171e-02, -3.5484e-01],
        [-4.4457e-01, -1.9034e-01,  1.6329e-03, -6.5139e-23,  4.4220e-08,
         -1.4885e-01,  1.5974e-03,  1.8631e-24,  3.3084e-08, -1.0778e-01,
         -2.8958e-01, -5.0174e-01],
        [-4.4860e-01, -5.5924e-01, -3.8411e-25, -5.4969e-11, -1.3257e-24,
         -1.4367e-01,  1.9887e-23, -1.9579e-03,  1.2807e-04, -1.4811e-01,
         -1.4618e-01,  8.8084e-03],
        [ 5.7082e-01,  1.0018e+00,  3.3873e-08,  4.9484e-16, -5.5938e-04,
          4.5770e-01,  4.4930e-16, -1.0133e-03,  6.0164e-25,  7.0102e-01,
          8.1742e-01,  9.0732e-01]])), ('fc2Root.weight', tensor([[-0.6489, -1.1218, -0.8958,  1.2327]]))])
---------------plt.close(fig)    # close the figure window-------------------------------------------------------------------------------------------

 Optimizer's state_dict:
CRITERION = MSELoss()
OPTIMIZER = Adam (
Parameter Group 0
    amsgrad: False
    betas: (0.9, 0.999)
    eps: 1e-08
    lr: 0.001
    weight_decay: 0
)
Tempo di training 2.286308526992798


state	{140571192446640: {'step': 1000, 'exp_avg': tensor([[ 2.4520e+00, -9.0747e-02, -1.8007e-07, -1.4751e-03, -1.3176e-03,
          2.4287e+00,  1.7603e-11, -2.4435e-18, -6.3953e-28, -3.7398e-03,
         -8.0741e-02,  2.4205e+00],
        [-2.9680e+01,  1.7016e+02,  8.8327e-04,  1.0002e-03,  2.7194e-26,
         -2.9636e+01,  5.8000e-05,  1.0034e-03, -5.5106e-18, -7.2177e-01,
         -1.6801e+01, -1.4008e+01],
        [-5.3908e+01,  3.0862e+02,  5.4569e-05, -3.5518e-20,  6.0718e-05,
         -5.3925e+01, -4.7159e-04,  3.1380e-25,  2.3472e-07, -1.4958e+00,
         -3.0611e+01, -2.5630e+01],
        [ 1.7301e+00,  1.2376e-01, -6.7265e-25,  2.6826e-24,  4.6972e-06,
          1.7331e+00, -4.4766e-04,  9.3247e-17,  2.8497e-24, -3.9700e-06,
         -2.1249e-02,  1.7998e+00]]), 'exp_avg_sq': tensor([[1.7906e+03, 4.2457e+01, 4.0201e-04, 3.6698e-03, 3.4855e-03, 1.7890e+03,
         1.7443e-04, 5.9672e-05, 9.5014e-10, 4.4934e-03, 1.3398e+01, 1.7022e+03],
        [3.0447e+04, 1.1403e+06, 2.9304e-03, 3.0883e-03, 1.5377e-07, 3.0437e+04,
         1.1880e-03, 3.0925e-03, 6.0792e-05, 2.7299e+00, 4.1772e+03, 1.7069e+04],
        [1.0174e+05, 3.7378e+06, 1.1690e-03, 4.7604e-05, 1.2025e-03, 1.0175e+05,
         2.2895e-03, 5.1920e-06, 4.1660e-04, 9.3635e+00, 1.4719e+04, 5.5660e+04],
        [9.6392e+02, 9.9068e+01, 1.5488e-05, 2.7593e-05, 6.7573e-04, 9.6408e+02,
         2.2459e-03, 6.8523e-05, 3.5373e-05, 1.8522e-04, 1.2299e+01, 8.8465e+02]])}, 140571192446000: {'step': 1000, 'exp_avg': tensor([[ 67.9843,  20.6354, -16.5364,  68.3992]]), 'exp_avg_sq': tensor([[ 161777.5469, 1721715.1250, 1897399.1250,  167397.0938]])}, 140571192444400: {'step': 1000, 'exp_avg': tensor([[-1.4096e+00, -6.2683e-02, -9.0518e-13,  3.4591e-26, -1.1272e-17,
         -1.3867e+00, -8.9665e-27, -2.3522e-08, -3.4868e-05, -1.3858e-02,
         -3.1627e-03, -3.1206e-02],
        [-2.9035e+00, -1.9731e+00,  1.4943e-04, -3.0966e-24,  4.8455e-09,
         -2.8783e+00,  1.4623e-04,  3.8818e-26,  3.6474e-09, -9.4283e-03,
         -4.3774e-02, -1.8789e-01],
        [-2.2016e+00, -8.9452e-02, -2.6515e-26, -7.1242e-12,  5.8611e-26,
         -2.1757e+00, -2.3432e-24, -1.7872e-04,  1.2167e-05, -1.2594e-02,
         -1.2436e-02, -3.2228e-03],
        [ 5.7476e+00, -4.3051e+02,  3.7325e-09, -6.9344e-17, -5.1981e-05,
          5.7380e+00,  4.9137e-17, -9.3359e-05,  1.2257e-26, -5.0249e+00,
          5.5472e+00,  3.1869e+00]]), 'exp_avg_sq': tensor([[5.3918e+01, 3.2118e+01, 7.0505e-06, 1.5390e-07, 4.3345e-06, 5.4079e+01,
         4.2581e-08, 1.6930e-05, 6.5110e-05, 1.0953e+01, 1.7222e+01, 1.4139e+01],
        [2.4863e+03, 9.9626e+03, 1.0205e-04, 2.5047e-06, 1.4069e-05, 2.4879e+03,
         1.0129e-04, 3.6374e-07, 1.3643e-05, 7.8166e+02, 5.4051e+02, 4.4437e+02],
        [7.1389e+02, 2.8198e+02, 5.1983e-08, 8.0156e-06, 3.7178e-07, 7.1468e+02,
         2.3596e-06, 1.0867e-04, 4.9677e-05, 1.1572e+02, 2.6926e+02, 2.3520e+02],
        [3.0221e+03, 6.9380e+06, 1.3677e-05, 4.9982e-06, 7.2936e-05, 3.0229e+03,
         4.7011e-06, 8.7257e-05, 5.7350e-08, 7.4475e+02, 9.1046e+02, 8.2140e+02]])}, 140571192643408: {'step': 1000, 'exp_avg': tensor([[  -5.7031,   -5.3025,   -5.4193, -341.9077]]), 'exp_avg_sq': tensor([[  26171.7578,   19275.4082,   24204.4473, 4254901.0000]])}}param_groups	[{'lr': 0.001, 'betas': (0.9, 0.999), 'eps': 1e-08, 'weight_decay': 0, 'amsgrad': False, 'params': [140571192446640, 140571192446000, 140571192444400, 140571192643408]}]

Average Error Test Dataset= 11.987727610270182
RMSE Train Dataset = [139.72412131813533, 138.70579250701826, 135.80011736003766, 118.67087413172408, 52.73115036437191, 37.68305095267052, 29.956189527635605, 26.38090152614257, 24.810765741501964, 24.127422309982034]
RMSE Test Dataset = [138.95136008240436, 137.91142991064953, 134.76631974458604, 117.05674788991236, 49.86976202131408, 33.61255650911018, 24.205574793303686, 18.8502236755214, 15.879012434300563, 14.250320698659678]
Number of epochs 1000

pred =108.57612609863281
true = tensor([106.5000])
difference = tensor([2.0761])


pred =136.7433319091797
true = tensor([132.7000])
difference = tensor([4.0433])


pred =145.6915283203125
true = tensor([153.3000])
difference = tensor([7.6085])


pred =162.0414581298828
true = tensor([155.])
difference = tensor([7.0415])


pred =125.54896545410156
true = tensor([140.6000])
difference = tensor([15.0510])


pred =115.01025390625
true = tensor([99.2000])
difference = tensor([15.8103])


pred =148.58438110351562
true = tensor([162.2000])
difference = tensor([13.6156])


pred =150.53445434570312
true = tensor([135.2000])
difference = tensor([15.3345])


pred =151.17259216308594
true = tensor([160.])
difference = tensor([8.8274])


pred =141.57864379882812
true = tensor([170.5000])
difference = tensor([28.9214])


pred =115.80979919433594
true = tensor([115.6000])
difference = tensor([0.2098])


pred =108.03593444824219
true = tensor([118.2000])
difference = tensor([10.1641])


pred =80.21212768554688
true = tensor([63.3000])
difference = tensor([16.9121])


pred =152.234375
true = tensor([161.2000])
difference = tensor([8.9656])


pred =144.20523071289062
true = tensor([169.4400])
difference = tensor([25.2348])


