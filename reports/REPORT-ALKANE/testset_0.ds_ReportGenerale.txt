
+++++++++++++++++++++++++++++++++++REPORT+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

LISTA TEST FILE  
dict_keys(['molecule125.ct', 'molecule017.ct', 'molecule142.ct', 'molecule013.ct', 'molecule144.ct', 'molecule115.ct', 'molecule100.ct', 'molecule016.ct', 'molecule014.ct', 'molecule086.ct', 'molecule020.ct', 'molecule037.ct', 'molecule074.ct', 'molecule038.ct', 'molecule024.ct', 'molecule072.ct', 'molecule129.ct', 'molecule136.ct', 'molecule005.ct', 'molecule047.ct', 'molecule122.ct', 'molecule045.ct', 'molecule147.ct', 'molecule063.ct', 'molecule076.ct', 'molecule054.ct', 'molecule084.ct', 'molecule116.ct', 'molecule008.ct', 'molecule011.ct', 'molecule058.ct', 'molecule018.ct', 'molecule078.ct', 'molecule067.ct', 'molecule080.ct', 'molecule062.ct', 'molecule055.ct', 'molecule098.ct', 'molecule006.ct', 'molecule145.ct', 'molecule112.ct', 'molecule095.ct', 'molecule064.ct', 'molecule134.ct', 'molecule030.ct', 'molecule091.ct', 'molecule127.ct', 'molecule051.ct', 'molecule138.ct', 'molecule041.ct', 'molecule096.ct', 'molecule061.ct', 'molecule043.ct', 'molecule105.ct', 'molecule035.ct', 'molecule019.ct', 'molecule034.ct', 'molecule001.ct', 'molecule082.ct', 'molecule057.ct', 'molecule039.ct', 'molecule131.ct', 'molecule102.ct', 'molecule137.ct', 'molecule089.ct', 'molecule044.ct', 'molecule133.ct', 'molecule130.ct', 'molecule110.ct', 'molecule113.ct', 'molecule141.ct', 'molecule103.ct', 'molecule143.ct', 'molecule032.ct', 'molecule042.ct', 'molecule132.ct', 'molecule065.ct', 'molecule123.ct', 'molecule003.ct', 'molecule007.ct', 'molecule118.ct', 'molecule070.ct', 'molecule048.ct', 'molecule150.ct', 'molecule040.ct', 'molecule050.ct', 'molecule128.ct', 'molecule081.ct', 'molecule025.ct', 'molecule033.ct', 'molecule068.ct', 'molecule046.ct', 'molecule075.ct', 'molecule099.ct', 'molecule111.ct', 'molecule140.ct', 'molecule028.ct', 'molecule073.ct', 'molecule077.ct', 'molecule093.ct', 'molecule009.ct', 'molecule121.ct', 'molecule060.ct', 'molecule052.ct', 'molecule027.ct', 'molecule106.ct', 'molecule071.ct', 'molecule087.ct', 'molecule002.ct', 'molecule139.ct', 'molecule119.ct', 'molecule148.ct', 'molecule036.ct', 'molecule107.ct', 'molecule124.ct', 'molecule004.ct', 'molecule149.ct', 'molecule022.ct', 'molecule120.ct', 'molecule094.ct', 'molecule117.ct', 'molecule015.ct', 'molecule090.ct', 'molecule104.ct', 'molecule101.ct', 'molecule049.ct', 'molecule088.ct', 'molecule146.ct', 'molecule021.ct', 'molecule059.ct', 'molecule114.ct', 'molecule126.ct', 'molecule010.ct', 'molecule066.ct', 'molecule085.ct'])


LISTA VALIDATION FILE  
dict_keys(['molecule023.ct', 'molecule053.ct', 'molecule097.ct', 'molecule108.ct', 'molecule056.ct', 'molecule026.ct', 'molecule083.ct', 'molecule069.ct', 'molecule135.ct', 'molecule079.ct', 'molecule031.ct', 'molecule029.ct', 'molecule012.ct', 'molecule109.ct', 'molecule092.ct'])


Our model: 

RegressionGm(
  (fc1): Linear(in_features=12, out_features=4, bias=False)
  (fc2): Linear(in_features=4, out_features=1, bias=False)
  (LRelu): SELU()
  (fc1Root): Linear(in_features=12, out_features=4, bias=False)
  (fc2Root): Linear(in_features=4, out_features=1, bias=False)
  (LReluRoot): SELU()
)
Printing children
------------------------------[Linear(in_features=12, out_features=4, bias=False), Linear(in_features=4, out_features=1, bias=False), SELU(), Linear(in_features=12, out_features=4, bias=False), Linear(in_features=4, out_features=1, bias=False), SELU()]

Printing Modules
------------------------------[RegressionGm(
  (fc1): Linear(in_features=12, out_features=4, bias=False)
  (fc2): Linear(in_features=4, out_features=1, bias=False)
  (LRelu): SELU()
  (fc1Root): Linear(in_features=12, out_features=4, bias=False)
  (fc2Root): Linear(in_features=4, out_features=1, bias=False)
  (LReluRoot): SELU()
), Linear(in_features=12, out_features=4, bias=False), Linear(in_features=4, out_features=1, bias=False), SELU(), Linear(in_features=12, out_features=4, bias=False), Linear(in_features=4, out_features=1, bias=False), SELU()]
The state dict keys: 

odict_keys(['fc1.weight', 'fc2.weight', 'fc1Root.weight', 'fc2Root.weight'])Models state_dict:fc1.weight	torch.Size([4, 12])fc2.weight	torch.Size([1, 4])fc1Root.weight	torch.Size([4, 12])fc2Root.weight	torch.Size([1, 4])OrderedDict([('fc1.weight', tensor([[-4.6415e-01,  3.7936e-01, -4.4492e-03,  1.1051e-03,  5.1556e-25,
         -6.0753e-01, -3.1669e-04,  9.2411e-03, -5.5329e-08, -3.2279e-01,
         -3.3221e-01, -7.1831e-01],
        [ 8.4880e-01, -7.0178e-01,  1.5614e-24,  9.5515e-05, -3.8154e-23,
          9.9753e-01,  1.6570e-18, -1.6522e-24, -2.3435e-04,  1.0533e+00,
          1.0566e+00,  1.1000e+00],
        [ 9.8224e-01, -6.1170e-01,  2.3731e-24, -7.7210e-16, -1.1613e-03,
          6.4886e-01, -1.0750e-24,  4.1510e-03,  3.0107e-25,  8.7414e-01,
          7.3707e-01,  7.1924e-01],
        [-7.4972e-01,  6.4815e-01,  9.7655e-06,  1.6156e-03,  5.1534e-10,
         -4.7538e-01,  1.0615e-05,  1.2775e-03,  1.3675e-03, -8.1134e-02,
         -3.4102e-01, -6.4434e-01]])), ('fc2.weight', tensor([[ 1.0638, -0.7026, -0.8785,  1.1213]])), ('fc1Root.weight', tensor([[-1.6191e-01,  4.2430e-01,  2.3487e-16, -1.3443e-03, -8.9239e-04,
         -3.9896e-01,  3.5847e-25,  7.8083e-04,  6.4932e-13, -8.7636e-02,
         -4.8393e-01, -3.5302e-02],
        [ 2.6703e-01, -9.4992e-01,  1.2167e-11, -1.3528e-03,  2.6874e-23,
          6.4437e-01, -1.4529e-13,  1.4608e-09,  1.7941e-03,  3.0168e-01,
          2.3929e-01,  1.6561e-01],
        [ 7.3863e-01, -8.2057e-01,  8.9484e-04,  2.9359e-04,  1.2551e-03,
          5.1715e-01,  2.9684e-20,  7.9119e-25,  1.2384e-24,  8.3439e-01,
          5.0604e-01,  4.5199e-01],
        [-2.9104e-01,  2.5678e-01, -8.5561e-08, -1.4239e-07,  8.6094e-08,
         -3.7578e-01, -2.0742e-05, -1.5909e-08,  2.5125e-10,  5.7031e-02,
          8.3512e-02, -2.1092e-01]])), ('fc2Root.weight', tensor([[-0.5291,  1.0868,  0.9224, -0.8537]]))])
---------------plt.close(fig)    # close the figure window-------------------------------------------------------------------------------------------

 Optimizer's state_dict:
CRITERION = MSELoss()
OPTIMIZER = Adam (
Parameter Group 0
    amsgrad: False
    betas: (0.9, 0.999)
    eps: 1e-08
    lr: 0.001
    weight_decay: 0
)
Tempo di training 2.23333477973938


state	{140203952037152: {'step': 1000, 'exp_avg': tensor([[-6.9463e-01, -4.8609e+00, -1.3259e-03,  3.3466e-04,  2.4391e-25,
         -7.3533e-01, -9.7376e-05,  2.7320e-03, -1.9211e-08, -9.2424e-02,
          5.5485e-01, -1.4166e+00],
        [-1.3659e+01, -8.5955e+01,  2.4153e-25,  2.9819e-05, -2.5840e-23,
         -1.3616e+01,  1.2832e-19,  1.1254e-24, -7.2331e-05, -8.7516e-01,
         -1.5295e+01,  2.1425e+00],
        [-1.7099e+01, -1.0739e+02, -8.2066e-26, -3.9878e-16, -3.5148e-04,
         -1.7193e+01,  9.1555e-25,  1.2380e-03,  1.4498e-25, -1.2196e+00,
         -1.9288e+01,  2.4925e+00],
        [-1.3175e+00, -3.8613e-01,  3.1429e-06,  4.8706e-04,  1.9339e-10,
         -1.2396e+00,  3.4123e-06,  3.8621e-04,  4.1309e-04, -2.3638e-02,
         -2.1531e-02, -1.3629e+00]]), 'exp_avg_sq': tensor([[8.6015e+03, 7.7055e+03, 2.4185e-03, 1.4308e-03, 2.9994e-06, 8.5956e+03,
         9.7908e-04, 3.3810e-03, 2.1620e-04, 4.8631e-02, 7.0998e+02, 5.6237e+03],
        [4.0571e+04, 1.2220e+06, 6.7247e-06, 7.2129e-04, 3.5761e-05, 4.0562e+04,
         5.5989e-05, 2.2589e-05, 9.0247e-04, 3.6079e+00, 8.0974e+03, 1.7851e+04],
        [6.8907e+04, 2.0211e+06, 1.5829e-05, 7.0661e-05, 1.4548e-03, 6.8936e+04,
         2.7599e-05, 2.3485e-03, 1.5075e-06, 6.3346e+00, 1.3984e+04, 3.0046e+04],
        [6.5686e+03, 4.5232e+02, 4.5093e-04, 1.6308e-03, 1.3942e-04, 6.5784e+03,
         4.5780e-04, 1.5026e-03, 1.5382e-03, 7.8609e-03, 1.6018e+02, 5.6810e+03]])}, 140203952037392: {'step': 1000, 'exp_avg': tensor([[-33.0677, -27.2896, -27.0399, -33.4939]]), 'exp_avg_sq': tensor([[ 210357.4531, 3650983.0000, 2493772.7500,  230710.8750]])}, 140203952037552: {'step': 1000, 'exp_avg': tensor([[-1.3622e+00,  2.9636e-01,  5.5344e-17, -1.2811e-04, -8.5570e-05,
         -1.3830e+00, -7.7691e-26,  7.5024e-05,  1.1412e-13, -7.7100e-03,
         -4.3194e-02, -3.6078e-02],
        [ 8.0964e+00,  9.4609e+01,  1.8053e-12, -1.2891e-04,  1.6751e-24,
          8.1296e+00, -2.9491e-14,  1.8356e-10,  1.7025e-04, -1.8503e+00,
          5.3137e+00,  3.6150e+00],
        [ 6.9164e+00,  8.0292e+01,  8.5801e-05,  2.8641e-05,  1.1973e-04,
          6.8969e+00,  1.0169e-21,  9.6945e-26,  1.5156e-25, -1.5195e+00,
          4.5364e+00,  3.0954e+00],
        [-2.1016e+00,  1.4830e+00, -9.7202e-09, -1.5997e-08,  9.7794e-09,
         -2.1091e+00, -2.1151e-06, -1.8790e-09,  3.3279e-11,  4.7296e-03,
         -1.5267e-02, -1.6323e-01]]), 'exp_avg_sq': tensor([[5.7561e+01, 7.8186e+01, 4.4958e-06, 9.3192e-05, 8.1782e-05, 5.7423e+01,
         2.1246e-07, 7.8513e-05, 6.2685e-06, 1.5113e+01, 1.4518e+01, 1.2511e+01],
        [3.0649e+03, 2.0445e+06, 7.2405e-06, 9.3387e-05, 1.8050e-06, 3.0626e+03,
         5.9184e-06, 1.0041e-05, 1.0272e-04, 6.4014e+02, 1.0014e+03, 8.7046e+02],
        [1.5036e+03, 1.3185e+06, 8.1851e-05, 5.9615e-05, 9.1121e-05, 1.5044e+03,
         2.9171e-06, 2.1910e-07, 3.3945e-07, 3.2117e+02, 4.8976e+02, 4.2502e+02],
        [1.2364e+03, 2.8527e+03, 1.4847e-05, 1.5742e-05, 1.4857e-05, 1.2361e+03,
         3.3063e-05, 1.2438e-05, 8.7770e-06, 2.5486e+02, 3.8767e+02, 3.3008e+02]])}, 140203952037792: {'step': 1000, 'exp_avg': tensor([[ -9.9512, -74.6396, -59.4863, -10.1031]]), 'exp_avg_sq': tensor([[  18561.3770, 1542262.7500, 1101314.0000,   14577.0947]])}}param_groups	[{'lr': 0.001, 'betas': (0.9, 0.999), 'eps': 1e-08, 'weight_decay': 0, 'amsgrad': False, 'params': [140203952037152, 140203952037392, 140203952037552, 140203952037792]}]
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Average Error Test Dataset= 10.459434254964192
RMSE Train Dataset = [139.6610083939859, 137.01913786265405, 119.47992362082218, 36.744753093235126, 29.114617457679763, 25.75340115205053, 24.27986241208957, 23.63769061225036, 23.349251830308315, 23.207977712247732]
RMSE Test Dataset = [138.7648499936133, 135.87023479454578, 117.31036059583569, 31.700185068835758, 23.466809798295444, 18.336030703853446, 15.4704554378686, 13.881904602417674, 12.994374745420192, 12.486100059752381]
Number of epochs 1000

pred =110.34811401367188
true = tensor([106.5000])
difference = tensor([3.8481])


pred =137.50306701660156
true = tensor([132.7000])
difference = tensor([4.8031])


pred =147.30038452148438
true = tensor([153.3000])
difference = tensor([5.9996])


pred =160.21873474121094
true = tensor([155.])
difference = tensor([5.2187])


pred =130.10684204101562
true = tensor([140.6000])
difference = tensor([10.4932])


pred =116.8878173828125
true = tensor([99.2000])
difference = tensor([17.6878])


pred =151.55142211914062
true = tensor([162.2000])
difference = tensor([10.6486])


pred =146.65452575683594
true = tensor([135.2000])
difference = tensor([11.4545])


pred =153.75567626953125
true = tensor([160.])
difference = tensor([6.2443])


pred =144.67446899414062
true = tensor([170.5000])
difference = tensor([25.8255])


pred =117.86726379394531
true = tensor([115.6000])
difference = tensor([2.2673])


pred =112.20957946777344
true = tensor([118.2000])
difference = tensor([5.9904])


pred =81.7348861694336
true = tensor([63.3000])
difference = tensor([18.4349])


pred =153.9848175048828
true = tensor([161.2000])
difference = tensor([7.2152])


pred =148.67971801757812
true = tensor([169.4400])
difference = tensor([20.7603])


