
+++++++++++++++++++++++++++++++++++REPORT+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

LISTA TEST FILE  
dict_keys(['molecule125.ct', 'molecule017.ct', 'molecule142.ct', 'molecule013.ct', 'molecule144.ct', 'molecule115.ct', 'molecule100.ct', 'molecule016.ct', 'molecule014.ct', 'molecule086.ct', 'molecule020.ct', 'molecule037.ct', 'molecule074.ct', 'molecule038.ct', 'molecule024.ct', 'molecule072.ct', 'molecule129.ct', 'molecule136.ct', 'molecule005.ct', 'molecule047.ct', 'molecule122.ct', 'molecule045.ct', 'molecule147.ct', 'molecule063.ct', 'molecule076.ct', 'molecule054.ct', 'molecule084.ct', 'molecule116.ct', 'molecule008.ct', 'molecule011.ct', 'molecule058.ct', 'molecule018.ct', 'molecule078.ct', 'molecule067.ct', 'molecule080.ct', 'molecule062.ct', 'molecule055.ct', 'molecule098.ct', 'molecule006.ct', 'molecule145.ct', 'molecule112.ct', 'molecule095.ct', 'molecule064.ct', 'molecule134.ct', 'molecule030.ct', 'molecule091.ct', 'molecule127.ct', 'molecule051.ct', 'molecule138.ct', 'molecule041.ct', 'molecule096.ct', 'molecule061.ct', 'molecule043.ct', 'molecule105.ct', 'molecule035.ct', 'molecule019.ct', 'molecule034.ct', 'molecule001.ct', 'molecule082.ct', 'molecule057.ct', 'molecule039.ct', 'molecule131.ct', 'molecule102.ct', 'molecule137.ct', 'molecule089.ct', 'molecule044.ct', 'molecule133.ct', 'molecule130.ct', 'molecule110.ct', 'molecule113.ct', 'molecule141.ct', 'molecule103.ct', 'molecule143.ct', 'molecule032.ct', 'molecule042.ct', 'molecule132.ct', 'molecule065.ct', 'molecule123.ct', 'molecule003.ct', 'molecule007.ct', 'molecule118.ct', 'molecule070.ct', 'molecule048.ct', 'molecule150.ct', 'molecule040.ct', 'molecule050.ct', 'molecule128.ct', 'molecule081.ct', 'molecule025.ct', 'molecule033.ct', 'molecule068.ct', 'molecule046.ct', 'molecule075.ct', 'molecule099.ct', 'molecule111.ct', 'molecule140.ct', 'molecule028.ct', 'molecule073.ct', 'molecule077.ct', 'molecule093.ct', 'molecule009.ct', 'molecule121.ct', 'molecule060.ct', 'molecule052.ct', 'molecule027.ct', 'molecule106.ct', 'molecule071.ct', 'molecule087.ct', 'molecule002.ct', 'molecule139.ct', 'molecule119.ct', 'molecule148.ct', 'molecule036.ct', 'molecule107.ct', 'molecule124.ct', 'molecule004.ct', 'molecule149.ct', 'molecule022.ct', 'molecule120.ct', 'molecule094.ct', 'molecule117.ct', 'molecule015.ct', 'molecule090.ct', 'molecule104.ct', 'molecule101.ct', 'molecule049.ct', 'molecule088.ct', 'molecule146.ct', 'molecule021.ct', 'molecule059.ct', 'molecule114.ct', 'molecule126.ct', 'molecule010.ct', 'molecule066.ct', 'molecule085.ct'])


LISTA VALIDATION FILE  
dict_keys(['molecule023.ct', 'molecule053.ct', 'molecule097.ct', 'molecule108.ct', 'molecule056.ct', 'molecule026.ct', 'molecule083.ct', 'molecule069.ct', 'molecule135.ct', 'molecule079.ct', 'molecule031.ct', 'molecule029.ct', 'molecule012.ct', 'molecule109.ct', 'molecule092.ct'])


Our model: 

RegressionGm(
  (fc1): Linear(in_features=12, out_features=4, bias=False)
  (fc2): Linear(in_features=4, out_features=1, bias=False)
  (LRelu): SELU()
  (fc1Root): Linear(in_features=12, out_features=4, bias=False)
  (fc2Root): Linear(in_features=4, out_features=1, bias=False)
  (LReluRoot): SELU()
)
Printing children
------------------------------[Linear(in_features=12, out_features=4, bias=False), Linear(in_features=4, out_features=1, bias=False), SELU(), Linear(in_features=12, out_features=4, bias=False), Linear(in_features=4, out_features=1, bias=False), SELU()]

Printing Modules
------------------------------[RegressionGm(
  (fc1): Linear(in_features=12, out_features=4, bias=False)
  (fc2): Linear(in_features=4, out_features=1, bias=False)
  (LRelu): SELU()
  (fc1Root): Linear(in_features=12, out_features=4, bias=False)
  (fc2Root): Linear(in_features=4, out_features=1, bias=False)
  (LReluRoot): SELU()
), Linear(in_features=12, out_features=4, bias=False), Linear(in_features=4, out_features=1, bias=False), SELU(), Linear(in_features=12, out_features=4, bias=False), Linear(in_features=4, out_features=1, bias=False), SELU()]
The state dict keys: 

odict_keys(['fc1.weight', 'fc2.weight', 'fc1Root.weight', 'fc2Root.weight'])Models state_dict:fc1.weight	torch.Size([4, 12])fc2.weight	torch.Size([1, 4])fc1Root.weight	torch.Size([4, 12])fc2Root.weight	torch.Size([1, 4])OrderedDict([('fc1.weight', tensor([[-2.2332e-01,  7.5558e-01, -2.5272e-01,  5.2783e-02,  6.1517e-43,
         -2.2864e-01, -2.9427e-44, -4.2319e-43, -2.6344e-43, -1.6258e-02,
         -2.0195e-01, -6.9908e-02],
        [ 8.1219e-01, -5.8909e-01, -6.8321e-01, -8.7555e-01,  3.3591e-41,
          7.9793e-01, -5.0307e-43,  1.0580e-42,  4.3440e-44,  2.7052e-01,
          3.1465e-01,  5.5638e-02],
        [-2.1996e-01,  5.6985e-01,  7.6013e-02,  2.6082e-02, -2.2397e-11,
         -2.0688e-01, -1.3775e-42,  8.9263e-43,  1.4405e-42, -7.8732e-03,
         -1.9009e-01, -4.5515e-02],
        [ 1.3314e-01,  4.1654e-02,  1.2040e-01,  1.5426e-01,  8.2116e-43,
          1.3056e-01,  7.8473e-43,  1.4630e-42,  5.4527e-07, -4.7818e-02,
          2.0059e-01,  5.4549e-02]])), ('fc2.weight', tensor([[ 0.5362, -1.5443,  0.3741,  0.3648]])), ('fc1Root.weight', tensor([[ 6.2746e+00,  2.0996e+00,  5.2052e-01,  9.7738e-01,  4.2820e-02,
          6.5637e+00,  9.7026e-42, -6.5553e-42,  1.2430e-41, -7.7151e-01,
         -2.5283e+00,  1.5218e+00],
        [ 6.4872e+00,  1.7739e+00,  2.4667e-01,  2.5129e-01,  4.8955e-01,
          6.4450e+00,  8.3027e-42, -1.3881e-41, -1.2651e-41, -8.0643e-01,
         -2.4355e+00, -1.3275e+00],
        [-3.3210e+00, -1.4686e+00, -1.2542e+00, -1.0033e+00, -9.2694e-01,
         -3.3611e+00, -1.4286e-41, -1.3350e-41,  1.2661e-41, -7.5941e-01,
         -2.8235e+00, -1.6925e+00],
        [-3.2153e+00, -8.7922e-01, -1.1422e+00, -1.3293e+00, -1.1037e+00,
         -3.2580e+00,  8.4078e-43, -2.9427e-44, -6.0732e-42, -6.6204e-01,
         -2.8299e+00, -1.4168e+00]])), ('fc2Root.weight', tensor([[-5.1514, -6.3222,  2.3430,  2.1080]]))])
---------------plt.close(fig)    # close the figure window-------------------------------------------------------------------------------------------

 Optimizer's state_dict:
CRITERION = MSELoss()
OPTIMIZER = Adam (
Parameter Group 0
    amsgrad: False
    betas: (0.9, 0.999)
    eps: 1e-08
    lr: 0.001
    weight_decay: 0
)
Tempo di training 60.322837114334106


state	{140532772362432: {'step': 20000, 'exp_avg': tensor([[-3.8427e-02,  9.9999e-03,  4.1954e-02, -2.2781e-04,  2.8727e-43,
         -4.0966e-02, -7.0065e-45, -1.8918e-43, -1.1911e-43,  9.7086e-05,
         -2.1052e-03, -4.5515e-02],
        [ 2.7151e-01, -1.1498e-01, -1.0769e-01, -4.5074e-05,  1.5554e-43,
          2.6472e-01, -2.3121e-43,  4.9746e-43,  2.1019e-44, -9.1065e-04,
          6.5401e-02,  3.6327e-01],
        [-3.4789e-02,  3.3069e-03,  1.7590e-03, -1.3214e-04,  5.0586e-13,
         -2.8541e-02, -6.5160e-43,  4.1338e-43,  6.7963e-43,  6.9622e-05,
          4.7514e-04, -4.6374e-02],
        [-4.4800e-02,  1.3218e-01,  1.7469e-02, -5.5299e-04,  3.8536e-43,
         -4.6028e-02,  3.7134e-43,  6.9364e-43, -8.4443e-09,  2.1057e-04,
         -1.2382e-02, -6.6318e-02]]), 'exp_avg_sq': tensor([[2.6324e+00, 1.2103e-01, 6.9810e-01, 3.7007e-05, 2.0594e-12, 2.6322e+00,
         6.9234e-15, 7.6805e-14, 5.9223e-12, 3.5117e-06, 1.0572e-02, 2.5531e+00],
        [4.0956e+01, 3.1801e+02, 1.4222e+01, 1.0296e-02, 6.2903e-10, 4.0955e+01,
         1.1094e-12, 1.8978e-11, 9.8907e-12, 9.5081e-04, 5.7086e+00, 2.0793e+01],
        [1.5833e+00, 2.1860e-02, 3.2776e-03, 9.3278e-06, 1.8470e-10, 1.5838e+00,
         4.6377e-16, 1.7855e-11, 8.6427e-12, 9.1520e-07, 1.8176e-03, 1.5040e+00],
        [2.8192e+00, 5.5385e+01, 5.3946e-01, 3.0568e-04, 1.6732e-15, 2.8192e+00,
         6.9634e-13, 3.8536e-15, 2.1957e-10, 2.8589e-05, 6.4556e-01, 1.1551e+00]])}, 140532772361552: {'step': 20000, 'exp_avg': tensor([[ 0.1308, -0.3573,  0.2800, -0.0351]]), 'exp_avg_sq': tensor([[ 15.7846, 255.5077,  16.2423,   0.5697]])}, 140532772361232: {'step': 20000, 'exp_avg': tensor([[-5.1703e-03,  8.4478e-02,  6.5260e-02,  1.1240e-01,  4.0527e-01,
         -1.6412e-03,  1.1771e-43, -7.7071e-44,  1.4714e-43, -2.1378e-02,
         -2.3199e-03,  4.8380e-04],
        [ 6.8409e-03,  4.0905e-03, -5.9240e-03, -1.1703e-02,  5.9688e-03,
          6.3249e-03,  1.0370e-43, -1.7376e-43, -1.5975e-43,  1.1871e-03,
          7.6116e-03, -2.0693e-03],
        [-5.7069e-03,  2.2157e-02,  4.0382e-02,  3.1851e-02, -6.2652e-02,
         -6.1959e-03, -1.7376e-43, -1.6115e-43,  1.5975e-43,  1.0409e-03,
         -1.0695e-02, -1.3642e-02],
        [ 1.6061e-03, -5.1876e-03,  4.1560e-03,  2.3450e-02, -5.9660e-02,
          1.0843e-03,  1.9618e-44, -5.6052e-45, -7.5670e-44,  1.1956e-03,
         -3.1866e-03, -1.1447e-02]]), 'exp_avg_sq': tensor([[2.9718e-02, 3.1706e-01, 3.3171e-01, 3.0078e-01, 7.9254e+00, 2.9889e-02,
         6.9509e-14, 1.3272e-15, 5.7219e-13, 2.6814e-02, 6.0201e-05, 1.6070e-05],
        [4.9116e-03, 5.0410e-02, 3.5932e-01, 2.1291e-01, 3.7488e-02, 4.9025e-03,
         7.6959e-14, 1.7910e-13, 3.4882e-13, 3.9967e-04, 2.4007e-03, 7.8361e-04],
        [3.1355e-02, 5.1554e-01, 1.8199e+00, 5.3225e+00, 1.9332e+00, 3.1356e-02,
         5.9736e-13, 1.5886e-13, 4.8969e-13, 5.6426e-03, 1.1035e-02, 8.8464e-03],
        [2.5392e-02, 4.1747e-01, 1.4760e+00, 4.3247e+00, 1.5709e+00, 2.5386e-02,
         8.5521e-16, 9.4970e-15, 1.4567e-15, 4.5848e-03, 8.8822e-03, 7.1612e-03]])}, 140532772361072: {'step': 20000, 'exp_avg': tensor([[ 0.0051,  0.0204, -0.1646, -0.1614]]), 'exp_avg_sq': tensor([[0.0134, 0.0145, 4.1112, 5.2250]])}}param_groups	[{'lr': 0.001, 'betas': (0.9, 0.999), 'eps': 1e-08, 'weight_decay': 0, 'amsgrad': False, 'params': [140532772362432, 140532772361552, 140532772361232, 140532772361072]}]

Average Error Test Dataset= 3.3098960876464845
RMSE Train Dataset = [20.2729573040433, 14.875466219223444, 12.298457003938925, 8.040527684749225, 5.039039032164346, 4.866747204014024, 4.803268495996128, 4.759790870496242, 4.733414051997404, 4.714490167717386]
RMSE Test Dataset = [8.791335643544782, 8.286658021897308, 11.424231999667485, 13.985273517747551, 6.702279844556335, 6.1343387332569055, 4.947306106106588, 4.192919967080435, 3.9145138417495136, 3.93817169273168]
Number of epochs 20000

pred =107.06743621826172
true = tensor([106.5000])
difference = tensor([0.5674])


pred =128.60122680664062
true = tensor([132.7000])
difference = tensor([4.0988])


pred =158.20947265625
true = tensor([153.3000])
difference = tensor([4.9095])


pred =148.72738647460938
true = tensor([155.])
difference = tensor([6.2726])


pred =143.11334228515625
true = tensor([140.6000])
difference = tensor([2.5133])


pred =104.33421325683594
true = tensor([99.2000])
difference = tensor([5.1342])


pred =157.79681396484375
true = tensor([162.2000])
difference = tensor([4.4032])


pred =132.8379669189453
true = tensor([135.2000])
difference = tensor([2.3620])


pred =161.89337158203125
true = tensor([160.])
difference = tensor([1.8934])


pred =168.7259063720703
true = tensor([170.5000])
difference = tensor([1.7741])


pred =113.55228424072266
true = tensor([115.6000])
difference = tensor([2.0477])


pred =119.2196273803711
true = tensor([118.2000])
difference = tensor([1.0196])


pred =61.913795471191406
true = tensor([63.3000])
difference = tensor([1.3862])


pred =158.48837280273438
true = tensor([161.2000])
difference = tensor([2.7116])


pred =160.88525390625
true = tensor([169.4400])
difference = tensor([8.5547])


