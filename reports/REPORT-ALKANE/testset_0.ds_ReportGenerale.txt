
+++++++++++++++++++++++++++++++++++REPORT+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

LISTA TEST FILE  
dict_keys(['molecule125.ct', 'molecule017.ct', 'molecule142.ct', 'molecule013.ct', 'molecule144.ct', 'molecule115.ct', 'molecule100.ct', 'molecule016.ct', 'molecule014.ct', 'molecule086.ct', 'molecule020.ct', 'molecule037.ct', 'molecule074.ct', 'molecule038.ct', 'molecule024.ct', 'molecule072.ct', 'molecule129.ct', 'molecule136.ct', 'molecule005.ct', 'molecule047.ct', 'molecule122.ct', 'molecule045.ct', 'molecule147.ct', 'molecule063.ct', 'molecule076.ct', 'molecule054.ct', 'molecule084.ct', 'molecule116.ct', 'molecule008.ct', 'molecule011.ct', 'molecule058.ct', 'molecule018.ct', 'molecule078.ct', 'molecule067.ct', 'molecule080.ct', 'molecule062.ct', 'molecule055.ct', 'molecule098.ct', 'molecule006.ct', 'molecule145.ct', 'molecule112.ct', 'molecule095.ct', 'molecule064.ct', 'molecule134.ct', 'molecule030.ct', 'molecule091.ct', 'molecule127.ct', 'molecule051.ct', 'molecule138.ct', 'molecule041.ct', 'molecule096.ct', 'molecule061.ct', 'molecule043.ct', 'molecule105.ct', 'molecule035.ct', 'molecule019.ct', 'molecule034.ct', 'molecule001.ct', 'molecule082.ct', 'molecule057.ct', 'molecule039.ct', 'molecule131.ct', 'molecule102.ct', 'molecule137.ct', 'molecule089.ct', 'molecule044.ct', 'molecule133.ct', 'molecule130.ct', 'molecule110.ct', 'molecule113.ct', 'molecule141.ct', 'molecule103.ct', 'molecule143.ct', 'molecule032.ct', 'molecule042.ct', 'molecule132.ct', 'molecule065.ct', 'molecule123.ct', 'molecule003.ct', 'molecule007.ct', 'molecule118.ct', 'molecule070.ct', 'molecule048.ct', 'molecule150.ct', 'molecule040.ct', 'molecule050.ct', 'molecule128.ct', 'molecule081.ct', 'molecule025.ct', 'molecule033.ct', 'molecule068.ct', 'molecule046.ct', 'molecule075.ct', 'molecule099.ct', 'molecule111.ct', 'molecule140.ct', 'molecule028.ct', 'molecule073.ct', 'molecule077.ct', 'molecule093.ct', 'molecule009.ct', 'molecule121.ct', 'molecule060.ct', 'molecule052.ct', 'molecule027.ct', 'molecule106.ct', 'molecule071.ct', 'molecule087.ct', 'molecule002.ct', 'molecule139.ct', 'molecule119.ct', 'molecule148.ct', 'molecule036.ct', 'molecule107.ct', 'molecule124.ct', 'molecule004.ct', 'molecule149.ct', 'molecule022.ct', 'molecule120.ct', 'molecule094.ct', 'molecule117.ct', 'molecule015.ct', 'molecule090.ct', 'molecule104.ct', 'molecule101.ct', 'molecule049.ct', 'molecule088.ct', 'molecule146.ct', 'molecule021.ct', 'molecule059.ct', 'molecule114.ct', 'molecule126.ct', 'molecule010.ct', 'molecule066.ct', 'molecule085.ct'])


LISTA VALIDATION FILE  
dict_keys(['molecule023.ct', 'molecule053.ct', 'molecule097.ct', 'molecule108.ct', 'molecule056.ct', 'molecule026.ct', 'molecule083.ct', 'molecule069.ct', 'molecule135.ct', 'molecule079.ct', 'molecule031.ct', 'molecule029.ct', 'molecule012.ct', 'molecule109.ct', 'molecule092.ct'])


Our model: 

RegressionGm(
  (fc1): Linear(in_features=12, out_features=4, bias=False)
  (fc2): Linear(in_features=4, out_features=1, bias=False)
  (LRelu): SELU()
  (fc1Root): Linear(in_features=12, out_features=4, bias=False)
  (fc2Root): Linear(in_features=4, out_features=1, bias=False)
  (LReluRoot): SELU()
)
Printing children
------------------------------[Linear(in_features=12, out_features=4, bias=False), Linear(in_features=4, out_features=1, bias=False), SELU(), Linear(in_features=12, out_features=4, bias=False), Linear(in_features=4, out_features=1, bias=False), SELU()]

Printing Modules
------------------------------[RegressionGm(
  (fc1): Linear(in_features=12, out_features=4, bias=False)
  (fc2): Linear(in_features=4, out_features=1, bias=False)
  (LRelu): SELU()
  (fc1Root): Linear(in_features=12, out_features=4, bias=False)
  (fc2Root): Linear(in_features=4, out_features=1, bias=False)
  (LReluRoot): SELU()
), Linear(in_features=12, out_features=4, bias=False), Linear(in_features=4, out_features=1, bias=False), SELU(), Linear(in_features=12, out_features=4, bias=False), Linear(in_features=4, out_features=1, bias=False), SELU()]
The state dict keys: 

odict_keys(['fc1.weight', 'fc2.weight', 'fc1Root.weight', 'fc2Root.weight'])Models state_dict:fc1.weight	torch.Size([4, 12])fc2.weight	torch.Size([1, 4])fc1Root.weight	torch.Size([4, 12])fc2Root.weight	torch.Size([1, 4])OrderedDict([('fc1.weight', tensor([[-1.9749e-01,  5.8662e-02,  6.6751e-02,  2.0099e-03, -7.4689e-43,
         -2.2205e-01,  4.0918e-43, -2.2701e-43,  6.0816e-43, -1.4499e-02,
         -1.5089e-01,  2.4840e-01],
        [ 4.1739e-01,  2.6616e-01,  2.3211e-01, -1.3926e-02,  4.3440e-43,
          3.4496e-01, -6.6141e-43,  4.2179e-43,  2.7300e-08, -1.7490e-02,
          8.1550e-01, -2.9736e-02],
        [-2.7996e-01,  2.3476e-02,  2.0209e-01, -1.1793e-02, -9.2486e-44,
         -2.9930e-01, -4.2880e-43, -2.1580e-43,  2.7325e-43,  1.0008e-02,
         -4.1751e-01, -2.5829e-02],
        [-1.4530e-01,  5.3762e-02,  6.9345e-02,  6.4040e-03,  6.7823e-43,
         -1.7208e-01, -2.4102e-43,  2.8166e-43, -8.3097e-43, -2.2925e-02,
         -1.7375e-01,  7.9364e-03]])), ('fc2.weight', tensor([[2.2145, 2.5329, 2.1681, 2.2269]])), ('fc1Root.weight', tensor([[-1.2879e+00, -1.5876e+00, -1.7897e+00, -1.7855e+00, -1.5986e+00,
         -1.6962e+00,  9.5498e-42,  7.2910e-42,  1.9072e-42,  8.7249e-01,
          3.6124e-01, -3.8218e-01],
        [-1.5556e+00, -1.6411e+00, -1.8304e+00, -1.4058e+00, -1.4380e+00,
         -1.5430e+00, -3.0184e-42, -1.2275e-41, -7.7954e-42,  8.8669e-01,
          8.1864e-01, -5.1505e-01],
        [-1.6170e+00, -1.7207e+00, -1.7700e+00, -1.7044e+00, -1.7347e+00,
         -1.6455e+00,  4.3510e-42, -3.1641e-42,  4.3636e-42,  9.6291e-01,
          3.7878e-01, -4.4248e-01],
        [ 6.8850e+00,  1.7088e+00,  1.6392e+00,  1.5853e+00,  7.8589e-01,
          6.9764e+00,  7.9874e-43, -6.8664e-44,  1.3923e-41, -4.1316e-01,
         -4.7362e-01,  5.8154e-01]])), ('fc2Root.weight', tensor([[ 2.6095,  2.7530,  2.5711, -6.6127]]))])
---------------plt.close(fig)    # close the figure window-------------------------------------------------------------------------------------------

 Optimizer's state_dict:
CRITERION = MSELoss()
OPTIMIZER = Adam (
Parameter Group 0
    amsgrad: False
    betas: (0.9, 0.999)
    eps: 1e-08
    lr: 0.001
    weight_decay: 0
)
Tempo di training 26.51630449295044


state	{140213055458352: {'step': 10000, 'exp_avg': tensor([[-9.3544e+00,  9.9049e-01,  1.9606e+00,  3.1230e-01, -5.6612e-43,
         -9.3730e+00,  3.0128e-43, -1.6115e-43,  4.5542e-43, -2.2635e-01,
         -5.1965e+00, -9.3111e+00],
        [-1.2945e+01,  2.8180e+01,  2.3197e+00,  3.8413e-01,  3.2931e-43,
         -1.3000e+01, -4.9746e-43,  3.1529e-43, -1.3279e-09, -2.8676e-01,
         -9.1940e+00, -8.5569e+00],
        [-5.1314e+00, -1.4989e-01,  1.3660e+00,  2.2565e-01, -6.3058e-44,
         -5.1461e+00, -3.1529e-43, -1.6115e-43,  2.0319e-43, -1.5496e-01,
         -2.5953e+00, -5.1215e+00],
        [-7.9994e+00,  6.6457e-01,  1.6711e+00,  3.4706e-01,  5.1147e-43,
         -8.0197e+00, -1.7516e-43,  2.0319e-43, -6.2358e-43, -2.5452e-01,
         -4.3624e+00, -8.2006e+00]]), 'exp_avg_sq': tensor([[1.7073e+04, 8.7025e+03, 7.6563e+02, 8.1098e+00, 1.2964e-07, 1.7073e+04,
         5.5323e-09, 2.1901e-07, 3.6399e-08, 4.4226e+00, 1.4342e+03, 1.0275e+04],
        [1.7474e+04, 2.5650e+04, 1.4532e+03, 1.2846e+01, 2.6873e-09, 1.7474e+04,
         5.9573e-08, 2.5991e-07, 5.0747e-10, 6.9841e+00, 3.2022e+03, 7.4912e+03],
        [6.8776e+03, 3.8290e+03, 6.7275e+01, 3.5588e+00, 3.6621e-07, 6.8776e+03,
         3.7117e-09, 2.0610e-07, 3.9436e-08, 1.8357e+00, 5.1529e+02, 3.8621e+03],
        [1.4911e+04, 1.0288e+04, 6.1152e+02, 9.8907e+00, 1.9386e-07, 1.4911e+04,
         5.6034e-08, 2.4815e-07, 1.6279e-07, 5.3955e+00, 1.6017e+03, 7.9519e+03]])}, 140213055458672: {'step': 10000, 'exp_avg': tensor([[ 1.5581, -3.9963,  3.4353,  2.1746]]), 'exp_avg_sq': tensor([[ 740.0056, 1368.3169, 2245.3083,  976.9255]])}, 140213055458912: {'step': 10000, 'exp_avg': tensor([[ 8.8482e-02, -9.3640e-02,  7.8445e-02,  7.3822e-01,  3.5895e-01,
          8.1976e-02,  1.5975e-43,  1.1771e-43,  3.3631e-44,  1.9637e-01,
         -1.5604e-01, -1.9554e-02],
        [ 8.5196e-02, -1.2182e-01,  8.3659e-02,  7.8637e-01,  3.8260e-01,
          8.5396e-02, -4.7644e-44, -2.0179e-43, -1.3172e-43,  2.0662e-01,
         -1.5763e-01, -6.0043e-03],
        [ 5.0102e-02, -1.1405e-01,  7.7161e-02,  7.2815e-01,  3.5107e-01,
          4.9648e-02,  7.5670e-44, -6.1657e-44,  7.5670e-44,  1.9512e-01,
         -1.5337e-01, -6.8850e-03],
        [-4.1330e+00, -1.1206e+00, -1.5709e-01,  8.7125e-01, -1.0091e+00,
         -4.1316e+00,  1.9618e-44,  5.6052e-45,  2.2981e-43,  2.3577e-01,
          6.7422e-01,  7.6318e-01]]), 'exp_avg_sq': tensor([[3.4602e+00, 3.5300e+01, 4.6834e+01, 6.0908e+01, 2.0653e+01, 3.4507e+00,
         1.0371e-09, 1.4481e-09, 2.7012e-10, 4.8980e-01, 7.3804e-01, 7.8126e-01],
        [3.0636e+00, 3.1017e+01, 4.1185e+01, 5.5499e+01, 1.9768e+01, 3.0639e+00,
         7.3746e-09, 1.7533e-09, 1.1138e-08, 4.5997e-01, 6.6486e-01, 6.9592e-01],
        [2.2748e+00, 2.3455e+01, 3.1147e+01, 4.3089e+01, 1.5984e+01, 2.2743e+00,
         3.1665e-11, 2.2982e-09, 8.5046e-09, 3.6013e-01, 5.1178e-01, 5.3913e-01],
        [3.7246e+01, 4.4603e+00, 4.4269e+00, 6.5212e+00, 4.2369e+01, 3.7227e+01,
         3.1788e-11, 2.0834e-09, 1.7263e-09, 8.2170e-01, 1.0321e+00, 7.4866e-01]])}, 140213055459152: {'step': 10000, 'exp_avg': tensor([[-1.9122, -1.8050, -1.9088,  8.8094]]), 'exp_avg_sq': tensor([[233.6010, 152.6191, 183.8802, 156.0893]])}}param_groups	[{'lr': 0.001, 'betas': (0.9, 0.999), 'eps': 1e-08, 'weight_decay': 0, 'amsgrad': False, 'params': [140213055458352, 140213055458672, 140213055458912, 140213055459152]}]

Average Error Test Dataset= 6.653526560465495
RMSE Train Dataset = [39.459983933489504, 35.87424460223866, 25.86824692031659, 21.338436867293094, 17.012168568249354, 13.551604926861984, 11.742248575606297, 10.230849449412448, 8.66750708197653, 7.343221702240898]
RMSE Test Dataset = [27.38616799162718, 29.64816370097554, 14.928685352779885, 9.751571137434086, 5.833035852022218, 5.506520134559536, 7.754907100472764, 8.204952363428616, 9.423434455831874, 10.53075120237063]
Number of epochs 10000

pred =100.582275390625
true = tensor([106.5000])
difference = tensor([5.9177])


pred =123.05164337158203
true = tensor([132.7000])
difference = tensor([9.6484])


pred =157.62237548828125
true = tensor([153.3000])
difference = tensor([4.3224])


pred =148.96083068847656
true = tensor([155.])
difference = tensor([6.0392])


pred =146.65811157226562
true = tensor([140.6000])
difference = tensor([6.0581])


pred =97.6627426147461
true = tensor([99.2000])
difference = tensor([1.5373])


pred =158.53155517578125
true = tensor([162.2000])
difference = tensor([3.6684])


pred =134.38938903808594
true = tensor([135.2000])
difference = tensor([0.8106])


pred =160.4207305908203
true = tensor([160.])
difference = tensor([0.4207])


pred =134.54685974121094
true = tensor([170.5000])
difference = tensor([35.9531])


pred =121.28168487548828
true = tensor([115.6000])
difference = tensor([5.6817])


pred =123.48321533203125
true = tensor([118.2000])
difference = tensor([5.2832])


pred =58.91374206542969
true = tensor([63.3000])
difference = tensor([4.3863])


pred =157.57769775390625
true = tensor([161.2000])
difference = tensor([3.6223])


pred =162.98646545410156
true = tensor([169.4400])
difference = tensor([6.4535])


