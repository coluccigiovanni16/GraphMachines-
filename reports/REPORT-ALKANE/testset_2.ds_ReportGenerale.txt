
+++++++++++++++++++++++++++++++++++REPORT+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

LISTA TEST FILE  
dict_keys(['molecule117.ct', 'molecule015.ct', 'molecule090.ct', 'molecule104.ct', 'molecule101.ct', 'molecule049.ct', 'molecule088.ct', 'molecule146.ct', 'molecule021.ct', 'molecule059.ct', 'molecule114.ct', 'molecule126.ct', 'molecule010.ct', 'molecule066.ct', 'molecule085.ct', 'molecule023.ct', 'molecule053.ct', 'molecule097.ct', 'molecule108.ct', 'molecule056.ct', 'molecule026.ct', 'molecule083.ct', 'molecule069.ct', 'molecule135.ct', 'molecule079.ct', 'molecule031.ct', 'molecule029.ct', 'molecule012.ct', 'molecule109.ct', 'molecule092.ct', 'molecule125.ct', 'molecule017.ct', 'molecule142.ct', 'molecule013.ct', 'molecule144.ct', 'molecule115.ct', 'molecule100.ct', 'molecule016.ct', 'molecule014.ct', 'molecule086.ct', 'molecule020.ct', 'molecule037.ct', 'molecule074.ct', 'molecule038.ct', 'molecule024.ct', 'molecule072.ct', 'molecule129.ct', 'molecule136.ct', 'molecule005.ct', 'molecule047.ct', 'molecule122.ct', 'molecule045.ct', 'molecule147.ct', 'molecule063.ct', 'molecule076.ct', 'molecule054.ct', 'molecule084.ct', 'molecule116.ct', 'molecule008.ct', 'molecule011.ct', 'molecule058.ct', 'molecule018.ct', 'molecule078.ct', 'molecule067.ct', 'molecule080.ct', 'molecule062.ct', 'molecule055.ct', 'molecule098.ct', 'molecule006.ct', 'molecule145.ct', 'molecule112.ct', 'molecule095.ct', 'molecule064.ct', 'molecule134.ct', 'molecule030.ct', 'molecule091.ct', 'molecule127.ct', 'molecule051.ct', 'molecule138.ct', 'molecule041.ct', 'molecule096.ct', 'molecule061.ct', 'molecule043.ct', 'molecule105.ct', 'molecule035.ct', 'molecule019.ct', 'molecule034.ct', 'molecule001.ct', 'molecule082.ct', 'molecule057.ct', 'molecule039.ct', 'molecule131.ct', 'molecule102.ct', 'molecule137.ct', 'molecule089.ct', 'molecule044.ct', 'molecule133.ct', 'molecule130.ct', 'molecule110.ct', 'molecule113.ct', 'molecule141.ct', 'molecule103.ct', 'molecule143.ct', 'molecule032.ct', 'molecule042.ct', 'molecule132.ct', 'molecule065.ct', 'molecule123.ct', 'molecule003.ct', 'molecule007.ct', 'molecule118.ct', 'molecule070.ct', 'molecule048.ct', 'molecule150.ct', 'molecule040.ct', 'molecule050.ct', 'molecule128.ct', 'molecule081.ct', 'molecule025.ct', 'molecule033.ct', 'molecule068.ct', 'molecule046.ct', 'molecule075.ct', 'molecule099.ct', 'molecule111.ct', 'molecule140.ct', 'molecule028.ct', 'molecule073.ct', 'molecule077.ct', 'molecule093.ct', 'molecule009.ct', 'molecule121.ct', 'molecule060.ct', 'molecule052.ct', 'molecule027.ct'])


LISTA VALIDATION FILE  
dict_keys(['molecule106.ct', 'molecule071.ct', 'molecule087.ct', 'molecule002.ct', 'molecule139.ct', 'molecule119.ct', 'molecule148.ct', 'molecule036.ct', 'molecule107.ct', 'molecule124.ct', 'molecule004.ct', 'molecule149.ct', 'molecule022.ct', 'molecule120.ct', 'molecule094.ct'])
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Our model: 

RegressionGm(
  (fc1): Linear(in_features=12, out_features=4, bias=False)
  (fc2): Linear(in_features=4, out_features=1, bias=False)
  (LRelu): SELU()
  (fc1Root): Linear(in_features=12, out_features=4, bias=False)
  (fc2Root): Linear(in_features=4, out_features=1, bias=False)
  (LReluRoot): SELU()
)
Printing children
------------------------------[Linear(in_features=12, out_features=4, bias=False), Linear(in_features=4, out_features=1, bias=False), SELU(), Linear(in_features=12, out_features=4, bias=False), Linear(in_features=4, out_features=1, bias=False), SELU()]

Printing Modules
------------------------------[RegressionGm(
  (fc1): Linear(in_features=12, out_features=4, bias=False)
  (fc2): Linear(in_features=4, out_features=1, bias=False)
  (LRelu): SELU()
  (fc1Root): Linear(in_features=12, out_features=4, bias=False)
  (fc2Root): Linear(in_features=4, out_features=1, bias=False)
  (LReluRoot): SELU()
), Linear(in_features=12, out_features=4, bias=False), Linear(in_features=4, out_features=1, bias=False), SELU(), Linear(in_features=12, out_features=4, bias=False), Linear(in_features=4, out_features=1, bias=False), SELU()]
The state dict keys: 

odict_keys(['fc1.weight', 'fc2.weight', 'fc1Root.weight', 'fc2Root.weight'])Models state_dict:fc1.weight	torch.Size([4, 12])fc2.weight	torch.Size([1, 4])fc1Root.weight	torch.Size([4, 12])fc2Root.weight	torch.Size([1, 4])OrderedDict([('fc1.weight', tensor([[-2.0623e-01, -4.8061e-01, -1.6521e-01, -3.4528e-02, -2.7606e-43,
         -1.9101e-01,  2.5087e-15,  6.6842e-43, -1.4447e-42, -9.0249e-03,
         -1.2547e-01, -6.8673e-02],
        [-1.7091e-01, -4.4324e-01, -1.6196e-01, -3.3212e-02, -1.1491e-43,
         -1.6693e-01, -6.2218e-43,  1.0342e-42,  6.5441e-43, -8.6768e-03,
         -1.1848e-01, -5.5999e-02],
        [ 6.0517e-01,  6.1758e-01,  7.3138e-01,  9.9561e-01, -1.1631e-42,
          7.4728e-01, -3.9517e-43,  7.5530e-43, -8.8702e-43,  2.6413e-01,
          2.2082e-01,  2.2248e-01],
        [-2.4017e-01, -7.6592e-01,  2.5502e-01, -5.8061e-02, -3.1970e-14,
         -2.5530e-01,  8.9543e-43,  5.7033e-43,  7.5530e-43, -1.5264e-02,
         -1.9503e-01, -1.8788e-01]])), ('fc2.weight', tensor([[-0.6024, -0.4661,  1.4855, -0.7385]])), ('fc1Root.weight', tensor([[ 6.0614e+00, -1.0169e+00, -2.6737e-01, -7.7664e-01, -4.7129e-01,
          6.0958e+00,  1.1070e-41,  3.7275e-43,  4.4505e-42,  3.2964e-01,
         -6.9783e-01, -4.9357e-01],
        [ 7.6350e+00, -3.2801e+00, -2.7006e-01, -1.6062e-01, -2.4483e-02,
          7.5566e+00,  1.5078e-42,  5.4791e-42,  6.2792e-42,  9.4529e-01,
         -2.5586e-01,  1.4275e+00],
        [-2.1384e+00,  8.9016e-01,  8.3122e-01,  9.2095e-01,  1.0430e+00,
         -2.1155e+00, -1.5843e-41,  1.1344e-41,  4.5192e-42, -1.1269e+00,
         -1.0201e+00, -3.2771e+00],
        [-2.3129e+00,  9.7856e-01,  1.0434e+00,  1.0052e+00,  8.4791e-01,
         -2.3529e+00,  1.5874e-41,  6.4712e-42, -1.8623e-42, -1.1918e+00,
         -1.1351e+00, -3.5167e+00]])), ('fc2Root.weight', tensor([[-5.5943, -5.2698,  2.1136,  2.2240]]))])
---------------plt.close(fig)    # close the figure window-------------------------------------------------------------------------------------------

 Optimizer's state_dict:
CRITERION = MSELoss()
OPTIMIZER = Adam (
Parameter Group 0
    amsgrad: False
    betas: (0.9, 0.999)
    eps: 1e-08
    lr: 0.001
    weight_decay: 0
)
Tempo di training 51.25244188308716


state	{139699664944896: {'step': 20000, 'exp_avg': tensor([[-4.9972e-02, -1.0139e-02, -2.8251e-04, -3.9798e-04, -1.1911e-43,
         -4.2789e-02, -7.6319e-17,  3.1529e-43, -6.7963e-43, -1.0405e-04,
         -1.8773e-03, -4.8553e-02],
        [-3.4330e-02, -1.0398e-02, -2.6110e-04, -3.8233e-04, -4.9045e-44,
         -3.2451e-02, -2.8727e-43,  4.8345e-43,  3.0128e-43, -1.0034e-04,
         -1.8147e-03, -4.0043e-02],
        [ 1.6122e-01,  7.5644e-01, -4.2462e-02,  1.2875e-02, -5.3950e-43,
          2.2818e-01, -1.7516e-43,  3.4332e-43, -4.1338e-43,  3.5577e-03,
          6.7510e-02,  2.2568e-01],
        [-2.5260e-02,  9.3598e-03,  4.3686e-02, -6.5136e-04,  8.1093e-16,
         -3.2402e-02,  4.1338e-43,  2.5924e-43,  3.4332e-43, -1.5292e-04,
          2.9637e-03, -2.9086e-02]]), 'exp_avg_sq': tensor([[4.7578e+00, 6.9249e-02, 2.9188e-03, 5.4116e-05, 4.2513e-12, 4.7579e+00,
         1.5983e-10, 7.9467e-12, 2.1958e-14, 2.9587e-06, 4.1756e-03, 4.5180e+00],
        [3.3422e+00, 6.4726e-02, 2.8026e-03, 6.0392e-05, 1.2733e-11, 3.3423e+00,
         7.9742e-12, 4.8426e-12, 5.6331e-12, 2.8772e-06, 3.8411e-03, 3.1503e+00],
        [4.4819e+01, 3.0174e+02, 1.4419e+01, 4.7846e-02, 4.0373e-13, 4.4821e+01,
         2.7490e-13, 6.7424e-12, 2.4867e-14, 2.4244e-03, 4.1368e+00, 2.5896e+01],
        [4.6787e+00, 1.7327e-01, 1.3419e+00, 2.9281e-04, 1.5743e-10, 4.6784e+00,
         8.0734e-13, 1.2512e-13, 9.6573e-12, 1.0645e-05, 1.1025e-02, 4.5856e+00]])}, 139699664942736: {'step': 20000, 'exp_avg': tensor([[-0.2690, -0.2150,  0.3899, -0.2301]]), 'exp_avg_sq': tensor([[ 17.4601,  15.0666, 273.5276,  21.9570]])}, 139699664941936: {'step': 20000, 'exp_avg': tensor([[ 1.3049e-04, -2.1423e-03, -3.1555e-02, -1.3032e-03, -4.7499e-03,
          5.5889e-04,  1.4574e-43,  5.6052e-45,  6.1657e-44, -3.5837e-04,
         -1.2502e-03,  7.1933e-06],
        [ 2.7822e-02, -1.5636e-02, -2.7834e-02, -4.3681e-02, -1.3472e-01,
          2.6851e-02,  1.9618e-44,  7.5670e-44,  7.7071e-44,  1.3742e-02,
          1.4610e-03, -8.3523e-05],
        [ 4.7608e-03,  2.0908e-02,  5.2241e-02,  3.4327e-02,  5.7866e-02,
          5.0447e-03, -2.0179e-43,  1.4574e-43,  6.1657e-44,  1.0514e-02,
         -6.5610e-03,  3.9973e-03],
        [ 3.9837e-03,  2.2518e-02,  5.7059e-02,  3.6568e-02,  5.7796e-02,
          3.4883e-03,  2.0179e-43,  8.9683e-44, -3.3631e-44,  1.0988e-02,
         -7.6670e-03,  3.3585e-03]]), 'exp_avg_sq': tensor([[1.1956e-03, 1.4313e-02, 3.0088e-01, 3.3904e-03, 5.7687e-03, 1.1986e-03,
         2.9375e-13, 1.1275e-13, 1.6981e-17, 7.8075e-05, 5.8735e-04, 7.0511e-06],
        [1.2921e-01, 1.8964e+00, 2.7990e+00, 1.6120e+01, 4.3852e+01, 1.2914e-01,
         2.1549e-15, 6.4736e-14, 2.1844e-13, 9.6043e-02, 2.8747e-03, 2.3337e-03],
        [3.0969e-02, 6.1254e-01, 2.1183e+00, 6.3650e+00, 4.0445e+00, 3.0970e-02,
         4.6869e-13, 3.1470e-13, 1.1339e-15, 8.7754e-03, 7.7216e-03, 6.0648e-03],
        [3.4269e-02, 6.7801e-01, 2.3449e+00, 7.0459e+00, 4.4772e+00, 3.4269e-02,
         4.4937e-13, 1.3192e-15, 3.9585e-14, 9.7098e-03, 8.5627e-03, 6.7019e-03]])}, 139699664942336: {'step': 20000, 'exp_avg': tensor([[ 0.0118, -0.0009, -0.0655, -0.0736]]), 'exp_avg_sq': tensor([[1.8160e-02, 5.3625e-03, 6.0422e+00, 6.2659e+00]])}}param_groups	[{'lr': 0.001, 'betas': (0.9, 0.999), 'eps': 1e-08, 'weight_decay': 0, 'amsgrad': False, 'params': [139699664944896, 139699664942736, 139699664941936, 139699664942336]}]

Average Error Test Dataset= 3.67267271677653
RMSE Train Dataset = [19.846938566413318, 16.22002474969935, 12.253327832419648, 7.711061424488611, 5.065477790552638, 4.854511341524524, 4.794015435898573, 4.769081538163441, 4.750887938375618, 4.739688925213139]
RMSE Test Dataset = [31.825128533162967, 24.249779769054733, 10.393350940597266, 7.115376716339739, 5.512367215795528, 5.374863733737815, 5.775624440439488, 5.6099266694795995, 5.379730272303099, 5.247789735105803]
Number of epochs 20000

pred =154.17340087890625
true = tensor([152.8000])
difference = tensor([1.3734])


pred =139.1504669189453
true = tensor([143.3000])
difference = tensor([4.1495])


pred =158.40090942382812
true = tensor([164.])
difference = tensor([5.5991])


pred =-77.28484344482422
true = tensor([-88.6000])
difference = tensor([11.3152])


pred =160.06668090820312
true = tensor([159.7000])
difference = tensor([0.3667])


pred =163.01153564453125
true = tensor([157.0400])
difference = tensor([5.9715])


pred =163.46554565429688
true = tensor([163.8400])
difference = tensor([0.3745])


pred =113.77787780761719
true = tensor([117.6000])
difference = tensor([3.8221])


pred =147.54832458496094
true = tensor([148.2000])
difference = tensor([0.6517])


pred =157.25840759277344
true = tensor([155.7000])
difference = tensor([1.5584])


pred =-24.25568199157715
true = tensor([-11.7000])
difference = tensor([12.5557])


pred =163.53878784179688
true = tensor([162.])
difference = tensor([1.5388])


pred =97.62528991699219
true = tensor([98.4000])
difference = tensor([0.7747])


pred =158.49337768554688
true = tensor([163.])
difference = tensor([4.5066])


pred =159.56777954101562
true = tensor([160.1000])
difference = tensor([0.5322])


