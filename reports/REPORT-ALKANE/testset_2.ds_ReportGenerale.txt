
+++++++++++++++++++++++++++++++++++REPORT+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

LISTA TEST FILE  
dict_keys(['molecule117.ct', 'molecule015.ct', 'molecule090.ct', 'molecule104.ct', 'molecule101.ct', 'molecule049.ct', 'molecule088.ct', 'molecule146.ct', 'molecule021.ct', 'molecule059.ct', 'molecule114.ct', 'molecule126.ct', 'molecule010.ct', 'molecule066.ct', 'molecule085.ct', 'molecule023.ct', 'molecule053.ct', 'molecule097.ct', 'molecule108.ct', 'molecule056.ct', 'molecule026.ct', 'molecule083.ct', 'molecule069.ct', 'molecule135.ct', 'molecule079.ct', 'molecule031.ct', 'molecule029.ct', 'molecule012.ct', 'molecule109.ct', 'molecule092.ct', 'molecule125.ct', 'molecule017.ct', 'molecule142.ct', 'molecule013.ct', 'molecule144.ct', 'molecule115.ct', 'molecule100.ct', 'molecule016.ct', 'molecule014.ct', 'molecule086.ct', 'molecule020.ct', 'molecule037.ct', 'molecule074.ct', 'molecule038.ct', 'molecule024.ct', 'molecule072.ct', 'molecule129.ct', 'molecule136.ct', 'molecule005.ct', 'molecule047.ct', 'molecule122.ct', 'molecule045.ct', 'molecule147.ct', 'molecule063.ct', 'molecule076.ct', 'molecule054.ct', 'molecule084.ct', 'molecule116.ct', 'molecule008.ct', 'molecule011.ct', 'molecule058.ct', 'molecule018.ct', 'molecule078.ct', 'molecule067.ct', 'molecule080.ct', 'molecule062.ct', 'molecule055.ct', 'molecule098.ct', 'molecule006.ct', 'molecule145.ct', 'molecule112.ct', 'molecule095.ct', 'molecule064.ct', 'molecule134.ct', 'molecule030.ct', 'molecule091.ct', 'molecule127.ct', 'molecule051.ct', 'molecule138.ct', 'molecule041.ct', 'molecule096.ct', 'molecule061.ct', 'molecule043.ct', 'molecule105.ct', 'molecule035.ct', 'molecule019.ct', 'molecule034.ct', 'molecule001.ct', 'molecule082.ct', 'molecule057.ct', 'molecule039.ct', 'molecule131.ct', 'molecule102.ct', 'molecule137.ct', 'molecule089.ct', 'molecule044.ct', 'molecule133.ct', 'molecule130.ct', 'molecule110.ct', 'molecule113.ct', 'molecule141.ct', 'molecule103.ct', 'molecule143.ct', 'molecule032.ct', 'molecule042.ct', 'molecule132.ct', 'molecule065.ct', 'molecule123.ct', 'molecule003.ct', 'molecule007.ct', 'molecule118.ct', 'molecule070.ct', 'molecule048.ct', 'molecule150.ct', 'molecule040.ct', 'molecule050.ct', 'molecule128.ct', 'molecule081.ct', 'molecule025.ct', 'molecule033.ct', 'molecule068.ct', 'molecule046.ct', 'molecule075.ct', 'molecule099.ct', 'molecule111.ct', 'molecule140.ct', 'molecule028.ct', 'molecule073.ct', 'molecule077.ct', 'molecule093.ct', 'molecule009.ct', 'molecule121.ct', 'molecule060.ct', 'molecule052.ct', 'molecule027.ct'])


LISTA VALIDATION FILE  
dict_keys(['molecule106.ct', 'molecule071.ct', 'molecule087.ct', 'molecule002.ct', 'molecule139.ct', 'molecule119.ct', 'molecule148.ct', 'molecule036.ct', 'molecule107.ct', 'molecule124.ct', 'molecule004.ct', 'molecule149.ct', 'molecule022.ct', 'molecule120.ct', 'molecule094.ct'])


Our model: 

RegressionGm(
  (fc1): Linear(in_features=12, out_features=4, bias=False)
  (fc2): Linear(in_features=4, out_features=1, bias=False)
  (LRelu): SELU()
  (fc1Root): Linear(in_features=12, out_features=4, bias=False)
  (fc2Root): Linear(in_features=4, out_features=1, bias=False)
  (LReluRoot): SELU()
)
Printing children
------------------------------[Linear(in_features=12, out_features=4, bias=False), Linear(in_features=4, out_features=1, bias=False), SELU(), Linear(in_features=12, out_features=4, bias=False), Linear(in_features=4, out_features=1, bias=False), SELU()]

Printing Modules
------------------------------[RegressionGm(
  (fc1): Linear(in_features=12, out_features=4, bias=False)
  (fc2): Linear(in_features=4, out_features=1, bias=False)
  (LRelu): SELU()
  (fc1Root): Linear(in_features=12, out_features=4, bias=False)
  (fc2Root): Linear(in_features=4, out_features=1, bias=False)
  (LReluRoot): SELU()
), Linear(in_features=12, out_features=4, bias=False), Linear(in_features=4, out_features=1, bias=False), SELU(), Linear(in_features=12, out_features=4, bias=False), Linear(in_features=4, out_features=1, bias=False), SELU()]
The state dict keys: 

odict_keys(['fc1.weight', 'fc2.weight', 'fc1Root.weight', 'fc2Root.weight'])Models state_dict:fc1.weight	torch.Size([4, 12])fc2.weight	torch.Size([1, 4])fc1Root.weight	torch.Size([4, 12])fc2Root.weight	torch.Size([1, 4])OrderedDict([('fc1.weight', tensor([[ 4.3212e-01,  4.1176e-01,  5.5227e-01,  6.8936e-01, -5.3604e-07,
          4.2355e-01, -1.5695e-43, -1.7808e-09, -3.6294e-43,  9.0753e-02,
          1.8611e-01, -8.7484e-03],
        [-3.1242e-01, -6.7250e-01,  2.8202e-01, -8.1965e-02, -1.4714e-43,
         -3.1243e-01, -1.8034e-11,  9.8214e-10,  5.0830e-09, -9.6840e-03,
         -2.5740e-01, -2.8280e-01],
        [ 3.9201e-01,  4.5450e-01,  5.1040e-01,  6.4092e-01, -3.3331e-08,
          3.8740e-01, -5.2791e-07,  4.9746e-13, -2.5083e-43,  8.4384e-02,
          1.7185e-01, -1.1641e-02],
        [-1.3654e-02, -1.4773e-02,  1.8356e-02, -4.5580e-02,  1.1729e-42,
         -1.3654e-02,  7.7071e-44, -6.0113e-05, -1.6395e-43, -5.6948e-03,
          2.4587e-03,  1.6094e-02]])), ('fc2.weight', tensor([[ 1.1254, -0.7192,  1.0466, -0.0616]])), ('fc1Root.weight', tensor([[ 4.1151e+00, -1.7147e+00, -2.7487e-01, -8.1467e-01, -2.1241e-02,
          4.1126e+00,  7.8473e-44, -5.8897e-42,  4.6523e-43, -9.5636e-01,
          3.1078e-01,  3.8514e-01],
        [ 4.4591e+00, -1.8610e+00, -4.4669e-01, -2.4720e-01, -2.1037e-03,
          4.4460e+00,  5.6276e-42,  1.1715e-41,  9.7811e-43,  3.6386e-01,
         -1.2223e+00,  6.7527e-01],
        [ 3.8095e+00, -4.8504e-01, -2.4261e-01, -2.0354e-01, -7.8494e-01,
          3.7926e+00, -1.1838e-41,  7.2447e-42,  7.5138e-42, -8.9367e-02,
         -9.7739e-01,  3.1287e-01],
        [-9.3803e-01,  1.3575e+00,  1.8501e+00,  1.8442e+00,  2.2035e+00,
         -9.4325e-01,  9.3943e-42,  1.4638e-41, -1.0937e-41, -1.0502e+00,
          6.4962e-01, -7.1780e-01]])), ('fc2Root.weight', tensor([[-5.9733, -6.4570, -5.8836,  2.7206]]))])
---------------plt.close(fig)    # close the figure window-------------------------------------------------------------------------------------------

 Optimizer's state_dict:
CRITERION = MSELoss()
OPTIMIZER = Adam (
Parameter Group 0
    amsgrad: False
    betas: (0.9, 0.999)
    eps: 1e-08
    lr: 0.001
    weight_decay: 0
)
Tempo di training 127.74466943740845


state	{139947565831584: {'step': 50000, 'exp_avg': tensor([[ 2.9027e-01,  9.1459e-01,  2.1509e-01, -4.6316e-03,  1.2701e-08,
          2.8566e-01, -7.7071e-44,  4.3756e-11, -1.8918e-43, -1.5823e-03,
          1.5157e-01,  1.5918e-01],
        [-6.4939e-02, -4.4336e-02, -1.1297e-01,  7.4019e-04, -7.7071e-44,
         -6.4943e-02,  5.7431e-13, -2.7959e-11, -2.1072e-10,  2.6579e-04,
         -1.6448e-02, -6.2076e-02],
        [ 2.6466e-01,  8.8903e-01,  1.9832e-01, -4.3859e-03,  1.5348e-09,
          2.6218e-01,  1.9700e-08, -5.8917e-15, -1.3312e-43, -1.4774e-03,
          1.4030e-01,  1.4615e-01],
        [-2.3616e-02, -7.3594e-02, -1.6529e-02,  3.6185e-04,  6.2358e-43,
         -2.3616e-02,  3.5032e-44,  2.0482e-06, -7.7071e-44,  1.3170e-04,
         -1.2902e-02, -1.4727e-02]]), 'exp_avg_sq': tensor([[6.4528e+01, 2.6860e+02, 1.2483e+01, 3.0095e-02, 1.8700e-10, 6.4528e+01,
         1.3847e-25, 1.9078e-10, 3.5188e-25, 3.4785e-03, 8.4238e+00, 3.2871e+01],
        [6.1458e+00, 5.3924e-01, 1.9036e+00, 7.4464e-04, 2.1118e-25, 6.1458e+00,
         2.1156e-10, 2.3157e-10, 2.5229e-10, 9.0725e-05, 6.9457e-02, 5.6642e+00],
        [5.5713e+01, 2.3190e+02, 1.0777e+01, 2.5984e-02, 2.4821e-10, 5.5713e+01,
         2.6247e-10, 2.0302e-10, 2.5559e-27, 3.0034e-03, 7.2730e+00, 2.8380e+01],
        [4.7312e-01, 1.5428e+00, 4.9506e-02, 1.7738e-04, 3.3063e-25, 4.7312e-01,
         3.2328e-29, 2.7885e-10, 7.0936e-26, 2.1253e-05, 5.1780e-02, 2.5194e-01]])}, 139947566926096: {'step': 50000, 'exp_avg': tensor([[ 0.6944, -0.3079,  0.6887, -0.0200]]), 'exp_avg_sq': tensor([[2.0575e+02, 7.1012e+01, 2.0328e+02, 1.9478e-01]])}, 139947573247424: {'step': 50000, 'exp_avg': tensor([[ 6.5337e-03,  1.7132e-02,  2.5372e-03,  1.9155e-02,  8.8487e-02,
          6.4895e-03,  5.6052e-45, -9.1084e-44,  7.0065e-45,  7.6082e-03,
         -6.5603e-04,  7.5865e-06],
        [-2.6773e-04, -1.8251e-03, -1.7458e-02, -7.1567e-02, -7.4840e-03,
         -4.9438e-04,  9.1084e-44,  2.0319e-43,  1.9618e-44, -1.0974e-03,
         -1.6949e-03, -1.9364e-03],
        [-9.7316e-03, -4.0585e-02, -7.7186e-02, -2.5145e-01,  2.6782e-03,
         -1.0027e-02, -2.0319e-43,  1.1911e-43,  1.1911e-43,  5.2608e-04,
         -1.3093e-02, -1.0471e-02],
        [ 1.3278e-02,  3.6899e-02,  1.0278e-01,  1.9345e-01,  9.2138e-03,
          1.3187e-02,  1.6115e-43,  2.4523e-43, -1.8918e-43,  9.3956e-04,
          1.2020e-02,  1.0300e-02]]), 'exp_avg_sq': tensor([[3.6014e-02, 2.4574e-01, 4.1646e-01, 2.3561e-01, 7.7876e+00, 3.6014e-02,
         1.8570e-28, 4.3756e-28, 3.1920e-28, 2.9729e-02, 3.2970e-04, 6.1925e-06],
        [1.2115e-01, 8.2742e-01, 1.2790e+00, 3.7989e+00, 2.0357e+01, 1.2115e-01,
         2.3809e-27, 2.9956e-26, 4.4580e-28, 9.6010e-02, 1.5796e-03, 1.1171e-03],
        [2.2868e-01, 3.0524e+00, 1.6137e+01, 3.9731e+01, 1.2095e-02, 2.2868e-01,
         2.8808e-26, 1.6864e-26, 1.7497e-26, 3.2010e-04, 2.1446e-01, 1.8901e-01],
        [7.1195e-02, 6.4840e-01, 2.2435e+00, 6.6030e+00, 3.6796e+00, 7.1194e-02,
         2.0854e-26, 4.3903e-26, 1.4295e-26, 1.7700e-02, 1.9312e-02, 1.5613e-02]])}, 139947573247264: {'step': 50000, 'exp_avg': tensor([[-0.0078, -0.0081,  0.0008,  0.1436]]), 'exp_avg_sq': tensor([[1.6961e-02, 1.3953e-03, 2.4209e-03, 1.9915e+01]])}}param_groups	[{'lr': 0.001, 'betas': (0.9, 0.999), 'eps': 1e-08, 'weight_decay': 0, 'amsgrad': False, 'params': [139947565831584, 139947566926096, 139947573247424, 139947573247264]}]

Average Error Test Dataset= 3.137417538960775
RMSE Train Dataset = [14.203819534895633, 4.835970630439825, 4.6744679683738894, 4.615846597340586, 4.594020290597324, 4.582685575083471, 4.578449953804474, 4.576360056350073, 4.575860931604113, 4.573211428701547]
RMSE Test Dataset = [15.100368651885674, 4.232685272794361, 4.043642144629423, 3.7265069665509722, 3.39581941629066, 3.8160916279762405, 3.5109334201220315, 3.6373733603334397, 3.7539974523097697, 3.9295224710626018]
Number of epochs 50000

pred =156.1510009765625
true = tensor([152.8000])
difference = tensor([3.3510])


pred =138.23731994628906
true = tensor([143.3000])
difference = tensor([5.0627])


pred =160.39276123046875
true = tensor([164.])
difference = tensor([3.6072])


pred =-96.68415069580078
true = tensor([-88.6000])
difference = tensor([8.0842])


pred =160.66363525390625
true = tensor([159.7000])
difference = tensor([0.9636])


pred =162.29397583007812
true = tensor([157.0400])
difference = tensor([5.2540])


pred =164.16250610351562
true = tensor([163.8400])
difference = tensor([0.3225])


pred =113.3357162475586
true = tensor([117.6000])
difference = tensor([4.2643])


pred =147.18019104003906
true = tensor([148.2000])
difference = tensor([1.0198])


pred =158.0525360107422
true = tensor([155.7000])
difference = tensor([2.3525])


pred =-17.767221450805664
true = tensor([-11.7000])
difference = tensor([6.0672])


pred =162.10472106933594
true = tensor([162.])
difference = tensor([0.1047])


pred =98.86444091796875
true = tensor([98.4000])
difference = tensor([0.4644])


pred =158.0457000732422
true = tensor([163.])
difference = tensor([4.9543])


pred =158.9112548828125
true = tensor([160.1000])
difference = tensor([1.1888])


