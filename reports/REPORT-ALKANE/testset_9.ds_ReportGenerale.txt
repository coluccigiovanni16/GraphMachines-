
+++++++++++++++++++++++++++++++++++REPORT+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

LISTA TEST FILE  
dict_keys(['molecule072.ct', 'molecule129.ct', 'molecule136.ct', 'molecule005.ct', 'molecule047.ct', 'molecule122.ct', 'molecule045.ct', 'molecule147.ct', 'molecule063.ct', 'molecule076.ct', 'molecule054.ct', 'molecule084.ct', 'molecule116.ct', 'molecule008.ct', 'molecule011.ct', 'molecule058.ct', 'molecule018.ct', 'molecule078.ct', 'molecule067.ct', 'molecule080.ct', 'molecule062.ct', 'molecule055.ct', 'molecule098.ct', 'molecule006.ct', 'molecule145.ct', 'molecule112.ct', 'molecule095.ct', 'molecule064.ct', 'molecule134.ct', 'molecule030.ct', 'molecule091.ct', 'molecule127.ct', 'molecule051.ct', 'molecule138.ct', 'molecule041.ct', 'molecule096.ct', 'molecule061.ct', 'molecule043.ct', 'molecule105.ct', 'molecule035.ct', 'molecule019.ct', 'molecule034.ct', 'molecule001.ct', 'molecule082.ct', 'molecule057.ct', 'molecule039.ct', 'molecule131.ct', 'molecule102.ct', 'molecule137.ct', 'molecule089.ct', 'molecule044.ct', 'molecule133.ct', 'molecule130.ct', 'molecule110.ct', 'molecule113.ct', 'molecule141.ct', 'molecule103.ct', 'molecule143.ct', 'molecule032.ct', 'molecule042.ct', 'molecule132.ct', 'molecule065.ct', 'molecule123.ct', 'molecule003.ct', 'molecule007.ct', 'molecule118.ct', 'molecule070.ct', 'molecule048.ct', 'molecule150.ct', 'molecule040.ct', 'molecule050.ct', 'molecule128.ct', 'molecule081.ct', 'molecule025.ct', 'molecule033.ct', 'molecule068.ct', 'molecule046.ct', 'molecule075.ct', 'molecule099.ct', 'molecule111.ct', 'molecule140.ct', 'molecule028.ct', 'molecule073.ct', 'molecule077.ct', 'molecule093.ct', 'molecule009.ct', 'molecule121.ct', 'molecule060.ct', 'molecule052.ct', 'molecule027.ct', 'molecule106.ct', 'molecule071.ct', 'molecule087.ct', 'molecule002.ct', 'molecule139.ct', 'molecule119.ct', 'molecule148.ct', 'molecule036.ct', 'molecule107.ct', 'molecule124.ct', 'molecule004.ct', 'molecule149.ct', 'molecule022.ct', 'molecule120.ct', 'molecule094.ct', 'molecule117.ct', 'molecule015.ct', 'molecule090.ct', 'molecule104.ct', 'molecule101.ct', 'molecule049.ct', 'molecule088.ct', 'molecule146.ct', 'molecule021.ct', 'molecule059.ct', 'molecule114.ct', 'molecule126.ct', 'molecule010.ct', 'molecule066.ct', 'molecule085.ct', 'molecule023.ct', 'molecule053.ct', 'molecule097.ct', 'molecule108.ct', 'molecule056.ct', 'molecule026.ct', 'molecule083.ct', 'molecule069.ct', 'molecule135.ct', 'molecule079.ct', 'molecule031.ct', 'molecule029.ct', 'molecule012.ct', 'molecule109.ct', 'molecule092.ct'])
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

LISTA VALIDATION FILE  
dict_keys(['molecule125.ct', 'molecule017.ct', 'molecule142.ct', 'molecule013.ct', 'molecule144.ct', 'molecule115.ct', 'molecule100.ct', 'molecule016.ct', 'molecule014.ct', 'molecule086.ct', 'molecule020.ct', 'molecule037.ct', 'molecule074.ct', 'molecule038.ct', 'molecule024.ct'])


Our model: 

RegressionGm(
  (fc1): Linear(in_features=12, out_features=4, bias=False)
  (fc2): Linear(in_features=4, out_features=1, bias=False)
  (LRelu): SELU()
  (fc1Root): Linear(in_features=12, out_features=4, bias=False)
  (fc2Root): Linear(in_features=4, out_features=1, bias=False)
  (LReluRoot): SELU()
)
Printing children
------------------------------[Linear(in_features=12, out_features=4, bias=False), Linear(in_features=4, out_features=1, bias=False), SELU(), Linear(in_features=12, out_features=4, bias=False), Linear(in_features=4, out_features=1, bias=False), SELU()]

Printing Modules
------------------------------[RegressionGm(
  (fc1): Linear(in_features=12, out_features=4, bias=False)
  (fc2): Linear(in_features=4, out_features=1, bias=False)
  (LRelu): SELU()
  (fc1Root): Linear(in_features=12, out_features=4, bias=False)
  (fc2Root): Linear(in_features=4, out_features=1, bias=False)
  (LReluRoot): SELU()
), Linear(in_features=12, out_features=4, bias=False), Linear(in_features=4, out_features=1, bias=False), SELU(), Linear(in_features=12, out_features=4, bias=False), Linear(in_features=4, out_features=1, bias=False), SELU()]
The state dict keys: 

odict_keys(['fc1.weight', 'fc2.weight', 'fc1Root.weight', 'fc2Root.weight'])Models state_dict:fc1.weight	torch.Size([4, 12])fc2.weight	torch.Size([1, 4])fc1Root.weight	torch.Size([4, 12])fc2Root.weight	torch.Size([1, 4])OrderedDict([('fc1.weight', tensor([[ 3.7116e-01,  6.9004e-01,  7.0684e-01,  7.9518e-01, -8.0154e-43,
          7.3805e-01,  1.4630e-42, -3.3491e-43, -6.6842e-43,  7.8135e-01,
          3.7373e-01,  5.5974e-01],
        [-1.7998e-02, -8.9920e-01, -1.1846e-01, -5.4945e-02,  1.1140e-42,
         -2.2073e-01,  1.8861e-42,  2.4523e-43,  1.4812e-42, -2.7945e-02,
         -2.2083e-01,  2.3258e-01],
        [-6.5063e-02, -9.3353e-01,  1.7930e-01, -1.5627e-01,  2.9848e-43,
         -1.1926e-01, -1.2528e-42,  2.5083e-43, -7.8613e-43, -5.5674e-02,
         -2.1355e-01,  1.1157e-01],
        [ 6.8747e-01,  4.3155e-01,  5.4814e-01,  1.0601e+00, -8.9543e-43,
          6.6054e-01, -5.8855e-44,  1.8301e-42,  4.4141e-43,  1.1597e+00,
          4.7446e-01,  7.9705e-01]])), ('fc2.weight', tensor([[ 0.7116, -0.9276, -0.9013,  0.9816]])), ('fc1Root.weight', tensor([[-2.1455e+00,  8.5453e-01,  8.0226e-01,  9.2066e-01,  3.8932e-01,
         -2.2145e+00, -2.2267e-42,  5.4987e-42,  6.9476e-42,  1.4965e-01,
         -1.5731e+00, -2.7768e+00],
        [ 7.1960e+00, -8.5882e-01, -5.3565e-01, -2.0435e+00, -2.6516e-01,
          7.2728e+00, -2.4495e-42,  8.5227e-42, -5.5996e-42,  2.6638e+00,
         -1.5206e+00,  1.2074e+00],
        [-1.9223e+00,  7.6996e-01,  7.3221e-01,  7.6673e-01,  8.9383e-01,
         -1.8279e+00,  3.7345e-42, -5.6879e-42, -1.0496e-42,  2.2986e-01,
         -1.2532e+00, -2.3503e+00],
        [-1.7808e+00,  6.7455e-01,  6.7194e-01,  5.9600e-01,  5.9077e-01,
         -1.7447e+00, -1.0803e-41, -2.3584e-42,  1.4461e-42,  1.9040e-01,
         -1.2969e+00, -2.2719e+00]])), ('fc2Root.weight', tensor([[ 1.7499, -6.1444,  1.8119,  1.9149]]))])
---------------plt.close(fig)    # close the figure window-------------------------------------------------------------------------------------------

 Optimizer's state_dict:
CRITERION = MSELoss()
OPTIMIZER = Adam (
Parameter Group 0
    amsgrad: False
    betas: (0.9, 0.999)
    eps: 1e-08
    lr: 0.001
    weight_decay: 0
)
Tempo di training 25.577404260635376


state	{140163830304672: {'step': 10000, 'exp_avg': tensor([[-1.1560e-01, -2.8638e-02,  2.0363e-01,  1.1703e-02, -2.4523e-43,
         -3.6581e-05,  4.5542e-43, -1.0510e-43, -2.0319e-43,  2.6571e-02,
          1.4053e-01,  5.4411e-01],
        [ 1.3027e-01, -4.0117e-02,  1.9093e-04,  3.6955e-05,  3.4332e-43,
          6.6337e-02,  5.8154e-43,  7.7071e-44,  4.5542e-43, -1.1936e-05,
         -1.0204e-02,  1.2292e-01],
        [ 8.4166e-02, -1.6251e-01, -7.8701e-01, -6.5731e-05,  9.1084e-44,
          6.7072e-02, -3.8536e-43,  7.7071e-44, -2.4523e-43,  2.3763e-05,
         -4.7951e-02,  5.1196e-02],
        [-1.0418e-01, -2.0323e-01,  1.4642e-01,  4.3597e-03, -2.7325e-43,
         -1.1266e-01, -1.9618e-44,  5.6753e-43,  1.3312e-43,  6.2411e-02,
          1.8077e-01,  7.5803e-01]]), 'exp_avg_sq': tensor([[4.8945e+00, 1.0155e+02, 6.2555e+00, 5.3446e-02, 3.8624e-08, 4.9195e+00,
         1.0816e-07, 7.3296e-09, 3.8174e-08, 2.8178e-03, 1.5181e+00, 2.4066e+00],
        [1.4264e+00, 1.9037e-01, 5.1505e-03, 8.2940e-06, 8.1503e-08, 1.4209e+00,
         6.7238e-09, 2.3658e-09, 1.0573e-09, 6.5857e-06, 3.5162e-02, 1.2436e+00],
        [1.2843e+00, 3.4248e-01, 8.2924e+00, 7.5619e-06, 4.7190e-08, 1.2824e+00,
         1.6407e-07, 2.6955e-08, 1.0128e-10, 2.5614e-06, 3.8503e-02, 1.1704e+00],
        [9.4773e+00, 1.8878e+02, 1.1741e+01, 9.5549e-02, 3.9746e-11, 9.4752e+00,
         2.8014e-07, 5.1774e-08, 2.5046e-07, 7.6347e-03, 2.9113e+00, 4.5977e+00]])}, 140163891657536: {'step': 10000, 'exp_avg': tensor([[-0.4261, -0.1304, -0.2846, -0.3394]]), 'exp_avg_sq': tensor([[466.6860,  29.4980,  31.7061, 307.1359]])}, 140163891657616: {'step': 10000, 'exp_avg': tensor([[ 9.8840e-02,  1.3968e-03,  3.2603e-02,  2.4371e-01,  8.4860e-02,
          9.7794e-02, -3.3631e-44,  8.9683e-44,  1.1771e-43,  1.1376e-01,
         -3.8176e-02,  1.2328e-02],
        [-4.8508e+00,  3.2324e+00, -8.5173e-02, -4.3111e-01,  5.5772e-02,
         -4.8497e+00, -4.7644e-44,  1.3172e-43, -8.9683e-44,  9.9012e-02,
          6.2427e-01,  4.9153e-02],
        [ 2.2653e-01,  3.1586e-01,  3.5502e-01,  2.4957e-01,  9.5340e-02,
          2.2796e-01,  6.1657e-44, -8.9683e-44, -1.9618e-44,  1.1892e-01,
          5.6380e-02,  1.8893e-02],
        [ 1.7027e-01,  5.9001e-03,  4.7292e-02,  3.4783e-01,  9.5339e-02,
          1.7082e-01, -1.7376e-43, -4.7644e-44,  3.3631e-44,  1.2485e-01,
         -3.1225e-02,  4.7751e-02]]), 'exp_avg_sq': tensor([[3.1171e-01, 2.9053e+00, 6.7764e+00, 1.4112e+01, 6.5682e+00, 3.1120e-01,
         3.9037e-10, 1.9045e-09, 1.9185e-09, 4.4687e-02, 9.8464e-02, 1.1338e-01],
        [3.2555e+01, 1.1864e+01, 4.3789e-01, 5.3597e-01, 6.6012e-01, 3.2540e+01,
         2.4967e-11, 3.6565e-10, 3.2166e-09, 5.6368e-02, 9.2337e-01, 1.1920e-01],
        [9.5527e-01, 7.5093e+00, 1.7178e+01, 3.5689e+01, 1.6039e+01, 9.5663e-01,
         2.0052e-12, 3.7242e-11, 4.8193e-10, 1.3999e-01, 2.3238e-01, 2.6747e-01],
        [5.9886e-01, 4.6647e+00, 1.0666e+01, 2.2057e+01, 1.0061e+01, 5.9926e-01,
         1.9718e-09, 2.6262e-09, 7.4255e-10, 7.9236e-02, 1.4860e-01, 1.6917e-01]])}, 140163830329168: {'step': 10000, 'exp_avg': tensor([[-1.6376, 11.6164, -1.5485, -1.5808]]), 'exp_avg_sq': tensor([[ 85.1420, 185.9924, 124.8582,  52.8243]])}}param_groups	[{'lr': 0.001, 'betas': (0.9, 0.999), 'eps': 1e-08, 'weight_decay': 0, 'amsgrad': False, 'params': [140163830304672, 140163891657536, 140163891657616, 140163830329168]}]

Average Error Test Dataset= 5.109142557779948
RMSE Train Dataset = [22.676356918295706, 21.75844997383021, 19.824025168389824, 18.004321109480394, 15.54076169458407, 13.298380496441098, 12.159210080038415, 10.715515538432788, 9.064053106409975, 7.358055693017209]
RMSE Test Dataset = [8.831257654228592, 8.580578951565155, 6.214215182701197, 5.2912403846110845, 4.856727001275344, 5.291790978280652, 5.422266877273647, 6.404535129183637, 6.271446966857447, 6.183616267034966]
Number of epochs 10000

pred =159.08694458007812
true = tensor([164.3100])
difference = tensor([5.2231])


pred =86.56008911132812
true = tensor([89.8000])
difference = tensor([3.2399])


pred =153.74008178710938
true = tensor([159.8700])
difference = tensor([6.1299])


pred =82.32672882080078
true = tensor([69.])
difference = tensor([13.3267])


pred =159.9862518310547
true = tensor([167.8000])
difference = tensor([7.8138])


pred =161.9573974609375
true = tensor([163.])
difference = tensor([1.0426])


pred =152.13009643554688
true = tensor([147.])
difference = tensor([5.1301])


pred =96.63508605957031
true = tensor([86.1000])
difference = tensor([10.5351])


pred =72.29301452636719
true = tensor([80.9000])
difference = tensor([8.6070])


pred =156.63186645507812
true = tensor([159.])
difference = tensor([2.3681])


pred =89.6400146484375
true = tensor([92.])
difference = tensor([2.3600])


pred =114.02638244628906
true = tensor([118.])
difference = tensor([3.9736])


pred =140.55349731445312
true = tensor([141.2000])
difference = tensor([0.6465])


pred =114.25164794921875
true = tensor([117.7000])
difference = tensor([3.4483])


pred =107.20758056640625
true = tensor([110.])
difference = tensor([2.7924])


