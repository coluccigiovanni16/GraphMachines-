
+++++++++++++++++++++++++++++++++++REPORT+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

LISTA TEST FILE  
dict_keys(['molecule072.ct', 'molecule129.ct', 'molecule136.ct', 'molecule005.ct', 'molecule047.ct', 'molecule122.ct', 'molecule045.ct', 'molecule147.ct', 'molecule063.ct', 'molecule076.ct', 'molecule054.ct', 'molecule084.ct', 'molecule116.ct', 'molecule008.ct', 'molecule011.ct', 'molecule058.ct', 'molecule018.ct', 'molecule078.ct', 'molecule067.ct', 'molecule080.ct', 'molecule062.ct', 'molecule055.ct', 'molecule098.ct', 'molecule006.ct', 'molecule145.ct', 'molecule112.ct', 'molecule095.ct', 'molecule064.ct', 'molecule134.ct', 'molecule030.ct', 'molecule091.ct', 'molecule127.ct', 'molecule051.ct', 'molecule138.ct', 'molecule041.ct', 'molecule096.ct', 'molecule061.ct', 'molecule043.ct', 'molecule105.ct', 'molecule035.ct', 'molecule019.ct', 'molecule034.ct', 'molecule001.ct', 'molecule082.ct', 'molecule057.ct', 'molecule039.ct', 'molecule131.ct', 'molecule102.ct', 'molecule137.ct', 'molecule089.ct', 'molecule044.ct', 'molecule133.ct', 'molecule130.ct', 'molecule110.ct', 'molecule113.ct', 'molecule141.ct', 'molecule103.ct', 'molecule143.ct', 'molecule032.ct', 'molecule042.ct', 'molecule132.ct', 'molecule065.ct', 'molecule123.ct', 'molecule003.ct', 'molecule007.ct', 'molecule118.ct', 'molecule070.ct', 'molecule048.ct', 'molecule150.ct', 'molecule040.ct', 'molecule050.ct', 'molecule128.ct', 'molecule081.ct', 'molecule025.ct', 'molecule033.ct', 'molecule068.ct', 'molecule046.ct', 'molecule075.ct', 'molecule099.ct', 'molecule111.ct', 'molecule140.ct', 'molecule028.ct', 'molecule073.ct', 'molecule077.ct', 'molecule093.ct', 'molecule009.ct', 'molecule121.ct', 'molecule060.ct', 'molecule052.ct', 'molecule027.ct', 'molecule106.ct', 'molecule071.ct', 'molecule087.ct', 'molecule002.ct', 'molecule139.ct', 'molecule119.ct', 'molecule148.ct', 'molecule036.ct', 'molecule107.ct', 'molecule124.ct', 'molecule004.ct', 'molecule149.ct', 'molecule022.ct', 'molecule120.ct', 'molecule094.ct', 'molecule117.ct', 'molecule015.ct', 'molecule090.ct', 'molecule104.ct', 'molecule101.ct', 'molecule049.ct', 'molecule088.ct', 'molecule146.ct', 'molecule021.ct', 'molecule059.ct', 'molecule114.ct', 'molecule126.ct', 'molecule010.ct', 'molecule066.ct', 'molecule085.ct', 'molecule023.ct', 'molecule053.ct', 'molecule097.ct', 'molecule108.ct', 'molecule056.ct', 'molecule026.ct', 'molecule083.ct', 'molecule069.ct', 'molecule135.ct', 'molecule079.ct', 'molecule031.ct', 'molecule029.ct', 'molecule012.ct', 'molecule109.ct', 'molecule092.ct'])


LISTA VALIDATION FILE  
dict_keys(['molecule125.ct', 'molecule017.ct', 'molecule142.ct', 'molecule013.ct', 'molecule144.ct', 'molecule115.ct', 'molecule100.ct', 'molecule016.ct', 'molecule014.ct', 'molecule086.ct', 'molecule020.ct', 'molecule037.ct', 'molecule074.ct', 'molecule038.ct', 'molecule024.ct'])


Our model: 

RegressionGm(
  (fc1): Linear(in_features=12, out_features=4, bias=False)
  (fc2): Linear(in_features=4, out_features=1, bias=False)
  (LRelu): SELU()
  (fc1Root): Linear(in_features=12, out_features=4, bias=False)
  (fc2Root): Linear(in_features=4, out_features=1, bias=False)
  (LReluRoot): SELU()
)
Printing children
------------------------------[Linear(in_features=12, out_features=4, bias=False), Linear(in_features=4, out_features=1, bias=False), SELU(), Linear(in_features=12, out_features=4, bias=False), Linear(in_features=4, out_features=1, bias=False), SELU()]

Printing Modules
------------------------------[RegressionGm(
  (fc1): Linear(in_features=12, out_features=4, bias=False)
  (fc2): Linear(in_features=4, out_features=1, bias=False)
  (LRelu): SELU()
  (fc1Root): Linear(in_features=12, out_features=4, bias=False)
  (fc2Root): Linear(in_features=4, out_features=1, bias=False)
  (LReluRoot): SELU()
), Linear(in_features=12, out_features=4, bias=False), Linear(in_features=4, out_features=1, bias=False), SELU(), Linear(in_features=12, out_features=4, bias=False), Linear(in_features=4, out_features=1, bias=False), SELU()]
The state dict keys: 

odict_keys(['fc1.weight', 'fc2.weight', 'fc1Root.weight', 'fc2Root.weight'])Models state_dict:fc1.weight	torch.Size([4, 12])fc2.weight	torch.Size([1, 4])fc1Root.weight	torch.Size([4, 12])fc2Root.weight	torch.Size([1, 4])OrderedDict([('fc1.weight', tensor([[-8.5662e-02,  5.1927e-04,  1.6944e-01,  8.4869e-02,  3.2968e-13,
         -8.5659e-02,  5.4848e-08, -5.2128e-43,  9.3685e-09, -5.8814e-03,
         -1.8229e-02,  4.4987e-02],
        [ 4.2054e-01, -4.1412e-01, -5.0909e-01, -6.4180e-01,  4.2039e-43,
          4.2323e-01, -2.2701e-43, -9.7811e-43, -1.9618e-07,  6.6430e-02,
          1.6053e-01, -4.3093e-02],
        [-3.4784e-01,  6.8670e-01, -2.8754e-01,  6.7240e-02, -8.1836e-43,
         -3.4783e-01, -1.1140e-42, -9.9492e-44,  3.1042e-12, -5.2500e-03,
         -2.8163e-01, -1.0017e-01],
        [ 4.4695e-01, -4.7063e-01, -5.4556e-01, -6.8917e-01,  4.8485e-43,
          4.5823e-01,  5.1288e-43, -1.7747e-13, -6.8664e-43,  7.1336e-02,
          1.7230e-01, -4.5884e-02]])), ('fc2.weight', tensor([[ 0.2545, -1.0117,  0.5201, -1.0865]])), ('fc1Root.weight', tensor([[-1.3582e+00, -1.1214e+00, -1.2251e+00, -1.2529e+00, -8.8588e-01,
         -1.3617e+00,  7.7506e-42, -6.9995e-42, -1.3382e-42, -1.4333e-01,
         -6.7592e-01, -1.3144e+00],
        [-1.4250e+00, -1.1953e+00, -1.1087e+00, -9.2144e-01, -1.2712e+00,
         -1.4022e+00,  5.8154e-43, -1.4585e-41,  3.5747e-42, -1.4764e-01,
         -7.1735e-01, -1.3918e+00],
        [ 3.8195e+00,  3.1118e-01,  2.6858e-01,  3.0658e-01,  7.8748e-01,
          3.8205e+00, -4.3749e-42,  1.5166e-41, -8.0603e-42, -9.7157e-01,
         -1.6383e+00, -5.9784e-01],
        [ 5.7967e+00,  2.6380e+00,  4.1342e-01,  3.5134e-01,  1.2775e-01,
          5.8983e+00, -1.6289e-41, -1.4963e-41,  1.4267e-41, -1.2873e+00,
         -1.8788e+00, -8.4040e-01]])), ('fc2Root.weight', tensor([[ 2.6214,  2.7700, -6.0624, -8.5927]]))])
---------------plt.close(fig)    # close the figure window-------------------------------------------------------------------------------------------

 Optimizer's state_dict:
CRITERION = MSELoss()
OPTIMIZER = Adam (
Parameter Group 0
    amsgrad: False
    betas: (0.9, 0.999)
    eps: 1e-08
    lr: 0.001
    weight_decay: 0
)
Tempo di training 124.20152139663696


state	{139626727060816: {'step': 50000, 'exp_avg': tensor([[-1.7883e-01,  4.0334e-01,  2.6326e-02,  8.7069e-04, -8.8761e-15,
         -1.7883e-01, -3.2819e-10, -2.7325e-43, -2.1982e-10, -3.4044e-04,
         -6.7779e-02, -1.2022e-01],
        [ 5.2879e-01, -1.2075e+00, -1.8531e-01, -4.7960e-03,  2.1720e-43,
          5.3021e-01, -1.1911e-43, -5.1147e-43,  5.4060e-09,  1.8799e-03,
          2.1398e-01,  3.3832e-01],
        [-1.2823e-01,  3.6323e-02,  6.1551e-02,  6.4785e-04, -4.2740e-43,
         -1.2822e-01, -5.8154e-43, -4.9045e-44, -1.3079e-13, -2.4601e-04,
         -1.4067e-02, -1.2637e-01],
        [ 5.6541e-01, -1.3104e+00, -1.9839e-01, -5.1087e-03,  2.4523e-43,
          5.7134e-01,  2.5924e-43,  4.8046e-15, -3.5733e-43,  2.0184e-03,
          2.2974e-01,  3.6353e-01]]), 'exp_avg_sq': tensor([[7.0990e+00, 2.1029e+01, 1.8344e-01, 9.4818e-04, 1.8936e-10, 7.0990e+00,
         2.5196e-10, 5.5783e-25, 1.8027e-10, 1.3699e-04, 6.8172e-01, 3.7825e+00],
        [5.9611e+01, 2.0203e+02, 1.0003e+01, 2.8564e-02, 9.1067e-25, 5.9611e+01,
         9.0279e-25, 3.2280e-26, 2.4338e-10, 3.9254e-03, 7.2522e+00, 3.1400e+01],
        [4.6990e+00, 3.0451e-01, 1.1377e+00, 5.2026e-04, 2.7216e-25, 4.6990e+00,
         6.9222e-25, 8.5427e-25, 2.1005e-10, 7.4497e-05, 4.6182e-02, 4.3822e+00],
        [6.8702e+01, 2.3284e+02, 1.1529e+01, 3.2919e-02, 8.2375e-25, 6.8702e+01,
         9.3002e-25, 1.9260e-10, 6.5699e-26, 4.5238e-03, 8.3581e+00, 3.6188e+01]])}, 139626727061936: {'step': 50000, 'exp_avg': tensor([[ 0.1438, -1.0477,  0.6132, -1.1504]]), 'exp_avg_sq': tensor([[  4.9609, 199.8023,  73.0322, 241.6081]])}, 139626727060096: {'step': 50000, 'exp_avg': tensor([[ 1.9059e-02, -5.7188e-02, -1.1993e-01, -1.8177e-01, -9.4935e-02,
          1.9000e-02,  1.1911e-43, -1.1911e-43, -2.1019e-44,  7.8705e-03,
          1.1346e-02,  9.1404e-03],
        [ 1.9851e-02, -6.0500e-02, -1.2356e-01, -1.8523e-01, -1.0602e-01,
          2.0239e-02,  1.9618e-44, -2.4523e-43,  4.9045e-44,  8.3817e-03,
          1.1936e-02,  9.5650e-03],
        [-1.4511e-02,  4.3982e-02,  1.3311e-01,  1.2537e-01,  2.4732e-03,
         -1.4493e-02, -6.3058e-44,  2.4523e-43, -1.3312e-43, -5.2501e-04,
         -1.4452e-02, -1.0651e-02],
        [-1.5680e-02,  4.2628e-02,  5.9456e-02,  9.0013e-02,  2.2207e-01,
         -1.3951e-02, -2.7325e-43, -2.4523e-43,  2.3121e-43, -1.0217e-02,
         -3.5744e-03, -2.1530e-03]]), 'exp_avg_sq': tensor([[6.8219e-02, 5.6961e-01, 1.7501e+00, 4.9752e+00, 3.0846e+00, 6.8219e-02,
         1.6297e-28, 4.4337e-29, 9.6413e-30, 1.7449e-02, 1.7387e-02, 1.3535e-02],
        [7.6204e-02, 6.3629e-01, 1.9550e+00, 5.5575e+00, 3.4457e+00, 7.6204e-02,
         1.2978e-29, 5.0665e-26, 7.2735e-28, 1.9492e-02, 1.9423e-02, 1.5120e-02],
        [2.6786e-02, 2.3478e-01, 1.4757e+00, 2.1168e+00, 3.5989e-03, 2.6786e-02,
         4.6583e-27, 3.1855e-26, 1.5798e-27, 1.1220e-04, 2.3284e-02, 1.4012e-02],
        [2.0178e-01, 1.1605e+00, 1.5279e+00, 2.9734e+00, 3.6802e+01, 2.0180e-01,
         2.9495e-26, 4.1970e-26, 4.8872e-26, 1.6845e-01, 1.4685e-03, 4.9608e-04]])}, 139626727059776: {'step': 50000, 'exp_avg': tensor([[ 0.1273,  0.1150, -0.0080, -0.0067]]), 'exp_avg_sq': tensor([[5.0097, 4.6489, 0.0146, 0.0100]])}}param_groups	[{'lr': 0.001, 'betas': (0.9, 0.999), 'eps': 1e-08, 'weight_decay': 0, 'amsgrad': False, 'params': [139626727060816, 139626727061936, 139626727060096, 139626727059776]}]

Average Error Test Dataset= 3.3820536295572916
RMSE Train Dataset = [13.89169269659254, 5.282927839119585, 4.690971208232347, 4.655332743781293, 4.6382448405410495, 4.616333548489342, 4.609638167805141, 4.607021131628917, 4.605117538559175, 4.604116563251079]
RMSE Test Dataset = [6.695994748549869, 4.935844240337023, 4.2074406246680915, 4.181320641438367, 4.157029845996169, 4.1287847553376045, 4.10797141585021, 4.089374329480759, 4.084717081421173, 4.138379679397434]
Number of epochs 50000

pred =158.492919921875
true = tensor([164.3100])
difference = tensor([5.8171])


pred =85.80130004882812
true = tensor([89.8000])
difference = tensor([3.9987])


pred =153.10299682617188
true = tensor([159.8700])
difference = tensor([6.7670])


pred =71.88681030273438
true = tensor([69.])
difference = tensor([2.8868])


pred =158.75328063964844
true = tensor([167.8000])
difference = tensor([9.0467])


pred =161.17648315429688
true = tensor([163.])
difference = tensor([1.8235])


pred =152.69488525390625
true = tensor([147.])
difference = tensor([5.6949])


pred =84.74435424804688
true = tensor([86.1000])
difference = tensor([1.3556])


pred =78.57333374023438
true = tensor([80.9000])
difference = tensor([2.3267])


pred =158.541259765625
true = tensor([159.])
difference = tensor([0.4587])


pred =89.35297393798828
true = tensor([92.])
difference = tensor([2.6470])


pred =116.050048828125
true = tensor([118.])
difference = tensor([1.9500])


pred =143.0720977783203
true = tensor([141.2000])
difference = tensor([1.8721])


pred =117.27191162109375
true = tensor([117.7000])
difference = tensor([0.4281])


pred =106.34212493896484
true = tensor([110.])
difference = tensor([3.6579])


