
+++++++++++++++++++++++++++++++++++REPORT+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

LISTA TEST FILE  
dict_keys(['molecule132.ct', 'molecule065.ct', 'molecule123.ct', 'molecule003.ct', 'molecule007.ct', 'molecule118.ct', 'molecule070.ct', 'molecule048.ct', 'molecule150.ct', 'molecule040.ct', 'molecule050.ct', 'molecule128.ct', 'molecule081.ct', 'molecule025.ct', 'molecule033.ct', 'molecule068.ct', 'molecule046.ct', 'molecule075.ct', 'molecule099.ct', 'molecule111.ct', 'molecule140.ct', 'molecule028.ct', 'molecule073.ct', 'molecule077.ct', 'molecule093.ct', 'molecule009.ct', 'molecule121.ct', 'molecule060.ct', 'molecule052.ct', 'molecule027.ct', 'molecule106.ct', 'molecule071.ct', 'molecule087.ct', 'molecule002.ct', 'molecule139.ct', 'molecule119.ct', 'molecule148.ct', 'molecule036.ct', 'molecule107.ct', 'molecule124.ct', 'molecule004.ct', 'molecule149.ct', 'molecule022.ct', 'molecule120.ct', 'molecule094.ct', 'molecule117.ct', 'molecule015.ct', 'molecule090.ct', 'molecule104.ct', 'molecule101.ct', 'molecule049.ct', 'molecule088.ct', 'molecule146.ct', 'molecule021.ct', 'molecule059.ct', 'molecule114.ct', 'molecule126.ct', 'molecule010.ct', 'molecule066.ct', 'molecule085.ct', 'molecule023.ct', 'molecule053.ct', 'molecule097.ct', 'molecule108.ct', 'molecule056.ct', 'molecule026.ct', 'molecule083.ct', 'molecule069.ct', 'molecule135.ct', 'molecule079.ct', 'molecule031.ct', 'molecule029.ct', 'molecule012.ct', 'molecule109.ct', 'molecule092.ct', 'molecule125.ct', 'molecule017.ct', 'molecule142.ct', 'molecule013.ct', 'molecule144.ct', 'molecule115.ct', 'molecule100.ct', 'molecule016.ct', 'molecule014.ct', 'molecule086.ct', 'molecule020.ct', 'molecule037.ct', 'molecule074.ct', 'molecule038.ct', 'molecule024.ct', 'molecule072.ct', 'molecule129.ct', 'molecule136.ct', 'molecule005.ct', 'molecule047.ct', 'molecule122.ct', 'molecule045.ct', 'molecule147.ct', 'molecule063.ct', 'molecule076.ct', 'molecule054.ct', 'molecule084.ct', 'molecule116.ct', 'molecule008.ct', 'molecule011.ct', 'molecule058.ct', 'molecule018.ct', 'molecule078.ct', 'molecule067.ct', 'molecule080.ct', 'molecule062.ct', 'molecule055.ct', 'molecule098.ct', 'molecule006.ct', 'molecule145.ct', 'molecule112.ct', 'molecule095.ct', 'molecule064.ct', 'molecule134.ct', 'molecule030.ct', 'molecule091.ct', 'molecule127.ct', 'molecule051.ct', 'molecule138.ct', 'molecule041.ct', 'molecule096.ct', 'molecule061.ct', 'molecule043.ct', 'molecule105.ct', 'molecule035.ct', 'molecule019.ct', 'molecule034.ct', 'molecule001.ct', 'molecule082.ct', 'molecule057.ct'])


LISTA VALIDATION FILE  
dict_keys(['molecule039.ct', 'molecule131.ct', 'molecule102.ct', 'molecule137.ct', 'molecule089.ct', 'molecule044.ct', 'molecule133.ct', 'molecule130.ct', 'molecule110.ct', 'molecule113.ct', 'molecule141.ct', 'molecule103.ct', 'molecule143.ct', 'molecule032.ct', 'molecule042.ct'])


Our model: 

RegressionGm(
  (fc1): Linear(in_features=12, out_features=4, bias=False)
  (fc2): Linear(in_features=4, out_features=1, bias=False)
  (LRelu): SELU()
  (fc1Root): Linear(in_features=12, out_features=4, bias=False)
  (fc2Root): Linear(in_features=4, out_features=1, bias=False)
  (LReluRoot): SELU()
)
Printing children
------------------------------[Linear(in_features=12, out_features=4, bias=False), Linear(in_features=4, out_features=1, bias=False), SELU(), Linear(in_features=12, out_features=4, bias=False), Linear(in_features=4, out_features=1, bias=False), SELU()]

Printing Modules
------------------------------[RegressionGm(
  (fc1): Linear(in_features=12, out_features=4, bias=False)
  (fc2): Linear(in_features=4, out_features=1, bias=False)
  (LRelu): SELU()
  (fc1Root): Linear(in_features=12, out_features=4, bias=False)
  (fc2Root): Linear(in_features=4, out_features=1, bias=False)
  (LReluRoot): SELU()
), Linear(in_features=12, out_features=4, bias=False), Linear(in_features=4, out_features=1, bias=False), SELU(), Linear(in_features=12, out_features=4, bias=False), Linear(in_features=4, out_features=1, bias=False), SELU()]
The state dict keys: 

odict_keys(['fc1.weight', 'fc2.weight', 'fc1Root.weight', 'fc2Root.weight'])Models state_dict:fc1.weight	torch.Size([4, 12])fc2.weight	torch.Size([1, 4])fc1Root.weight	torch.Size([4, 12])fc2Root.weight	torch.Size([1, 4])OrderedDict([('fc1.weight', tensor([[ 2.2604e-01, -4.9457e-01, -5.5718e-01, -4.6813e-01,  1.1981e-42,
          2.3680e-01,  3.2230e-43, -1.9436e-42, -1.1182e-42,  3.8330e-01,
          2.8489e-01,  1.7716e-01],
        [ 2.2808e-01, -4.9374e-01, -4.7424e-01, -8.2907e-01, -1.6017e-42,
          5.9676e-01,  1.2331e-42,  1.1967e-42, -1.8469e-42,  1.2287e+00,
          4.7463e-01,  6.0396e-01],
        [-2.2902e-01,  1.1116e+00,  4.4788e-02,  1.4317e-02, -5.6052e-43,
         -2.2742e-01, -1.3032e-43, -1.8091e-42, -1.5162e-42, -4.3371e-03,
         -4.2697e-01, -9.4071e-02],
        [-1.5365e-01,  1.1865e+00,  4.6700e-02,  1.5507e-02, -7.3148e-43,
         -1.1676e-01,  4.0498e-43, -1.1421e-42,  1.0089e-43, -4.6979e-03,
         -4.3390e-01,  1.0366e-02]])), ('fc2.weight', tensor([[-0.6518, -1.1866,  0.6586,  0.7513]])), ('fc1Root.weight', tensor([[-1.9652e+00, -5.3762e-01, -5.4940e-01, -5.3691e-01, -3.5203e-01,
         -2.3203e+00,  3.2692e-42, -7.6763e-42,  2.5335e-42, -2.7724e-01,
         -7.4238e-01, -2.9709e-01],
        [-1.8800e+00, -4.8384e-01, -5.9494e-01, -6.5979e-01, -7.7926e-01,
         -2.2307e+00, -4.8485e-43, -1.0902e-42,  2.7634e-42,  1.8556e-01,
         -9.5286e-01, -4.6472e-01],
        [-2.0447e+00, -4.9126e-01, -6.6820e-01, -4.6477e-01, -6.7365e-01,
         -2.2889e+00, -7.3162e-42, -7.1326e-43, -3.0885e-42,  7.0187e-02,
         -8.4510e-01, -1.6083e-01],
        [-2.1014e+00, -5.1179e-01, -6.0640e-01, -7.0537e-01, -3.5929e-01,
         -2.2108e+00, -8.0561e-42, -4.4645e-42, -2.2098e-42,  1.2096e-01,
         -9.9200e-01, -3.7298e-01]])), ('fc2Root.weight', tensor([[3.1909, 2.5969, 2.5121, 2.6252]]))])
---------------plt.close(fig)    # close the figure window-------------------------------------------------------------------------------------------

 Optimizer's state_dict:
CRITERION = MSELoss()
OPTIMIZER = Adam (
Parameter Group 0
    amsgrad: False
    betas: (0.9, 0.999)
    eps: 1e-08
    lr: 0.001
    weight_decay: 0
)
Tempo di training 25.244906663894653


state	{139943928081616: {'step': 10000, 'exp_avg': tensor([[-5.2158e-02,  5.5914e-02, -3.9283e-02, -3.2320e-03,  4.1338e-43,
         -4.8354e-02,  1.0510e-43, -6.7963e-43, -3.8536e-43,  8.8231e-02,
          1.8336e-01,  5.7189e-01],
        [-1.5975e-01,  2.4549e-01,  1.1953e-01,  2.5384e-03, -5.5632e-43,
         -2.9457e-02,  4.2740e-43,  4.1338e-43, -6.5160e-43,  3.4783e-01,
          3.1774e-01,  1.1396e+00],
        [ 1.8239e-01,  9.1681e-02,  1.4854e-03,  2.5937e-05, -1.8918e-43,
          1.8295e-01, -3.5032e-44, -6.3759e-43, -5.2549e-43, -2.4446e-05,
         -5.2349e-02,  1.1973e-01],
        [ 3.0244e-01,  9.3698e-02,  9.6784e-04,  1.9575e-05, -2.5364e-43,
          3.1550e-01,  1.3312e-43, -3.9937e-43,  3.5032e-44, -2.3197e-05,
         -4.6847e-02,  2.4014e-01]]), 'exp_avg_sq': tensor([[4.5432e+00, 6.3848e+01, 3.3351e+00, 2.0579e-02, 1.4124e-07, 4.5433e+00,
         1.7924e-08, 1.2642e-08, 1.2328e-08, 2.4769e-02, 1.3594e+00, 2.6249e+00],
        [2.2153e+01, 2.7937e+02, 1.4877e+01, 8.2987e-02, 3.0587e-07, 2.2154e+01,
         2.5929e-07, 1.6090e-09, 1.4350e-07, 1.3345e-01, 6.2489e+00, 1.1379e+01],
        [1.0103e+00, 2.8019e-01, 9.2555e-03, 4.1729e-05, 6.2882e-08, 1.0106e+00,
         1.0160e-07, 3.4547e-07, 1.9689e-07, 9.3847e-06, 4.6024e-02, 7.9162e-01],
        [1.9938e+00, 2.1446e-01, 4.2534e-03, 1.8693e-05, 9.8857e-11, 2.0003e+00,
         5.1199e-08, 2.4464e-07, 2.7123e-12, 7.0982e-06, 4.4548e-02, 1.7164e+00]])}, 139943928081856: {'step': 10000, 'exp_avg': tensor([[-0.0151, -0.4829,  0.4514,  0.5814]]), 'exp_avg_sq': tensor([[168.8289, 217.7253,  40.4393,  37.2521]])}, 139943928082096: {'step': 10000, 'exp_avg': tensor([[ 1.1447e-01, -1.2715e-01, -1.0557e-01, -1.5132e-01, -1.4001e-01,
          1.0394e-01,  1.0370e-43, -2.2981e-43,  7.5670e-44,  3.9151e-02,
         -3.6564e-01,  5.5388e-02],
        [ 9.9019e-02, -6.9939e-02, -1.6256e-01, -2.5529e-01, -1.2856e-01,
          8.8617e-02, -1.9618e-44, -3.3631e-44,  8.9683e-44,  4.4067e-02,
         -2.8391e-01,  4.4567e-02],
        [ 7.4245e-02, -1.1750e-01, -1.4195e-01, -1.0982e-01, -1.2197e-01,
          6.7000e-02, -2.1720e-43, -3.3631e-44, -9.1084e-44,  3.9386e-02,
         -2.7835e-01,  3.0144e-02],
        [ 6.1344e-02, -6.2398e-02, -1.7180e-01, -3.6750e-01, -1.1725e-01,
          5.8099e-02, -2.4383e-43, -1.3172e-43, -7.5670e-44,  4.2571e-02,
         -2.8543e-01,  7.8508e-02]]), 'exp_avg_sq': tensor([[7.8455e-01, 3.6981e+00, 6.7737e+00, 1.3473e+01, 6.2011e+00, 7.7652e-01,
         5.6394e-09, 1.1031e-10, 6.6906e-10, 9.8277e-02, 3.2338e-01, 2.0012e-01],
        [7.4319e-01, 3.5629e+00, 6.5063e+00, 1.2803e+01, 5.8718e+00, 7.3610e-01,
         1.0782e-09, 6.3665e-09, 7.5464e-09, 9.3912e-02, 2.7500e-01, 1.8791e-01],
        [5.4170e-01, 2.5196e+00, 4.6614e+00, 9.2434e+00, 4.2853e+00, 5.3739e-01,
         3.7888e-11, 6.4443e-09, 5.9203e-10, 6.4916e-02, 2.1140e-01, 1.4300e-01],
        [6.9597e-01, 3.4501e+00, 6.3497e+00, 1.2582e+01, 5.7092e+00, 6.9396e-01,
         1.0581e-08, 1.1093e-08, 1.6363e-10, 9.0446e-02, 2.5992e-01, 1.7250e-01]])}, 139943928082336: {'step': 10000, 'exp_avg': tensor([[-5.3017, -5.2625, -5.2979, -5.2774]]), 'exp_avg_sq': tensor([[55.0443, 82.1567, 78.1580, 80.2336]])}}param_groups	[{'lr': 0.001, 'betas': (0.9, 0.999), 'eps': 1e-08, 'weight_decay': 0, 'amsgrad': False, 'params': [139943928081616, 139943928081856, 139943928082096, 139943928082336]}]

Average Error Test Dataset= 6.2654474894205725
RMSE Train Dataset = [22.546947413042066, 21.530620682022267, 19.880259843505883, 18.585260995464424, 17.36508137111343, 16.590409856864596, 16.21382692623028, 15.93583975727452, 15.58277399755847, 15.118102463428622]
RMSE Test Dataset = [8.928757025833281, 8.148796095597017, 6.975758402621757, 7.075301998958408, 7.465546116306379, 7.443947697984066, 7.252493067951433, 7.066825419868003, 6.923366411791581, 6.858580245636836]
Number of epochs 10000

pred =111.55108642578125
true = tensor([118.5000])
difference = tensor([6.9489])


pred =170.15257263183594
true = tensor([167.])
difference = tensor([3.1526])


pred =162.2128448486328
true = tensor([153.])
difference = tensor([9.2128])


pred =165.76504516601562
true = tensor([158.3000])
difference = tensor([7.4650])


pred =160.4790496826172
true = tensor([164.5900])
difference = tensor([4.1109])


pred =130.49017333984375
true = tensor([133.8300])
difference = tensor([3.3398])


pred =157.36692810058594
true = tensor([144.8000])
difference = tensor([12.5669])


pred =169.47044372558594
true = tensor([162.1000])
difference = tensor([7.3704])


pred =164.87744140625
true = tensor([157.5000])
difference = tensor([7.3774])


pred =167.70849609375
true = tensor([166.3000])
difference = tensor([1.4085])


pred =162.03384399414062
true = tensor([158.8400])
difference = tensor([3.1938])


pred =163.92306518554688
true = tensor([158.])
difference = tensor([5.9231])


pred =158.09100341796875
true = tensor([167.])
difference = tensor([8.9090])


pred =108.43838500976562
true = tensor([115.6000])
difference = tensor([7.1616])


pred =127.15925598144531
true = tensor([133.])
difference = tensor([5.8407])


