
+++++++++++++++++++++++++++++++++++REPORT+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

LISTA TEST FILE  
dict_keys(['molecule106.ct', 'molecule071.ct', 'molecule087.ct', 'molecule002.ct', 'molecule139.ct', 'molecule119.ct', 'molecule148.ct', 'molecule036.ct', 'molecule107.ct', 'molecule124.ct', 'molecule004.ct', 'molecule149.ct', 'molecule022.ct', 'molecule120.ct', 'molecule094.ct', 'molecule117.ct', 'molecule015.ct', 'molecule090.ct', 'molecule104.ct', 'molecule101.ct', 'molecule049.ct', 'molecule088.ct', 'molecule146.ct', 'molecule021.ct', 'molecule059.ct', 'molecule114.ct', 'molecule126.ct', 'molecule010.ct', 'molecule066.ct', 'molecule085.ct', 'molecule023.ct', 'molecule053.ct', 'molecule097.ct', 'molecule108.ct', 'molecule056.ct', 'molecule026.ct', 'molecule083.ct', 'molecule069.ct', 'molecule135.ct', 'molecule079.ct', 'molecule031.ct', 'molecule029.ct', 'molecule012.ct', 'molecule109.ct', 'molecule092.ct', 'molecule125.ct', 'molecule017.ct', 'molecule142.ct', 'molecule013.ct', 'molecule144.ct', 'molecule115.ct', 'molecule100.ct', 'molecule016.ct', 'molecule014.ct', 'molecule086.ct', 'molecule020.ct', 'molecule037.ct', 'molecule074.ct', 'molecule038.ct', 'molecule024.ct', 'molecule072.ct', 'molecule129.ct', 'molecule136.ct', 'molecule005.ct', 'molecule047.ct', 'molecule122.ct', 'molecule045.ct', 'molecule147.ct', 'molecule063.ct', 'molecule076.ct', 'molecule054.ct', 'molecule084.ct', 'molecule116.ct', 'molecule008.ct', 'molecule011.ct', 'molecule058.ct', 'molecule018.ct', 'molecule078.ct', 'molecule067.ct', 'molecule080.ct', 'molecule062.ct', 'molecule055.ct', 'molecule098.ct', 'molecule006.ct', 'molecule145.ct', 'molecule112.ct', 'molecule095.ct', 'molecule064.ct', 'molecule134.ct', 'molecule030.ct', 'molecule091.ct', 'molecule127.ct', 'molecule051.ct', 'molecule138.ct', 'molecule041.ct', 'molecule096.ct', 'molecule061.ct', 'molecule043.ct', 'molecule105.ct', 'molecule035.ct', 'molecule019.ct', 'molecule034.ct', 'molecule001.ct', 'molecule082.ct', 'molecule057.ct', 'molecule039.ct', 'molecule131.ct', 'molecule102.ct', 'molecule137.ct', 'molecule089.ct', 'molecule044.ct', 'molecule133.ct', 'molecule130.ct', 'molecule110.ct', 'molecule113.ct', 'molecule141.ct', 'molecule103.ct', 'molecule143.ct', 'molecule032.ct', 'molecule042.ct', 'molecule132.ct', 'molecule065.ct', 'molecule123.ct', 'molecule003.ct', 'molecule007.ct', 'molecule118.ct', 'molecule070.ct', 'molecule048.ct', 'molecule150.ct', 'molecule040.ct', 'molecule050.ct', 'molecule128.ct', 'molecule081.ct', 'molecule025.ct', 'molecule033.ct'])


LISTA VALIDATION FILE  
dict_keys(['molecule068.ct', 'molecule046.ct', 'molecule075.ct', 'molecule099.ct', 'molecule111.ct', 'molecule140.ct', 'molecule028.ct', 'molecule073.ct', 'molecule077.ct', 'molecule093.ct', 'molecule009.ct', 'molecule121.ct', 'molecule060.ct', 'molecule052.ct', 'molecule027.ct'])


Our model: 

RegressionGm(
  (fc1): Linear(in_features=12, out_features=4, bias=False)
  (fc2): Linear(in_features=4, out_features=1, bias=False)
  (LRelu): SELU()
  (fc1Root): Linear(in_features=12, out_features=4, bias=False)
  (fc2Root): Linear(in_features=4, out_features=1, bias=False)
  (LReluRoot): SELU()
)
Printing children
------------------------------[Linear(in_features=12, out_features=4, bias=False), Linear(in_features=4, out_features=1, bias=False), SELU(), Linear(in_features=12, out_features=4, bias=False), Linear(in_features=4, out_features=1, bias=False), SELU()]

Printing Modules
------------------------------[RegressionGm(
  (fc1): Linear(in_features=12, out_features=4, bias=False)
  (fc2): Linear(in_features=4, out_features=1, bias=False)
  (LRelu): SELU()
  (fc1Root): Linear(in_features=12, out_features=4, bias=False)
  (fc2Root): Linear(in_features=4, out_features=1, bias=False)
  (LReluRoot): SELU()
), Linear(in_features=12, out_features=4, bias=False), Linear(in_features=4, out_features=1, bias=False), SELU(), Linear(in_features=12, out_features=4, bias=False), Linear(in_features=4, out_features=1, bias=False), SELU()]
The state dict keys: 

odict_keys(['fc1.weight', 'fc2.weight', 'fc1Root.weight', 'fc2Root.weight'])Models state_dict:fc1.weight	torch.Size([4, 12])fc2.weight	torch.Size([1, 4])fc1Root.weight	torch.Size([4, 12])fc2Root.weight	torch.Size([1, 4])OrderedDict([('fc1.weight', tensor([[ 1.0616e-01, -4.4332e-02, -7.5625e-02, -3.0976e-01, -1.0930e-43,
          2.8139e-01,  1.7796e-43, -1.3144e-42, -1.0258e-42, -9.6621e-02,
          8.6839e-02, -3.5217e-02],
        [ 6.0032e-01,  7.0309e-01,  5.0431e-01,  5.4792e-01,  6.7262e-44,
          4.0457e-01, -2.8530e-42,  2.3542e-43, -1.2247e-42,  3.2508e-01,
          2.7412e-01,  2.9345e-01],
        [ 6.9745e-01,  2.5336e-01,  3.9601e-01,  6.8142e-01, -1.6774e-42,
          4.5940e-01,  8.3377e-43, -1.2149e-42, -8.2957e-43,  5.4669e-01,
          6.7805e-01,  3.8188e-01],
        [-2.7685e-01, -1.1436e+00, -1.3266e-01, -1.4090e-02, -2.7606e-43,
         -1.3410e-01,  8.6460e-43,  8.1345e-42, -3.4332e-43, -4.1052e-03,
         -3.7552e-01,  6.2630e-02]])), ('fc2.weight', tensor([[-0.9118,  0.8553,  1.0297, -0.9342]])), ('fc1Root.weight', tensor([[-2.6186e+00,  6.7620e-01,  8.1148e-01,  6.0365e-01,  6.8682e-01,
         -2.3371e+00, -3.1484e-15,  4.7336e-42,  1.3537e-42, -7.5969e-02,
         -1.2312e+00, -2.8048e-01],
        [-2.5197e+00,  4.8499e-01,  7.3779e-01,  6.1017e-01,  5.6269e-01,
         -2.0181e+00,  6.4306e-42,  7.2181e-42,  8.0981e-42, -3.4681e-01,
         -9.6469e-01, -1.5646e-01],
        [-2.5388e+00,  6.0746e-01,  6.5712e-01,  6.8311e-01,  3.7965e-01,
         -2.3918e+00, -4.1254e-42,  7.1046e-43, -1.1827e-42, -4.6755e-01,
         -8.3252e-01, -1.6241e-01],
        [-2.0368e+00,  5.9086e-01,  4.9076e-01,  7.5039e-01,  8.5763e-01,
         -2.1292e+00, -9.6914e-42, -7.2209e-42,  5.2058e-42,  1.2618e-01,
         -9.0485e-01, -6.6175e-01]])), ('fc2Root.weight', tensor([[2.2873, 2.6670, 3.0242, 2.3175]]))])
---------------plt.close(fig)    # close the figure window-------------------------------------------------------------------------------------------

 Optimizer's state_dict:
CRITERION = MSELoss()
OPTIMIZER = Adam (
Parameter Group 0
    amsgrad: False
    betas: (0.9, 0.999)
    eps: 1e-08
    lr: 0.001
    weight_decay: 0
)
Tempo di training 27.684620141983032


state	{139951122009056: {'step': 10000, 'exp_avg': tensor([[ 7.5077e-04, -1.0016e+00,  1.4368e-01, -5.4962e-03, -3.5032e-44,
          7.2808e-02,  6.3058e-44, -5.3950e-43, -4.1338e-43, -9.1068e-04,
         -4.4788e-01, -4.0497e-01],
        [ 7.6964e-02,  1.7804e-01, -3.9430e-02, -9.1410e-04,  2.1019e-44,
         -3.5378e-03, -6.7963e-43,  9.1084e-44, -4.9746e-43,  7.0510e-02,
          3.8460e-01,  4.9630e-01],
        [ 8.2220e-02, -2.9505e-02, -1.3432e-01,  7.9562e-03, -6.7963e-43,
         -1.5662e-02,  3.4332e-43, -4.9746e-43, -3.2931e-43,  1.4912e-01,
          6.0613e-01,  6.0919e-01],
        [ 5.2265e-01, -3.4770e-02, -2.3517e-03,  4.0847e-05, -1.0510e-43,
          5.8137e-01,  3.4332e-43,  5.6052e-45, -1.3312e-43,  4.8188e-06,
         -8.5666e-03,  5.1176e-01]]), 'exp_avg_sq': tensor([[3.7169e+01, 1.4490e+03, 7.1859e+00, 2.7356e-03, 1.8383e-07, 3.7176e+01,
         3.4402e-08, 1.2187e-07, 6.4247e-08, 2.8520e-04, 1.4883e+01, 1.0076e+01],
        [2.9436e+01, 3.5962e+02, 1.7888e+01, 6.0056e-02, 4.4049e-08, 2.9408e+01,
         2.4439e-08, 8.6794e-08, 2.8957e-07, 3.2447e-02, 6.7703e+00, 1.2494e+01],
        [4.1602e+01, 5.0073e+02, 2.4799e+01, 8.0794e-02, 4.0175e-08, 4.1562e+01,
         1.1371e-07, 6.7741e-09, 1.9888e-11, 6.7765e-02, 9.7593e+00, 1.7711e+01],
        [1.4251e+01, 2.6342e-01, 5.7810e-03, 1.2899e-05, 1.9269e-10, 1.4282e+01,
         2.0910e-08, 1.9646e-08, 8.0507e-08, 2.1456e-06, 4.3483e-02, 1.3874e+01]])}, 139951122009376: {'step': 10000, 'exp_avg': tensor([[ 0.0665,  0.0687,  0.3364, -0.8476]]), 'exp_avg_sq': tensor([[ 33.3399, 754.1731, 379.0105,  54.5565]])}, 139951122009616: {'step': 10000, 'exp_avg': tensor([[-2.4483e-02,  7.9012e-02,  1.0522e-01,  4.0309e-02,  3.2413e-02,
         -1.6907e-02,  5.0626e-18,  1.3172e-43,  4.7644e-44,  2.2752e-02,
         -2.4242e-01,  3.0511e-02],
        [ 4.2081e-03,  2.8230e-02,  7.7208e-02,  9.8953e-02,  3.1386e-02,
          1.7711e-02,  1.7376e-43,  2.0179e-43,  2.1720e-43,  1.9564e-02,
         -2.8336e-01,  5.3139e-02],
        [-3.4054e-02,  1.1626e-02,  8.2484e-02,  2.3698e-01,  2.8637e-02,
         -3.0097e-02, -1.1771e-43,  1.9618e-44, -3.3631e-44,  2.0187e-02,
         -3.1436e-01,  9.5385e-02],
        [ 5.6423e-02,  4.7233e-02, -1.8181e-02,  1.5991e-03,  3.7196e-02,
          5.3937e-02, -2.5924e-43, -2.0179e-43,  1.4574e-43,  2.8515e-02,
         -2.7532e-01,  3.5060e-02]]), 'exp_avg_sq': tensor([[2.7808e-01, 2.0727e+00, 5.2694e+00, 1.7096e+01, 6.9351e+00, 2.8178e-01,
         5.3283e-13, 9.2259e-09, 3.0222e-11, 3.5926e-02, 1.1679e-01, 7.9062e-02],
        [5.8058e-01, 4.0408e+00, 9.8811e+00, 3.1305e+01, 1.2826e+01, 5.8980e-01,
         1.4639e-10, 2.7449e-10, 1.9415e-10, 7.7151e-02, 2.0329e-01, 1.3887e-01],
        [4.3305e-01, 3.2592e+00, 8.2053e+00, 2.6575e+01, 1.0548e+01, 4.3531e-01,
         3.6826e-09, 5.2687e-09, 1.1598e-09, 6.2232e-02, 2.0168e-01, 1.1759e-01],
        [8.4095e-01, 4.9409e+00, 1.1532e+01, 3.5860e+01, 1.4945e+01, 8.3887e-01,
         2.7629e-10, 8.0103e-09, 3.2076e-09, 9.4519e-02, 2.3840e-01, 1.7601e-01]])}, 139951122009856: {'step': 10000, 'exp_avg': tensor([[-5.4072, -5.4145, -5.4210, -5.4230]]), 'exp_avg_sq': tensor([[101.8905,  83.9056,  66.9938, 118.7158]])}}param_groups	[{'lr': 0.001, 'betas': (0.9, 0.999), 'eps': 1e-08, 'weight_decay': 0, 'amsgrad': False, 'params': [139951122009056, 139951122009376, 139951122009616, 139951122009856]}]

Average Error Test Dataset= 3.8425702412923175
RMSE Train Dataset = [22.616815087607524, 21.539314697471664, 19.940173122377615, 18.564640422680895, 17.506050153937853, 16.522960986036786, 16.315233023566694, 16.075177010470796, 15.736804581382371, 15.292091190498297]
RMSE Test Dataset = [10.967716353095257, 9.834137016255783, 8.303181638226567, 7.783324673611754, 6.158344357919009, 4.294630539516439, 4.45083998563853, 4.505605173732756, 4.585246201356126, 4.523740662741425]
Number of epochs 10000

pred =136.39776611328125
true = tensor([136.])
difference = tensor([0.3978])


pred =133.983154296875
true = tensor([141.5000])
difference = tensor([7.5168])


pred =142.94261169433594
true = tensor([150.7700])
difference = tensor([7.8274])


pred =153.16261291503906
true = tensor([147.7000])
difference = tensor([5.4626])


pred =165.89605712890625
true = tensor([163.8000])
difference = tensor([2.0961])


pred =163.5947265625
true = tensor([160.])
difference = tensor([3.5947])


pred =111.1022720336914
true = tensor([112.])
difference = tensor([0.8977])


pred =139.27099609375
true = tensor([143.])
difference = tensor([3.7290])


pred =162.70062255859375
true = tensor([158.])
difference = tensor([4.7006])


pred =158.58523559570312
true = tensor([153.])
difference = tensor([5.5852])


pred =55.638404846191406
true = tensor([49.7000])
difference = tensor([5.9384])


pred =162.1387176513672
true = tensor([157.])
difference = tensor([5.1387])


pred =131.8822021484375
true = tensor([131.3000])
difference = tensor([0.5822])


pred =127.34394073486328
true = tensor([124.])
difference = tensor([3.3439])


pred =105.97270202636719
true = tensor([106.8000])
difference = tensor([0.8273])


