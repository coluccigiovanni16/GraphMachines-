
+++++++++++++++++++++++++++++++++++REPORT+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

LISTA TEST FILE  
dict_keys(['molecule023.ct', 'molecule053.ct', 'molecule097.ct', 'molecule108.ct', 'molecule056.ct', 'molecule026.ct', 'molecule083.ct', 'molecule069.ct', 'molecule135.ct', 'molecule079.ct', 'molecule031.ct', 'molecule029.ct', 'molecule012.ct', 'molecule109.ct', 'molecule092.ct', 'molecule125.ct', 'molecule017.ct', 'molecule142.ct', 'molecule013.ct', 'molecule144.ct', 'molecule115.ct', 'molecule100.ct', 'molecule016.ct', 'molecule014.ct', 'molecule086.ct', 'molecule020.ct', 'molecule037.ct', 'molecule074.ct', 'molecule038.ct', 'molecule024.ct', 'molecule072.ct', 'molecule129.ct', 'molecule136.ct', 'molecule005.ct', 'molecule047.ct', 'molecule122.ct', 'molecule045.ct', 'molecule147.ct', 'molecule063.ct', 'molecule076.ct', 'molecule054.ct', 'molecule084.ct', 'molecule116.ct', 'molecule008.ct', 'molecule011.ct', 'molecule058.ct', 'molecule018.ct', 'molecule078.ct', 'molecule067.ct', 'molecule080.ct', 'molecule062.ct', 'molecule055.ct', 'molecule098.ct', 'molecule006.ct', 'molecule145.ct', 'molecule112.ct', 'molecule095.ct', 'molecule064.ct', 'molecule134.ct', 'molecule030.ct', 'molecule091.ct', 'molecule127.ct', 'molecule051.ct', 'molecule138.ct', 'molecule041.ct', 'molecule096.ct', 'molecule061.ct', 'molecule043.ct', 'molecule105.ct', 'molecule035.ct', 'molecule019.ct', 'molecule034.ct', 'molecule001.ct', 'molecule082.ct', 'molecule057.ct', 'molecule039.ct', 'molecule131.ct', 'molecule102.ct', 'molecule137.ct', 'molecule089.ct', 'molecule044.ct', 'molecule133.ct', 'molecule130.ct', 'molecule110.ct', 'molecule113.ct', 'molecule141.ct', 'molecule103.ct', 'molecule143.ct', 'molecule032.ct', 'molecule042.ct', 'molecule132.ct', 'molecule065.ct', 'molecule123.ct', 'molecule003.ct', 'molecule007.ct', 'molecule118.ct', 'molecule070.ct', 'molecule048.ct', 'molecule150.ct', 'molecule040.ct', 'molecule050.ct', 'molecule128.ct', 'molecule081.ct', 'molecule025.ct', 'molecule033.ct', 'molecule068.ct', 'molecule046.ct', 'molecule075.ct', 'molecule099.ct', 'molecule111.ct', 'molecule140.ct', 'molecule028.ct', 'molecule073.ct', 'molecule077.ct', 'molecule093.ct', 'molecule009.ct', 'molecule121.ct', 'molecule060.ct', 'molecule052.ct', 'molecule027.ct', 'molecule106.ct', 'molecule071.ct', 'molecule087.ct', 'molecule002.ct', 'molecule139.ct', 'molecule119.ct', 'molecule148.ct', 'molecule036.ct', 'molecule107.ct', 'molecule124.ct', 'molecule004.ct', 'molecule149.ct', 'molecule022.ct', 'molecule120.ct', 'molecule094.ct'])----------------------------------------------------------------------------------------------------------

LISTA VALIDATION FILE  
dict_keys(['molecule117.ct', 'molecule015.ct', 'molecule090.ct', 'molecule104.ct', 'molecule101.ct', 'molecule049.ct', 'molecule088.ct', 'molecule146.ct', 'molecule021.ct', 'molecule059.ct', 'molecule114.ct', 'molecule126.ct', 'molecule010.ct', 'molecule066.ct', 'molecule085.ct'])----------------------------------------------------------------------------------------------------------

Our model: 

Net(
  (fc1): Linear(in_features=12, out_features=4, bias=False)
  (fc2): Linear(in_features=4, out_features=1, bias=False)
  (LRelu): LeakyReLU(negative_slope=0.25)
  (fc1Root): Linear(in_features=12, out_features=4, bias=False)
  (fc2Root): Linear(in_features=4, out_features=1, bias=False)
  (LReluRoot): LeakyReLU(negative_slope=0.25)
)
Printing children
------------------------------[Linear(in_features=12, out_features=4, bias=False), Linear(in_features=4, out_features=1, bias=False), LeakyReLU(negative_slope=0.25), Linear(in_features=12, out_features=4, bias=False), Linear(in_features=4, out_features=1, bias=False), LeakyReLU(negative_slope=0.25)]

Printing Modules
------------------------------[Net(
  (fc1): Linear(in_features=12, out_features=4, bias=False)
  (fc2): Linear(in_features=4, out_features=1, bias=False)
  (LRelu): LeakyReLU(negative_slope=0.25)
  (fc1Root): Linear(in_features=12, out_features=4, bias=False)
  (fc2Root): Linear(in_features=4, out_features=1, bias=False)
  (LReluRoot): LeakyReLU(negative_slope=0.25)
), Linear(in_features=12, out_features=4, bias=False), Linear(in_features=4, out_features=1, bias=False), LeakyReLU(negative_slope=0.25), Linear(in_features=12, out_features=4, bias=False), Linear(in_features=4, out_features=1, bias=False), LeakyReLU(negative_slope=0.25)]
The state dict keys: 

odict_keys(['fc1.weight', 'fc2.weight', 'fc1Root.weight', 'fc2Root.weight'])Models state_dict:fc1.weight	torch.Size([4, 12])fc2.weight	torch.Size([1, 4])fc1Root.weight	torch.Size([4, 12])fc2Root.weight	torch.Size([1, 4])OrderedDict([('fc1.weight', tensor([[-5.1186e-01, -3.6488e-01, -6.3058e-44, -2.1300e-43, -1.6816e-44,
         -3.9762e-01, -2.7746e-43, -3.8045e-19, -5.4052e-02, -7.8343e-02,
         -6.6101e-02, -3.5712e-02],
        [-5.4871e-01, -2.3831e-02,  1.2892e-43, -2.3932e-16,  5.4651e-44,
         -6.7678e-01, -1.6816e-44,  2.7554e-10,  9.2100e-02, -1.1538e-01,
         -8.3576e-02, -4.2961e-02],
        [ 9.0523e-01,  9.0747e-01, -1.6355e-11,  9.7246e-11,  7.8473e-44,
          8.9519e-01,  6.6629e-08,  2.9427e-44, -1.8258e-01,  2.8651e-01,
          2.8386e-01,  1.5835e-01],
        [-5.2186e-01, -3.6464e-01,  2.3822e-44,  2.9832e-16,  1.3301e-37,
         -7.0819e-01,  1.0790e-43,  6.8664e-44,  6.4638e-02, -1.2166e-01,
         -9.9618e-02, -5.2424e-02]], device='cuda:1')), ('fc2.weight', tensor([[-0.8641, -0.9986,  0.8304, -1.2171]], device='cuda:1')), ('fc1Root.weight', tensor([[-1.9222e+00,  2.2601e+00, -8.1135e-43, -1.2584e-42,  9.9072e-43,
         -2.4198e+00, -7.6083e-01, -8.5923e-01, -3.5854e-01, -1.5385e+00,
         -1.6259e+00,  1.1157e+00],
        [ 3.9196e+00, -4.6312e-01, -2.6625e-43, -7.9173e-43, -1.1463e-42,
          4.0770e+00,  4.9159e+00,  4.6178e+00,  2.8314e+00,  1.8929e+00,
         -4.7954e-01,  1.2837e+00],
        [ 5.7518e+00, -1.0560e+00, -1.4896e-42,  1.8273e-42,  7.3568e-43,
          5.3680e+00,  4.5435e+00,  4.2327e+00,  2.7537e+00,  1.5883e-01,
          2.0568e+00,  4.7482e+00],
        [-9.0382e-01,  1.7624e+00,  9.4167e-43, -1.7376e-43, -1.9058e-43,
         -8.0060e-01, -1.5136e+00, -1.3875e+00, -1.1958e+00, -1.1313e-01,
         -9.2308e-01,  1.4352e+00]], device='cuda:1')), ('fc2Root.weight', tensor([[ 1.8856, -3.3485, -5.0140,  2.0291]], device='cuda:1'))])
---------------plt.close(fig)    # close the figure window-------------------------------------------------------------------------------------------

 Optimizer's state_dict:
CRITERION = MSELoss()
OPTIMIZER = Adam (
Parameter Group 0
    amsgrad: False
    betas: (0.9, 0.999)
    eps: 1e-08
    lr: 0.001
    weight_decay: 0
)
Tempo di training 206.01879286766052


state	{140215498447896: {'step': 15000, 'exp_avg': tensor([[-1.3293e-01, -6.3762e-02,  2.8026e-45,  5.6052e-45, -2.8026e-45,
         -8.1493e-02,  5.6052e-45,  8.3610e-21, -5.4205e-03,  3.8147e-04,
         -2.0704e-03, -1.0456e-03],
        [-1.3414e-01,  1.0508e-01, -2.8026e-45,  8.3082e-19, -4.2039e-45,
         -1.9176e-01, -4.2039e-45, -4.9204e-12,  6.3511e-02, -1.0773e-02,
         -5.6532e-03, -1.9788e-03],
        [ 3.3155e-02,  2.3243e-02, -4.2820e-13,  8.8483e-13, -2.8026e-45,
          2.8646e-02, -1.1753e-09,  4.2039e-45, -1.5470e-01, -7.8592e-03,
          2.1396e-02,  1.3532e-02],
        [-9.7466e-02, -2.2731e-02,  4.2039e-45, -5.6232e-18, -2.6019e-39,
         -1.8127e-01, -1.4013e-45,  1.4013e-45,  5.5868e-02, -4.5723e-03,
         -5.8690e-03, -2.4377e-03]], device='cuda:1'), 'exp_avg_sq': tensor([[1.3073e+00, 8.0330e+00, 1.9941e-09, 5.5723e-10, 2.4327e-10, 1.2914e+00,
         1.7612e-10, 1.3720e-10, 3.4508e-01, 1.3778e-01, 1.8835e-02, 2.0048e-03],
        [2.0413e+00, 1.2970e+01, 1.1263e-09, 3.0579e-10, 2.4988e-09, 2.0628e+00,
         2.9793e-09, 1.2126e-10, 5.4826e-01, 2.1839e-01, 3.0540e-02, 3.4058e-03],
        [1.3975e+01, 8.4105e+01, 2.9268e-10, 1.6266e-10, 4.2784e-09, 1.3975e+01,
         1.8280e-10, 2.5610e-09, 3.7251e+00, 1.4991e+00, 2.0462e-01, 2.1458e-02],
        [2.5857e+00, 1.6171e+01, 1.5365e-08, 1.2631e-10, 1.2944e-10, 2.6118e+00,
         3.7697e-10, 9.9198e-10, 6.9233e-01, 2.7675e-01, 3.8426e-02, 4.2229e-03]],
       device='cuda:1')}, 140215498448184: {'step': 15000, 'exp_avg': tensor([[-0.2851, -0.3584, -0.8882, -0.4270]], device='cuda:1'), 'exp_avg_sq': tensor([[  6.8849,   2.9812, 381.1021,   7.7984]], device='cuda:1')}, 140215498448328: {'step': 15000, 'exp_avg': tensor([[-1.7010e-02, -1.9830e-01, -1.4013e-45,  1.4013e-45, -0.0000e+00,
         -2.3151e-02, -6.7062e-03, -7.9243e-03,  4.4506e-04, -1.7588e-02,
         -8.9050e-03,  2.9402e-04],
        [ 1.6588e-02,  9.8913e-02, -2.8026e-45, -2.8026e-45, -4.2039e-45,
          1.8530e-02,  4.1310e-02,  3.7630e-02,  2.6365e-02,  2.0844e-02,
          9.6305e-04,  7.7556e-03],
        [-9.0336e-03,  1.4363e-01,  4.2039e-45, -2.8026e-45,  2.8026e-45,
         -1.3771e-02,  2.7061e-02,  2.3222e-02,  2.1108e-02,  1.6094e-02,
          1.1427e-02,  2.0476e-02],
        [-3.9244e-03, -2.2168e-01, -1.4013e-45,  5.6052e-45,  1.4013e-45,
         -2.6505e-03, -1.5805e-02, -1.4247e-02, -9.5752e-03,  1.3384e-04,
          6.4057e-04,  3.2172e-03]], device='cuda:1'), 'exp_avg_sq': tensor([[1.4170e-02, 5.8195e+00, 2.0331e-10, 3.2297e-12, 1.8308e-12, 1.4421e-02,
         2.3835e-04, 2.8056e-04, 4.8554e-05, 3.6009e-03, 1.9224e-03, 6.4910e-04],
        [3.5701e-02, 1.4853e+01, 5.3676e-11, 1.4539e-11, 6.3839e-11, 3.5769e-02,
         3.9644e-03, 3.5885e-03, 1.7479e-03, 1.1699e-02, 8.7252e-04, 5.5189e-03],
        [1.4761e-02, 2.7940e+00, 6.5596e-11, 1.0464e-11, 2.9266e-11, 1.5183e-02,
         2.8884e-03, 2.5668e-03, 1.5176e-03, 1.8774e-03, 1.0578e-03, 4.5179e-03],
        [2.2500e-02, 8.3889e+00, 6.5834e-12, 1.4537e-09, 1.6886e-12, 2.2493e-02,
         6.2506e-04, 5.5010e-04, 4.0693e-04, 5.4843e-03, 3.0166e-03, 1.2115e-03]],
       device='cuda:1')}, 140215498448544: {'step': 15000, 'exp_avg': tensor([[-0.2518,  0.0576,  0.1587, -0.1794]], device='cuda:1'), 'exp_avg_sq': tensor([[7.0657, 0.1589, 0.1955, 5.7749]], device='cuda:1')}}param_groups	[{'lr': 0.001, 'betas': (0.9, 0.999), 'eps': 1e-08, 'weight_decay': 0, 'amsgrad': False, 'params': [140215498447896, 140215498448184, 140215498448328, 140215498448544]}]
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Average Error Test Dataset= 3.0204788208007813
RMSE Train Dataset = [21.847415643789542, 20.09345915540871, 15.725770751306793, 7.600797169688591, 6.18356506379559, 5.957386003781094, 5.717035422188207, 5.516012983211428, 5.366601992547158, 5.260678285444684]
RMSE Test Dataset = [12.074709074887231, 10.363064806446845, 8.046819534851322, 3.977892939772941, 4.273349795932174, 4.256625004631452, 4.30875864690406, 4.318807218975829, 4.3260473229107745, 4.347497435048571]
Number of epochs 15000
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
pred =159.97378540039062
true = tensor([164.])
differenza = tensor([4.0262])


pred =83.03309631347656
true = tensor([79.2000])
differenza = tensor([3.8331])


pred =165.07492065429688
true = tensor([164.])
differenza = tensor([1.0749])


pred =149.9665069580078
true = tensor([137.4600])
differenza = tensor([12.5065])


pred =157.5785675048828
true = tensor([155.6800])
differenza = tensor([1.8986])


pred =125.89464569091797
true = tensor([122.7000])
differenza = tensor([3.1946])


pred =165.07492065429688
true = tensor([165.])
differenza = tensor([0.0749])


pred =165.8793487548828
true = tensor([166.])
differenza = tensor([0.1207])


pred =95.02886962890625
true = tensor([93.5000])
differenza = tensor([1.5289])


pred =136.5762939453125
true = tensor([136.7300])
differenza = tensor([0.1537])


pred =153.9844207763672
true = tensor([161.])
differenza = tensor([7.0156])


pred =161.8960418701172
true = tensor([166.])
differenza = tensor([4.1040])


pred =56.73304748535156
true = tensor([58.])
differenza = tensor([1.2670])


pred =136.76797485351562
true = tensor([133.8000])
differenza = tensor([2.9680])


pred =156.45938110351562
true = tensor([158.])
differenza = tensor([1.5406])


