
+++++++++++++++++++++++++++++++++++REPORT+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

LISTA TEST FILE  
dict_keys(['molecule125.ct', 'molecule017.ct', 'molecule142.ct', 'molecule013.ct', 'molecule144.ct', 'molecule115.ct', 'molecule100.ct', 'molecule016.ct', 'molecule014.ct', 'molecule086.ct', 'molecule020.ct', 'molecule037.ct', 'molecule074.ct', 'molecule038.ct', 'molecule024.ct', 'molecule072.ct', 'molecule129.ct', 'molecule136.ct', 'molecule005.ct', 'molecule047.ct', 'molecule122.ct', 'molecule045.ct', 'molecule147.ct', 'molecule063.ct', 'molecule076.ct', 'molecule054.ct', 'molecule084.ct', 'molecule116.ct', 'molecule008.ct', 'molecule011.ct', 'molecule058.ct', 'molecule018.ct', 'molecule078.ct', 'molecule067.ct', 'molecule080.ct', 'molecule062.ct', 'molecule055.ct', 'molecule098.ct', 'molecule006.ct', 'molecule145.ct', 'molecule112.ct', 'molecule095.ct', 'molecule064.ct', 'molecule134.ct', 'molecule030.ct', 'molecule091.ct', 'molecule127.ct', 'molecule051.ct', 'molecule138.ct', 'molecule041.ct', 'molecule096.ct', 'molecule061.ct', 'molecule043.ct', 'molecule105.ct', 'molecule035.ct', 'molecule019.ct', 'molecule034.ct', 'molecule001.ct', 'molecule082.ct', 'molecule057.ct', 'molecule039.ct', 'molecule131.ct', 'molecule102.ct', 'molecule137.ct', 'molecule089.ct', 'molecule044.ct', 'molecule133.ct', 'molecule130.ct', 'molecule110.ct', 'molecule113.ct', 'molecule141.ct', 'molecule103.ct', 'molecule143.ct', 'molecule032.ct', 'molecule042.ct', 'molecule132.ct', 'molecule065.ct', 'molecule123.ct', 'molecule003.ct', 'molecule007.ct', 'molecule118.ct', 'molecule070.ct', 'molecule048.ct', 'molecule150.ct', 'molecule040.ct', 'molecule050.ct', 'molecule128.ct', 'molecule081.ct', 'molecule025.ct', 'molecule033.ct', 'molecule068.ct', 'molecule046.ct', 'molecule075.ct', 'molecule099.ct', 'molecule111.ct', 'molecule140.ct', 'molecule028.ct', 'molecule073.ct', 'molecule077.ct', 'molecule093.ct', 'molecule009.ct', 'molecule121.ct', 'molecule060.ct', 'molecule052.ct', 'molecule027.ct', 'molecule106.ct', 'molecule071.ct', 'molecule087.ct', 'molecule002.ct', 'molecule139.ct', 'molecule119.ct', 'molecule148.ct', 'molecule036.ct', 'molecule107.ct', 'molecule124.ct', 'molecule004.ct', 'molecule149.ct', 'molecule022.ct', 'molecule120.ct', 'molecule094.ct', 'molecule117.ct', 'molecule015.ct', 'molecule090.ct', 'molecule104.ct', 'molecule101.ct', 'molecule049.ct', 'molecule088.ct', 'molecule146.ct', 'molecule021.ct', 'molecule059.ct', 'molecule114.ct', 'molecule126.ct', 'molecule010.ct', 'molecule066.ct', 'molecule085.ct'])----------------------------------------------------------------------------------------------------------

LISTA VALIDATION FILE  
dict_keys(['molecule023.ct', 'molecule053.ct', 'molecule097.ct', 'molecule108.ct', 'molecule056.ct', 'molecule026.ct', 'molecule083.ct', 'molecule069.ct', 'molecule135.ct', 'molecule079.ct', 'molecule031.ct', 'molecule029.ct', 'molecule012.ct', 'molecule109.ct', 'molecule092.ct'])----------------------------------------------------------------------------------------------------------

Our model: 

Net(
  (fc1): Linear(in_features=12, out_features=4, bias=False)
  (fc2): Linear(in_features=4, out_features=1, bias=False)
  (LRelu): LeakyReLU(negative_slope=0.25)
  (fc1Root): Linear(in_features=12, out_features=4, bias=False)
  (fc2Root): Linear(in_features=4, out_features=1, bias=False)
  (LReluRoot): LeakyReLU(negative_slope=0.25)
)
Printing children
------------------------------[Linear(in_features=12, out_features=4, bias=False), Linear(in_features=4, out_features=1, bias=False), LeakyReLU(negative_slope=0.25), Linear(in_features=12, out_features=4, bias=False), Linear(in_features=4, out_features=1, bias=False), LeakyReLU(negative_slope=0.25)]

Printing Modules
------------------------------[Net(
  (fc1): Linear(in_features=12, out_features=4, bias=False)
  (fc2): Linear(in_features=4, out_features=1, bias=False)
  (LRelu): LeakyReLU(negative_slope=0.25)
  (fc1Root): Linear(in_features=12, out_features=4, bias=False)
  (fc2Root): Linear(in_features=4, out_features=1, bias=False)
  (LReluRoot): LeakyReLU(negative_slope=0.25)
), Linear(in_features=12, out_features=4, bias=False), Linear(in_features=4, out_features=1, bias=False), LeakyReLU(negative_slope=0.25), Linear(in_features=12, out_features=4, bias=False), Linear(in_features=4, out_features=1, bias=False), LeakyReLU(negative_slope=0.25)]
The state dict keys: 

odict_keys(['fc1.weight', 'fc2.weight', 'fc1Root.weight', 'fc2Root.weight'])Models state_dict:fc1.weight	torch.Size([4, 12])fc2.weight	torch.Size([1, 4])fc1Root.weight	torch.Size([4, 12])fc2Root.weight	torch.Size([1, 4])OrderedDict([('fc1.weight', tensor([[ 4.3679e-01,  1.0802e-01, -3.6385e-12, -2.6625e-44,  5.1848e-44,
          8.7908e-01,  6.0256e-44,  2.7711e-15, -5.4488e-02,  4.0216e-01,
          5.8314e-01,  1.6434e-01],
        [ 1.0034e+00, -7.9162e-02,  5.6052e-44,  7.4269e-44,  1.4013e-45,
          4.0132e-01,  2.4244e-25, -1.9618e-44, -1.1528e-01,  1.3880e-01,
          5.5563e-02,  6.9696e-02],
        [ 8.4593e-02, -8.3251e-01,  3.5032e-44, -3.7835e-44,  2.5223e-44,
          4.6229e-01, -6.0256e-44,  2.5433e-25, -6.9130e-02,  6.6945e-02,
          3.5297e-02,  5.6002e-02],
        [ 4.7216e-01, -3.1100e-01,  1.1052e-06, -6.5861e-44,  9.1084e-44,
          8.8261e-02, -3.0829e-44,  1.7196e-22,  5.8208e-02,  4.7307e-02,
          2.7018e-03,  2.0407e-02]], device='cuda:0')), ('fc2.weight', tensor([[-1.3641, -1.1236, -1.0186, -0.5121]], device='cuda:0')), ('fc1Root.weight', tensor([[ 4.8876e+00,  4.2220e-01, -3.6434e-43, -1.5302e-42, -4.0778e-43,
          4.9053e+00,  3.8060e+00,  3.3165e+00,  3.6210e+00,  1.2428e+00,
          1.0329e+00,  3.6040e+00],
        [-4.8108e-01, -1.7353e+00, -2.1958e-42, -2.5630e-42,  1.0215e-42,
         -7.4830e-01, -2.2869e-01, -2.4265e-01, -1.5604e+00, -5.3037e-01,
         -1.0854e-01,  1.4736e+00],
        [ 3.8318e+00,  2.0668e-01, -3.7555e-43, -1.5961e-42,  8.4779e-43,
          4.0439e+00,  2.4685e+00,  2.5536e+00,  2.1727e+00,  1.6363e+00,
          1.7086e+00, -3.3718e-01],
        [ 1.5952e+00,  1.3304e+00, -5.3109e-43,  3.3127e-42, -3.2510e-43,
          1.7114e+00,  3.1418e+00,  3.0606e+00,  2.6143e+00,  6.8615e-01,
          3.2781e-01, -5.5469e-01]], device='cuda:0')), ('fc2Root.weight', tensor([[-5.9998,  1.8408, -2.5295, -3.0121]], device='cuda:0'))])
---------------plt.close(fig)    # close the figure window-------------------------------------------------------------------------------------------

 Optimizer's state_dict:
CRITERION = MSELoss()
OPTIMIZER = Adam (
Parameter Group 0
    amsgrad: False
    betas: (0.9, 0.999)
    eps: 1e-08
    lr: 0.001
    weight_decay: 0
)
Tempo di training 200.5396373271942


state	{139803011826816: {'step': 15000, 'exp_avg': tensor([[-3.6702e-01,  1.9457e+00,  7.7927e-14, -4.2039e-45,  1.4013e-45,
         -1.4534e-01,  1.4013e-45, -4.7213e-17, -1.2841e-01,  1.3508e-02,
          5.1335e-02,  2.7454e-02],
        [ 2.3470e-01,  8.4505e-01, -5.6052e-45, -4.2039e-45, -2.8026e-45,
         -6.7137e-02, -6.3970e-27, -2.8026e-45, -1.4110e-01, -8.8891e-02,
          9.9424e-03,  2.6812e-02],
        [-2.0081e-01,  3.8492e-01, -5.6052e-45, -0.0000e+00,  1.4013e-45,
         -1.1437e-02, -1.4013e-45,  1.3976e-26, -1.1017e-01, -1.1017e-01,
          1.4193e-03,  2.0667e-02],
        [ 1.1476e-01,  2.4696e-01, -1.8332e-08,  4.2039e-45, -2.8026e-45,
         -7.7951e-02, -4.2039e-45, -4.7695e-24, -8.6422e-03, -4.8546e-02,
         -6.8833e-03,  6.4681e-03]], device='cuda:0'), 'exp_avg_sq': tensor([[2.9931e+01, 7.2810e+02, 3.5078e-10, 2.6362e-09, 1.2083e-09, 2.9907e+01,
         1.5631e-09, 2.1796e-10, 8.3587e+00, 3.6486e+00, 5.5640e-01, 4.5291e-02],
        [2.1092e+01, 3.8661e+02, 2.6942e-09, 3.3137e-10, 1.7667e-09, 2.0977e+01,
         1.7352e-10, 2.1410e-08, 5.7516e+00, 2.0913e+00, 3.5634e-01, 3.8879e-02],
        [1.6362e+01, 2.9996e+02, 8.0204e-09, 5.6223e-09, 1.2338e-08, 1.6359e+01,
         1.3005e-09, 2.7437e-10, 4.4814e+00, 1.6293e+00, 2.7738e-01, 2.9985e-02],
        [4.2068e+00, 7.6570e+01, 4.5197e-10, 5.5328e-09, 3.0496e-09, 4.1721e+00,
         2.0163e-09, 2.0465e-10, 1.1427e+00, 4.1592e-01, 7.0070e-02, 7.4494e-03]],
       device='cuda:0')}, 139803011827536: {'step': 15000, 'exp_avg': tensor([[-0.0738, -0.1254,  0.3061,  0.1452]], device='cuda:0'), 'exp_avg_sq': tensor([[ 17.5854,  47.8942, 262.5578,  63.5686]], device='cuda:0')}, 139803011827680: {'step': 15000, 'exp_avg': tensor([[-7.0965e-03, -3.4468e-01, -4.2039e-45,  4.2039e-45, -5.6052e-45,
         -6.8448e-03,  1.3041e-02,  6.0938e-03,  8.4558e-03,  3.5201e-02,
          2.0758e-02,  3.4821e-02],
        [-1.6430e-02,  6.1076e-01, -0.0000e+00,  2.8026e-45,  1.4013e-45,
         -2.0214e-02, -1.0432e-04, -3.0578e-04, -9.0053e-03, -1.7038e-02,
         -8.6699e-04,  3.8267e-03],
        [ 2.4018e-02, -3.9408e-01,  2.8026e-45,  2.8026e-45, -0.0000e+00,
          2.7020e-02,  1.7790e-02,  1.8996e-02,  1.2773e-02,  3.6261e-02,
          2.3301e-02, -1.1889e-02],
        [-8.8775e-03, -1.7700e-01, -1.4013e-45,  0.0000e+00,  1.4013e-45,
         -7.2298e-03,  2.4023e-02,  2.2871e-02,  1.5568e-02,  1.3645e-02,
          4.3834e-03, -8.8874e-04]], device='cuda:0'), 'exp_avg_sq': tensor([[4.5496e-02, 3.7256e+01, 5.3883e-11, 7.7091e-11, 1.2219e-10, 4.5467e-02,
         1.7296e-03, 1.3540e-03, 5.4634e-04, 8.0584e-03, 3.7959e-03, 1.0382e-02],
        [3.3252e-02, 4.2838e+01, 2.2570e-11, 4.1533e-13, 7.3108e-12, 3.3337e-02,
         3.9920e-05, 4.8043e-05, 3.4990e-04, 8.1301e-03, 4.5455e-03, 1.2494e-03],
        [8.6757e-02, 1.2133e+02, 5.1031e-11, 9.9607e-11, 2.8459e-10, 8.6865e-02,
         1.0993e-03, 1.1750e-03, 5.5367e-04, 1.2317e-02, 7.4279e-03, 2.3158e-02],
        [7.2799e-03, 7.3188e+00, 8.3690e-12, 1.5150e-13, 8.5660e-13, 7.2622e-03,
         1.7331e-03, 1.6504e-03, 6.9484e-04, 1.6350e-03, 7.6220e-04, 2.2200e-04]],
       device='cuda:0')}, 139803011827896: {'step': 15000, 'exp_avg': tensor([[ 0.0666, -0.5657,  0.0991,  0.1011]], device='cuda:0'), 'exp_avg_sq': tensor([[ 0.0797, 36.4479,  0.1778,  1.2124]], device='cuda:0')}}param_groups	[{'lr': 0.001, 'betas': (0.9, 0.999), 'eps': 1e-08, 'weight_decay': 0, 'amsgrad': False, 'params': [139803011826816, 139803011827536, 139803011827680, 139803011827896]}]
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Average Error Test Dataset= 3.819085947672526
RMSE Train Dataset = [21.75964913141445, 19.864997698084988, 14.356265921743729, 6.591828124925926, 6.290036257592334, 5.997284592659545, 5.696385412056958, 5.389949325011905, 5.249172690465248, 5.184004007761784]
RMSE Test Dataset = [11.823487676647858, 10.937064374695362, 9.402110459429233, 5.225832216707472, 5.429852072876866, 5.337586892200174, 5.300410258411202, 5.23178227677968, 5.029575993468263, 4.981423966302774]
Number of epochs 15000
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
pred =100.64637756347656
true = tensor([106.5000])
differenza = tensor([5.8536])


pred =132.1576690673828
true = tensor([132.7000])
differenza = tensor([0.5423])


pred =149.52777099609375
true = tensor([153.3000])
differenza = tensor([3.7722])


pred =155.3425750732422
true = tensor([155.])
differenza = tensor([0.3426])


pred =145.95266723632812
true = tensor([140.6000])
differenza = tensor([5.3527])


pred =105.93824768066406
true = tensor([99.2000])
differenza = tensor([6.7383])


pred =154.60421752929688
true = tensor([162.2000])
differenza = tensor([7.5958])


pred =135.32411193847656
true = tensor([135.2000])
differenza = tensor([0.1241])


pred =163.87216186523438
true = tensor([160.])
differenza = tensor([3.8722])


pred =159.64830017089844
true = tensor([170.5000])
differenza = tensor([10.8517])


pred =114.74617767333984
true = tensor([115.6000])
differenza = tensor([0.8538])


pred =118.84728240966797
true = tensor([118.2000])
differenza = tensor([0.6473])


pred =61.8197021484375
true = tensor([63.3000])
differenza = tensor([1.4803])


pred =159.0787811279297
true = tensor([161.2000])
differenza = tensor([2.1212])


pred =162.3017578125
true = tensor([169.4400])
differenza = tensor([7.1382])


