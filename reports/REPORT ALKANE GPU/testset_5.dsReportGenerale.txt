
+++++++++++++++++++++++++++++++++++REPORT+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

LISTA TEST FILE  
dict_keys(['molecule132.ct', 'molecule065.ct', 'molecule123.ct', 'molecule003.ct', 'molecule007.ct', 'molecule118.ct', 'molecule070.ct', 'molecule048.ct', 'molecule150.ct', 'molecule040.ct', 'molecule050.ct', 'molecule128.ct', 'molecule081.ct', 'molecule025.ct', 'molecule033.ct', 'molecule068.ct', 'molecule046.ct', 'molecule075.ct', 'molecule099.ct', 'molecule111.ct', 'molecule140.ct', 'molecule028.ct', 'molecule073.ct', 'molecule077.ct', 'molecule093.ct', 'molecule009.ct', 'molecule121.ct', 'molecule060.ct', 'molecule052.ct', 'molecule027.ct', 'molecule106.ct', 'molecule071.ct', 'molecule087.ct', 'molecule002.ct', 'molecule139.ct', 'molecule119.ct', 'molecule148.ct', 'molecule036.ct', 'molecule107.ct', 'molecule124.ct', 'molecule004.ct', 'molecule149.ct', 'molecule022.ct', 'molecule120.ct', 'molecule094.ct', 'molecule117.ct', 'molecule015.ct', 'molecule090.ct', 'molecule104.ct', 'molecule101.ct', 'molecule049.ct', 'molecule088.ct', 'molecule146.ct', 'molecule021.ct', 'molecule059.ct', 'molecule114.ct', 'molecule126.ct', 'molecule010.ct', 'molecule066.ct', 'molecule085.ct', 'molecule023.ct', 'molecule053.ct', 'molecule097.ct', 'molecule108.ct', 'molecule056.ct', 'molecule026.ct', 'molecule083.ct', 'molecule069.ct', 'molecule135.ct', 'molecule079.ct', 'molecule031.ct', 'molecule029.ct', 'molecule012.ct', 'molecule109.ct', 'molecule092.ct', 'molecule125.ct', 'molecule017.ct', 'molecule142.ct', 'molecule013.ct', 'molecule144.ct', 'molecule115.ct', 'molecule100.ct', 'molecule016.ct', 'molecule014.ct', 'molecule086.ct', 'molecule020.ct', 'molecule037.ct', 'molecule074.ct', 'molecule038.ct', 'molecule024.ct', 'molecule072.ct', 'molecule129.ct', 'molecule136.ct', 'molecule005.ct', 'molecule047.ct', 'molecule122.ct', 'molecule045.ct', 'molecule147.ct', 'molecule063.ct', 'molecule076.ct', 'molecule054.ct', 'molecule084.ct', 'molecule116.ct', 'molecule008.ct', 'molecule011.ct', 'molecule058.ct', 'molecule018.ct', 'molecule078.ct', 'molecule067.ct', 'molecule080.ct', 'molecule062.ct', 'molecule055.ct', 'molecule098.ct', 'molecule006.ct', 'molecule145.ct', 'molecule112.ct', 'molecule095.ct', 'molecule064.ct', 'molecule134.ct', 'molecule030.ct', 'molecule091.ct', 'molecule127.ct', 'molecule051.ct', 'molecule138.ct', 'molecule041.ct', 'molecule096.ct', 'molecule061.ct', 'molecule043.ct', 'molecule105.ct', 'molecule035.ct', 'molecule019.ct', 'molecule034.ct', 'molecule001.ct', 'molecule082.ct', 'molecule057.ct'])----------------------------------------------------------------------------------------------------------

LISTA VALIDATION FILE  
dict_keys(['molecule039.ct', 'molecule131.ct', 'molecule102.ct', 'molecule137.ct', 'molecule089.ct', 'molecule044.ct', 'molecule133.ct', 'molecule130.ct', 'molecule110.ct', 'molecule113.ct', 'molecule141.ct', 'molecule103.ct', 'molecule143.ct', 'molecule032.ct', 'molecule042.ct'])----------------------------------------------------------------------------------------------------------

Our model: 

Net(
  (fc1): Linear(in_features=12, out_features=4, bias=False)
  (fc2): Linear(in_features=4, out_features=1, bias=False)
  (LRelu): LeakyReLU(negative_slope=0.25)
  (fc1Root): Linear(in_features=12, out_features=4, bias=False)
  (fc2Root): Linear(in_features=4, out_features=1, bias=False)
  (LReluRoot): LeakyReLU(negative_slope=0.25)
)
Printing children
------------------------------[Linear(in_features=12, out_features=4, bias=False), Linear(in_features=4, out_features=1, bias=False), LeakyReLU(negative_slope=0.25), Linear(in_features=12, out_features=4, bias=False), Linear(in_features=4, out_features=1, bias=False), LeakyReLU(negative_slope=0.25)]

Printing Modules
------------------------------[Net(
  (fc1): Linear(in_features=12, out_features=4, bias=False)
  (fc2): Linear(in_features=4, out_features=1, bias=False)
  (LRelu): LeakyReLU(negative_slope=0.25)
  (fc1Root): Linear(in_features=12, out_features=4, bias=False)
  (fc2Root): Linear(in_features=4, out_features=1, bias=False)
  (LReluRoot): LeakyReLU(negative_slope=0.25)
), Linear(in_features=12, out_features=4, bias=False), Linear(in_features=4, out_features=1, bias=False), LeakyReLU(negative_slope=0.25), Linear(in_features=12, out_features=4, bias=False), Linear(in_features=4, out_features=1, bias=False), LeakyReLU(negative_slope=0.25)]
The state dict keys: 

odict_keys(['fc1.weight', 'fc2.weight', 'fc1Root.weight', 'fc2Root.weight'])Models state_dict:fc1.weight	torch.Size([4, 12])fc2.weight	torch.Size([1, 4])fc1Root.weight	torch.Size([4, 12])fc2Root.weight	torch.Size([1, 4])OrderedDict([('fc1.weight', tensor([[ 6.4775e-01, -4.2778e-01,  7.7659e-25,  1.4013e-44, -1.9618e-44,
          5.6394e-01, -8.1275e-44, -9.0719e-14, -2.2592e-02,  4.6441e-01,
          2.1198e-01,  1.0893e-01],
        [-1.7626e-02,  3.9631e-02, -2.6803e-09,  2.7755e-14, -1.8217e-44,
         -1.9959e-02,  2.7055e-10,  5.0447e-44, -9.5479e-04, -4.3564e-03,
         -1.2761e-03, -5.8108e-04],
        [ 5.9242e-01, -2.5160e-01, -9.2486e-44, -3.5065e-09, -3.7835e-44,
          2.7215e-01,  5.1577e-08,  4.6456e-10,  6.8312e-02,  1.9377e-01,
          5.5786e-02,  3.1293e-02],
        [ 5.3614e-01,  8.8927e-02,  5.3677e-11, -8.2558e-05, -5.4185e-22,
          4.4864e-01,  8.4078e-44,  8.1275e-44,  7.7425e-02, -2.0934e-02,
          4.7666e-01,  5.4969e-03]], device='cuda:1')), ('fc2.weight', tensor([[-1.7863,  0.1108, -0.8399, -0.8977]], device='cuda:1')), ('fc1Root.weight', tensor([[-1.3181e+00, -1.1251e+00,  1.7895e-42, -1.2177e-42,  7.8473e-44,
         -8.5551e-01, -2.6207e+00, -2.6542e+00, -1.6035e+00,  1.6169e-02,
         -5.2248e-03, -5.5047e-01],
        [ 5.8835e+00,  3.7246e-01, -2.0459e-43,  7.9874e-43, -7.2587e-43,
          6.4392e+00,  8.1763e+00,  8.1075e+00,  5.8108e+00,  6.3881e-01,
          1.2371e+00,  7.3461e-01],
        [-1.4546e+00, -1.4136e+00,  8.2957e-43, -9.0804e-43, -2.3640e-07,
         -1.5352e+00, -1.8872e+00, -2.1347e+00, -1.0994e+00, -5.3452e-01,
         -1.7627e-01, -4.4545e-01],
        [-1.6047e+00, -9.5451e-01,  3.1110e-06,  2.3388e-42, -9.0384e-43,
         -8.9998e-01, -2.5606e+00, -2.4201e+00, -1.1771e+00, -7.4756e-02,
         -1.7058e-01, -4.9346e-01]], device='cuda:1')), ('fc2Root.weight', tensor([[ 1.6310, -5.4251,  1.1755,  1.6670]], device='cuda:1'))])
---------------plt.close(fig)    # close the figure window-------------------------------------------------------------------------------------------

 Optimizer's state_dict:
CRITERION = MSELoss()
OPTIMIZER = Adam (
Parameter Group 0
    amsgrad: False
    betas: (0.9, 0.999)
    eps: 1e-08
    lr: 0.001
    weight_decay: 0
)
Tempo di training 198.75189304351807


state	{140256954536224: {'step': 15000, 'exp_avg': tensor([[ 4.1102e-01, -3.1196e-01, -1.5741e-26, -2.8026e-45, -4.2039e-45,
          3.5760e-01,  2.8026e-45,  2.5167e-15,  1.1646e-01,  1.6866e-01,
          1.4209e-01,  5.8253e-02],
        [-1.1313e-02,  2.5946e-02,  5.4476e-10, -1.4937e-15, -1.4013e-45,
         -1.2828e-02, -9.7899e-12, -4.2039e-45, -2.6242e-03, -8.1619e-04,
         -9.1013e-04, -1.9232e-04],
        [ 3.7698e-01, -1.7905e-01, -0.0000e+00,  9.9563e-11,  2.8026e-45,
          1.7267e-01,  3.4871e-09, -1.3831e-11,  1.0516e-01,  6.3732e-02,
          3.8777e-02,  1.4661e-02],
        [ 1.8856e-01,  9.1451e-01, -2.0335e-12,  3.7134e-06,  1.3361e-23,
          1.3274e-01, -0.0000e+00, -4.2039e-45,  1.1523e-01,  7.0595e-02,
          2.7325e-03,  2.0866e-03]], device='cuda:1'), 'exp_avg_sq': tensor([[1.0947e+02, 2.2466e+03, 2.9943e-10, 6.7490e-10, 2.4087e-09, 1.0947e+02,
         3.8702e-09, 2.6096e-10, 2.6284e+01, 1.3852e+01, 1.5863e+00, 1.9289e-01],
        [1.1674e-01, 2.6706e+00, 4.9385e-10, 5.0234e-10, 5.8928e-09, 1.1780e-01,
         3.1511e-10, 8.5744e-09, 2.8452e-02, 1.4489e-02, 1.6935e-03, 2.1506e-04],
        [2.4285e+01, 4.9723e+02, 1.7514e-09, 2.6459e-10, 6.2742e-09, 2.4227e+01,
         8.9217e-10, 2.7106e-10, 5.8191e+00, 3.0659e+00, 3.4909e-01, 4.1895e-02],
        [2.3043e+01, 4.2753e+02, 5.8774e-10, 3.8979e-10, 2.3904e-10, 2.3032e+01,
         2.6138e-09, 4.2129e-09, 6.5185e+00, 2.2644e+00, 8.7553e-01, 2.9237e-03]],
       device='cuda:1')}, 140256954537088: {'step': 15000, 'exp_avg': tensor([[-0.7968,  0.0516, -0.3834, -0.1749]], device='cuda:1'), 'exp_avg_sq': tensor([[3.7496e+02, 3.1216e-01, 1.5881e+02, 1.9249e+01]], device='cuda:1')}, 140256954537232: {'step': 15000, 'exp_avg': tensor([[-3.8216e-03, -1.3049e-02, -4.2039e-45, -0.0000e+00, -5.6052e-45,
          1.5166e-03, -2.6763e-02, -2.7149e-02, -4.7350e-03, -1.1543e-02,
         -2.8611e-04, -3.8837e-04],
        [ 1.8443e-02, -9.7268e-01, -5.6052e-45,  4.2039e-45, -2.8026e-45,
          2.4853e-02,  4.7099e-02,  4.6305e-02,  2.1189e-02,  6.0209e-02,
          1.5016e-02, -1.3637e-03],
        [-8.5822e-03, -1.6388e-02, -4.2039e-45,  1.4013e-45,  1.0599e-08,
         -9.5120e-03, -1.9288e-02, -2.2147e-02, -2.7692e-03, -1.4634e-02,
         -2.2019e-03, -8.4668e-04],
        [-6.8783e-03, -1.1080e-02, -1.4927e-10, -2.8026e-45,  4.2039e-45,
          1.2546e-03, -2.5991e-02, -2.4369e-02,  5.3445e-04, -1.2852e-02,
         -2.2015e-03,  4.0326e-04]], device='cuda:1'), 'exp_avg_sq': tensor([[3.2217e-02, 3.5268e+01, 4.3703e-11, 9.0076e-11, 5.5311e-10, 3.2189e-02,
         1.1568e-03, 1.1820e-03, 1.8583e-04, 7.3608e-03, 4.2282e-03, 1.1928e-03],
        [5.1061e-01, 6.0213e+02, 3.6010e-10, 1.8217e-10, 3.0891e-10, 5.1051e-01,
         8.7242e-03, 8.6490e-03, 1.7120e-03, 1.9521e-01, 4.2897e-02, 7.0576e-03],
        [1.5717e-02, 1.7523e+01, 1.3888e-10, 1.8449e-11, 1.5271e-13, 1.5735e-02,
         7.0852e-04, 8.6369e-04, 9.2093e-05, 3.7724e-03, 2.0546e-03, 5.6165e-04],
        [3.2457e-02, 3.6210e+01, 1.3664e-13, 9.0135e-12, 9.6733e-11, 3.2363e-02,
         1.1056e-03, 1.0049e-03, 8.6487e-05, 7.3594e-03, 4.2490e-03, 1.1727e-03]],
       device='cuda:1')}, 140256954537448: {'step': 15000, 'exp_avg': tensor([[0.0119, 0.1852, 0.0024, 0.0159]], device='cuda:1'), 'exp_avg_sq': tensor([[14.5787,  0.5170, 22.8631,  9.4645]], device='cuda:1')}}param_groups	[{'lr': 0.001, 'betas': (0.9, 0.999), 'eps': 1e-08, 'weight_decay': 0, 'amsgrad': False, 'params': [140256954536224, 140256954537088, 140256954537232, 140256954537448]}]
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Average Error Test Dataset= 4.826710001627604
RMSE Train Dataset = [21.853505762493306, 20.28076472238188, 14.741190720475123, 8.959016522519715, 6.807903734129459, 6.238849305891359, 6.10801459188161, 6.014048659639991, 5.945484775448331, 5.895429114334144]
RMSE Test Dataset = [8.028162975228888, 7.132522894671813, 7.840037892308431, 6.448149825293577, 6.413970314692289, 6.450121312146481, 6.379711429682803, 6.289882213175, 6.315202795353095, 6.327903159691803]
Number of epochs 15000
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
pred =117.56999969482422
true = tensor([118.5000])
differenza = tensor([0.9300])


pred =165.8708038330078
true = tensor([167.])
differenza = tensor([1.1292])


pred =164.42767333984375
true = tensor([153.])
differenza = tensor([11.4277])


pred =165.17787170410156
true = tensor([158.3000])
differenza = tensor([6.8779])


pred =162.61114501953125
true = tensor([164.5900])
differenza = tensor([1.9789])


pred =133.953125
true = tensor([133.8300])
differenza = tensor([0.1231])


pred =157.60601806640625
true = tensor([144.8000])
differenza = tensor([12.8060])


pred =163.00650024414062
true = tensor([162.1000])
differenza = tensor([0.9065])


pred =167.51052856445312
true = tensor([157.5000])
differenza = tensor([10.0105])


pred =174.36363220214844
true = tensor([166.3000])
differenza = tensor([8.0636])


pred =159.6973876953125
true = tensor([158.8400])
differenza = tensor([0.8574])


pred =161.52195739746094
true = tensor([158.])
differenza = tensor([3.5220])


pred =161.43504333496094
true = tensor([167.])
differenza = tensor([5.5650])


pred =113.60406494140625
true = tensor([115.6000])
differenza = tensor([1.9959])


pred =126.79296875
true = tensor([133.])
differenza = tensor([6.2070])


