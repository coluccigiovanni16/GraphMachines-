
+++++++++++++++++++++++++++++++++++REPORT+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

LISTA TEST FILE  
dict_keys(['molecule072.ct', 'molecule129.ct', 'molecule136.ct', 'molecule005.ct', 'molecule047.ct', 'molecule122.ct', 'molecule045.ct', 'molecule147.ct', 'molecule063.ct', 'molecule076.ct', 'molecule054.ct', 'molecule084.ct', 'molecule116.ct', 'molecule008.ct', 'molecule011.ct', 'molecule058.ct', 'molecule018.ct', 'molecule078.ct', 'molecule067.ct', 'molecule080.ct', 'molecule062.ct', 'molecule055.ct', 'molecule098.ct', 'molecule006.ct', 'molecule145.ct', 'molecule112.ct', 'molecule095.ct', 'molecule064.ct', 'molecule134.ct', 'molecule030.ct', 'molecule091.ct', 'molecule127.ct', 'molecule051.ct', 'molecule138.ct', 'molecule041.ct', 'molecule096.ct', 'molecule061.ct', 'molecule043.ct', 'molecule105.ct', 'molecule035.ct', 'molecule019.ct', 'molecule034.ct', 'molecule001.ct', 'molecule082.ct', 'molecule057.ct', 'molecule039.ct', 'molecule131.ct', 'molecule102.ct', 'molecule137.ct', 'molecule089.ct', 'molecule044.ct', 'molecule133.ct', 'molecule130.ct', 'molecule110.ct', 'molecule113.ct', 'molecule141.ct', 'molecule103.ct', 'molecule143.ct', 'molecule032.ct', 'molecule042.ct', 'molecule132.ct', 'molecule065.ct', 'molecule123.ct', 'molecule003.ct', 'molecule007.ct', 'molecule118.ct', 'molecule070.ct', 'molecule048.ct', 'molecule150.ct', 'molecule040.ct', 'molecule050.ct', 'molecule128.ct', 'molecule081.ct', 'molecule025.ct', 'molecule033.ct', 'molecule068.ct', 'molecule046.ct', 'molecule075.ct', 'molecule099.ct', 'molecule111.ct', 'molecule140.ct', 'molecule028.ct', 'molecule073.ct', 'molecule077.ct', 'molecule093.ct', 'molecule009.ct', 'molecule121.ct', 'molecule060.ct', 'molecule052.ct', 'molecule027.ct', 'molecule106.ct', 'molecule071.ct', 'molecule087.ct', 'molecule002.ct', 'molecule139.ct', 'molecule119.ct', 'molecule148.ct', 'molecule036.ct', 'molecule107.ct', 'molecule124.ct', 'molecule004.ct', 'molecule149.ct', 'molecule022.ct', 'molecule120.ct', 'molecule094.ct', 'molecule117.ct', 'molecule015.ct', 'molecule090.ct', 'molecule104.ct', 'molecule101.ct', 'molecule049.ct', 'molecule088.ct', 'molecule146.ct', 'molecule021.ct', 'molecule059.ct', 'molecule114.ct', 'molecule126.ct', 'molecule010.ct', 'molecule066.ct', 'molecule085.ct', 'molecule023.ct', 'molecule053.ct', 'molecule097.ct', 'molecule108.ct', 'molecule056.ct', 'molecule026.ct', 'molecule083.ct', 'molecule069.ct', 'molecule135.ct', 'molecule079.ct', 'molecule031.ct', 'molecule029.ct', 'molecule012.ct', 'molecule109.ct', 'molecule092.ct'])----------------------------------------------------------------------------------------------------------

LISTA VALIDATION FILE  
dict_keys(['molecule125.ct', 'molecule017.ct', 'molecule142.ct', 'molecule013.ct', 'molecule144.ct', 'molecule115.ct', 'molecule100.ct', 'molecule016.ct', 'molecule014.ct', 'molecule086.ct', 'molecule020.ct', 'molecule037.ct', 'molecule074.ct', 'molecule038.ct', 'molecule024.ct'])----------------------------------------------------------------------------------------------------------

Our model: 

Net(
  (fc1): Linear(in_features=12, out_features=4, bias=False)
  (fc2): Linear(in_features=4, out_features=1, bias=False)
  (LRelu): LeakyReLU(negative_slope=0.25)
  (fc1Root): Linear(in_features=12, out_features=4, bias=False)
  (fc2Root): Linear(in_features=4, out_features=1, bias=False)
  (LReluRoot): LeakyReLU(negative_slope=0.25)
)
Printing children
------------------------------[Linear(in_features=12, out_features=4, bias=False), Linear(in_features=4, out_features=1, bias=False), LeakyReLU(negative_slope=0.25), Linear(in_features=12, out_features=4, bias=False), Linear(in_features=4, out_features=1, bias=False), LeakyReLU(negative_slope=0.25)]

Printing Modules
------------------------------[Net(
  (fc1): Linear(in_features=12, out_features=4, bias=False)
  (fc2): Linear(in_features=4, out_features=1, bias=False)
  (LRelu): LeakyReLU(negative_slope=0.25)
  (fc1Root): Linear(in_features=12, out_features=4, bias=False)
  (fc2Root): Linear(in_features=4, out_features=1, bias=False)
  (LReluRoot): LeakyReLU(negative_slope=0.25)
), Linear(in_features=12, out_features=4, bias=False), Linear(in_features=4, out_features=1, bias=False), LeakyReLU(negative_slope=0.25), Linear(in_features=12, out_features=4, bias=False), Linear(in_features=4, out_features=1, bias=False), LeakyReLU(negative_slope=0.25)]
The state dict keys: 

odict_keys(['fc1.weight', 'fc2.weight', 'fc1Root.weight', 'fc2Root.weight'])Models state_dict:fc1.weight	torch.Size([4, 12])fc2.weight	torch.Size([1, 4])fc1Root.weight	torch.Size([4, 12])fc2Root.weight	torch.Size([1, 4])OrderedDict([('fc1.weight', tensor([[ 7.4844e-01, -1.5859e-01, -1.2051e-43,  1.4338e-13,  3.2230e-44,
          3.4741e-01,  1.2418e-05, -1.4013e-45, -3.9648e-01,  9.3542e-02,
          2.8400e-01,  3.4558e-01],
        [ 4.5879e-01, -1.9420e-01,  4.9045e-44,  1.2472e-43, -1.4013e-44,
          6.0061e-01, -1.6938e-07, -2.6961e-04, -3.8713e-01,  1.5580e-01,
          2.2518e-01,  3.0125e-01],
        [ 6.8013e-01, -4.1256e-01, -8.1275e-44, -6.5861e-44,  1.7831e-15,
          5.9343e-01,  3.1693e-11,  7.9196e-08, -1.7537e-01,  9.6144e-05,
          2.1317e-01,  3.0073e-01],
        [-5.0471e-02,  3.6593e-01, -5.4651e-44, -1.9618e-44,  2.3822e-44,
         -6.4218e-02, -4.2039e-45,  2.3928e-11,  1.0582e-02, -6.9459e-04,
         -1.3757e-02, -2.3841e-02]], device='cuda:1')), ('fc2.weight', tensor([[-1.2640, -1.1371, -1.1457,  0.4188]], device='cuda:1')), ('fc1Root.weight', tensor([[ 3.2750e+00,  7.0508e-01,  8.1275e-44, -1.9548e-42, -1.2037e-42,
          2.9104e+00,  3.3449e+00,  3.8092e+00,  3.4095e+00,  8.6053e-01,
          3.4440e+00, -5.1877e-01],
        [ 4.2931e+00,  4.2771e-01,  1.0776e-42, -1.4840e-42, -4.3440e-43,
          4.4822e+00,  3.8057e+00,  4.0023e+00,  3.8713e+00,  1.9108e+00,
          4.1549e-01,  2.5678e+00],
        [-2.2441e+00, -1.5646e+00,  5.2661e-42, -3.7695e-43, -6.2918e-43,
         -2.0590e+00, -6.6381e-01, -9.6300e-01, -1.0394e+00, -2.4839e+00,
         -1.1028e+00,  1.2657e+00],
        [ 1.8102e+00,  1.8389e+00,  4.6607e-42, -2.4663e-43, -2.0543e-42,
          2.2207e+00,  3.0085e+00,  3.0440e+00,  2.3992e+00,  1.0954e+00,
          8.5455e-01, -4.9853e-01]], device='cuda:1')), ('fc2Root.weight', tensor([[-3.4883, -5.1341,  2.4293, -2.8015]], device='cuda:1'))])
---------------plt.close(fig)    # close the figure window-------------------------------------------------------------------------------------------

 Optimizer's state_dict:
CRITERION = MSELoss()
OPTIMIZER = Adam (
Parameter Group 0
    amsgrad: False
    betas: (0.9, 0.999)
    eps: 1e-08
    lr: 0.001
    weight_decay: 0
)
Tempo di training 187.41349720954895


state	{140041514234432: {'step': 15000, 'exp_avg': tensor([[ 4.8348e-01, -6.9118e-01,  2.8026e-45, -3.6964e-15, -4.2039e-45,
          2.6241e-01, -3.5276e-07, -2.8026e-45, -2.9726e-02,  1.2840e-01,
          1.0586e-01,  4.7742e-02],
        [ 3.1672e-01, -6.5021e-01,  1.4013e-45, -1.4013e-45, -1.4013e-45,
          3.9490e-01,  5.2641e-09,  6.2024e-06, -4.3590e-02,  1.5513e-01,
          7.8456e-02,  3.7607e-02],
        [ 4.3927e-01, -7.7465e-01,  4.2039e-45, -1.4013e-45, -3.6266e-17,
          3.9147e-01, -8.3281e-13, -2.0787e-09,  7.4574e-02,  6.9589e-02,
          7.1446e-02,  3.6340e-02],
        [-3.3781e-02,  2.5209e-01,  4.2039e-45,  1.4013e-45, -5.6052e-45,
         -4.1436e-02, -1.4013e-45, -1.1494e-12, -9.7922e-03, -6.7186e-03,
         -3.3682e-03, -1.3159e-03]], device='cuda:1'), 'exp_avg_sq': tensor([[2.6088e+01, 2.9768e+02, 1.3853e-09, 2.0276e-10, 8.9550e-09, 2.6062e+01,
         2.8518e-10, 4.3440e-09, 6.9686e+00, 2.6604e+00, 4.1720e-01, 4.8169e-02],
        [2.0886e+01, 2.3830e+02, 7.8962e-10, 7.6909e-10, 1.0593e-09, 2.0898e+01,
         3.3747e-10, 5.3336e-10, 5.5905e+00, 2.1438e+00, 3.3048e-01, 3.7798e-02],
        [2.0617e+01, 2.3461e+02, 5.0275e-09, 4.3252e-10, 1.7132e-10, 2.0605e+01,
         2.0437e-10, 2.6272e-10, 5.4938e+00, 2.0963e+00, 3.2415e-01, 3.7583e-02],
        [2.4316e-01, 2.9607e+00, 5.1415e-10, 3.2841e-10, 2.8322e-09, 2.4466e-01,
         6.4704e-09, 3.1513e-10, 6.5047e-02, 2.4961e-02, 3.8187e-03, 4.4942e-04]],
       device='cuda:1')}, 140041514234864: {'step': 15000, 'exp_avg': tensor([[-0.6376, -0.6045, -0.7475,  0.2447]], device='cuda:1'), 'exp_avg_sq': tensor([[ 34.7063,  40.1433, 109.9201,   3.0798]], device='cuda:1')}, 140041514235008: {'step': 15000, 'exp_avg': tensor([[-5.5455e-03,  1.3169e-01,  4.2039e-45, -1.4013e-45,  2.8026e-45,
         -1.0403e-02,  1.9990e-02,  2.6179e-02,  2.8280e-02,  3.1766e-02,
          1.9992e-02, -8.6709e-03],
        [-4.6191e-02,  8.3678e-02, -2.8026e-45,  1.4013e-45,  5.6052e-45,
         -4.3674e-02,  1.4505e-02,  1.7127e-02,  2.6312e-02,  2.0955e-02,
          2.6166e-03, -2.4380e-04],
        [ 1.5159e-02,  1.1124e-01, -2.8026e-45, -4.2039e-45,  2.8026e-45,
          1.7624e-02, -4.5980e-03, -8.5979e-03, -1.0913e-02, -3.0394e-02,
          1.5590e-02,  2.1684e-02],
        [-2.0375e-02,  2.4141e-02, -4.2039e-45, -4.2039e-45,  2.8026e-45,
         -1.4903e-02,  2.0356e-02,  2.0828e-02,  1.8206e-02,  1.3849e-02,
          2.6696e-03, -8.0668e-03]], device='cuda:1'), 'exp_avg_sq': tensor([[1.0331e-02, 5.3486e+00, 8.4118e-11, 4.1175e-12, 4.9125e-11, 1.0341e-02,
         1.4961e-03, 1.9316e-03, 1.7809e-03, 6.7058e-03, 2.6128e-03, 5.3726e-04],
        [5.5450e-02, 3.5055e+01, 2.6659e-11, 2.2172e-11, 2.3901e-09, 5.5073e-02,
         1.6115e-03, 1.7742e-03, 2.0190e-03, 2.1420e-02, 1.1574e-02, 2.4952e-02],
        [4.2806e-02, 3.8351e+01, 2.3335e-13, 3.2126e-11, 1.3134e-11, 4.2891e-02,
         1.7747e-04, 3.1430e-04, 4.0119e-04, 1.2603e-02, 6.8246e-03, 3.6230e-03],
        [6.4076e-03, 3.3624e+00, 1.3717e-12, 8.3592e-11, 2.5266e-12, 6.2800e-03,
         1.4006e-03, 1.4307e-03, 9.2791e-04, 1.5809e-03, 7.3269e-04, 4.0231e-04]],
       device='cuda:1')}, 140041514235224: {'step': 15000, 'exp_avg': tensor([[ 0.0536,  0.1214, -0.1157,  0.0439]], device='cuda:1'), 'exp_avg_sq': tensor([[ 0.1761,  0.1503, 12.3710,  1.3186]], device='cuda:1')}}param_groups	[{'lr': 0.001, 'betas': (0.9, 0.999), 'eps': 1e-08, 'weight_decay': 0, 'amsgrad': False, 'params': [140041514234432, 140041514234864, 140041514235008, 140041514235224]}]
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Average Error Test Dataset= 3.282556406656901
RMSE Train Dataset = [21.757634368660405, 19.812982114106553, 16.117706305270882, 7.87359219032153, 6.461602284042901, 6.333917523930286, 6.102671191585486, 5.9438946470676495, 5.504812216124183, 5.410315776359709]
RMSE Test Dataset = [8.613816239054286, 8.557710742188746, 7.2072305295111505, 4.027546208765967, 5.582891399296853, 5.508537948124506, 5.022924512711732, 4.965865155432974, 4.2448140087202795, 4.316772776788338]
Number of epochs 15000
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
pred =159.337890625
true = tensor([164.3100])
differenza = tensor([4.9721])


pred =88.66602325439453
true = tensor([89.8000])
differenza = tensor([1.1340])


pred =156.64993286132812
true = tensor([159.8700])
differenza = tensor([3.2201])


pred =61.34842300415039
true = tensor([69.])
differenza = tensor([7.6516])


pred =161.39894104003906
true = tensor([167.8000])
differenza = tensor([6.4011])


pred =158.16888427734375
true = tensor([163.])
differenza = tensor([4.8311])


pred =156.7957000732422
true = tensor([147.])
differenza = tensor([9.7957])


pred =84.86930847167969
true = tensor([86.1000])
differenza = tensor([1.2307])


pred =77.96609497070312
true = tensor([80.9000])
differenza = tensor([2.9339])


pred =159.44883728027344
true = tensor([159.])
differenza = tensor([0.4488])


pred =93.34422302246094
true = tensor([92.])
differenza = tensor([1.3442])


pred =117.58597564697266
true = tensor([118.])
differenza = tensor([0.4140])


pred =144.48300170898438
true = tensor([141.2000])
differenza = tensor([3.2830])


pred =118.47801208496094
true = tensor([117.7000])
differenza = tensor([0.7780])


pred =109.19995880126953
true = tensor([110.])
differenza = tensor([0.8000])


