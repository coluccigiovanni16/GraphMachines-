
+++++++++++++++++++++++++++++++++++REPORT+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

LISTA TEST FILE  
dict_keys(['molecule039.ct', 'molecule131.ct', 'molecule102.ct', 'molecule137.ct', 'molecule089.ct', 'molecule044.ct', 'molecule133.ct', 'molecule130.ct', 'molecule110.ct', 'molecule113.ct', 'molecule141.ct', 'molecule103.ct', 'molecule143.ct', 'molecule032.ct', 'molecule042.ct', 'molecule132.ct', 'molecule065.ct', 'molecule123.ct', 'molecule003.ct', 'molecule007.ct', 'molecule118.ct', 'molecule070.ct', 'molecule048.ct', 'molecule150.ct', 'molecule040.ct', 'molecule050.ct', 'molecule128.ct', 'molecule081.ct', 'molecule025.ct', 'molecule033.ct', 'molecule068.ct', 'molecule046.ct', 'molecule075.ct', 'molecule099.ct', 'molecule111.ct', 'molecule140.ct', 'molecule028.ct', 'molecule073.ct', 'molecule077.ct', 'molecule093.ct', 'molecule009.ct', 'molecule121.ct', 'molecule060.ct', 'molecule052.ct', 'molecule027.ct', 'molecule106.ct', 'molecule071.ct', 'molecule087.ct', 'molecule002.ct', 'molecule139.ct', 'molecule119.ct', 'molecule148.ct', 'molecule036.ct', 'molecule107.ct', 'molecule124.ct', 'molecule004.ct', 'molecule149.ct', 'molecule022.ct', 'molecule120.ct', 'molecule094.ct', 'molecule117.ct', 'molecule015.ct', 'molecule090.ct', 'molecule104.ct', 'molecule101.ct', 'molecule049.ct', 'molecule088.ct', 'molecule146.ct', 'molecule021.ct', 'molecule059.ct', 'molecule114.ct', 'molecule126.ct', 'molecule010.ct', 'molecule066.ct', 'molecule085.ct', 'molecule023.ct', 'molecule053.ct', 'molecule097.ct', 'molecule108.ct', 'molecule056.ct', 'molecule026.ct', 'molecule083.ct', 'molecule069.ct', 'molecule135.ct', 'molecule079.ct', 'molecule031.ct', 'molecule029.ct', 'molecule012.ct', 'molecule109.ct', 'molecule092.ct', 'molecule125.ct', 'molecule017.ct', 'molecule142.ct', 'molecule013.ct', 'molecule144.ct', 'molecule115.ct', 'molecule100.ct', 'molecule016.ct', 'molecule014.ct', 'molecule086.ct', 'molecule020.ct', 'molecule037.ct', 'molecule074.ct', 'molecule038.ct', 'molecule024.ct', 'molecule072.ct', 'molecule129.ct', 'molecule136.ct', 'molecule005.ct', 'molecule047.ct', 'molecule122.ct', 'molecule045.ct', 'molecule147.ct', 'molecule063.ct', 'molecule076.ct', 'molecule054.ct', 'molecule084.ct', 'molecule116.ct', 'molecule008.ct', 'molecule011.ct', 'molecule058.ct', 'molecule018.ct', 'molecule078.ct', 'molecule067.ct', 'molecule080.ct', 'molecule062.ct', 'molecule055.ct', 'molecule098.ct', 'molecule006.ct', 'molecule145.ct', 'molecule112.ct', 'molecule095.ct', 'molecule064.ct', 'molecule134.ct', 'molecule030.ct'])----------------------------------------------------------------------------------------------------------

LISTA VALIDATION FILE  
dict_keys(['molecule091.ct', 'molecule127.ct', 'molecule051.ct', 'molecule138.ct', 'molecule041.ct', 'molecule096.ct', 'molecule061.ct', 'molecule043.ct', 'molecule105.ct', 'molecule035.ct', 'molecule019.ct', 'molecule034.ct', 'molecule001.ct', 'molecule082.ct', 'molecule057.ct'])----------------------------------------------------------------------------------------------------------

Our model: 

Net(
  (fc1): Linear(in_features=12, out_features=4, bias=False)
  (fc2): Linear(in_features=4, out_features=1, bias=False)
  (LRelu): LeakyReLU(negative_slope=0.25)
  (fc1Root): Linear(in_features=12, out_features=4, bias=False)
  (fc2Root): Linear(in_features=4, out_features=1, bias=False)
  (LReluRoot): LeakyReLU(negative_slope=0.25)
)
Printing children
------------------------------[Linear(in_features=12, out_features=4, bias=False), Linear(in_features=4, out_features=1, bias=False), LeakyReLU(negative_slope=0.25), Linear(in_features=12, out_features=4, bias=False), Linear(in_features=4, out_features=1, bias=False), LeakyReLU(negative_slope=0.25)]

Printing Modules
------------------------------[Net(
  (fc1): Linear(in_features=12, out_features=4, bias=False)
  (fc2): Linear(in_features=4, out_features=1, bias=False)
  (LRelu): LeakyReLU(negative_slope=0.25)
  (fc1Root): Linear(in_features=12, out_features=4, bias=False)
  (fc2Root): Linear(in_features=4, out_features=1, bias=False)
  (LReluRoot): LeakyReLU(negative_slope=0.25)
), Linear(in_features=12, out_features=4, bias=False), Linear(in_features=4, out_features=1, bias=False), LeakyReLU(negative_slope=0.25), Linear(in_features=12, out_features=4, bias=False), Linear(in_features=4, out_features=1, bias=False), LeakyReLU(negative_slope=0.25)]
The state dict keys: 

odict_keys(['fc1.weight', 'fc2.weight', 'fc1Root.weight', 'fc2Root.weight'])Models state_dict:fc1.weight	torch.Size([4, 12])fc2.weight	torch.Size([1, 4])fc1Root.weight	torch.Size([4, 12])fc2Root.weight	torch.Size([1, 4])OrderedDict([('fc1.weight', tensor([[ 6.6923e-01,  6.3926e-01, -1.2191e-43, -4.3654e-25, -8.6881e-44,
          9.9503e-01,  8.9683e-44,  9.2486e-44, -3.3069e-01,  1.9316e-01,
          3.9326e-01,  4.1943e-01],
        [-1.9911e-01, -5.5910e-01, -3.0829e-44, -2.5223e-44, -8.3758e-15,
         -7.0886e-01,  1.3374e-07, -8.4078e-45,  2.1567e-01, -2.9301e-02,
         -9.0852e-02, -1.0579e-01],
        [-1.0115e-01, -1.5995e-01, -6.9712e-17, -9.2486e-44,  9.1084e-44,
         -1.4167e-01,  6.0256e-44,  1.4013e-45,  2.5734e-02, -5.3226e-03,
         -2.0843e-02, -2.6082e-02],
        [-6.4347e-02, -1.2044e-01, -3.0381e-08,  4.6243e-44,  5.6052e-45,
         -4.9228e-02, -4.7644e-44, -6.8664e-44,  1.2321e-02, -3.2066e-03,
         -1.1518e-02, -1.4394e-02]], device='cuda:2')), ('fc2.weight', tensor([[ 1.1859, -1.2831, -0.3279, -0.1790]], device='cuda:2')), ('fc1Root.weight', tensor([[ 3.9478e+00, -6.7370e-01,  1.7965e-42,  2.8468e-08,  2.4329e-11,
          4.3428e+00,  7.3288e-43, -6.6141e-43,  4.6117e+00,  2.1265e+00,
          7.9235e-01,  2.6226e+00],
        [-1.3891e+00,  1.7841e+00, -9.2065e-43, -9.5288e-44, -1.5288e-42,
         -1.5720e+00,  1.1981e-42, -4.0498e-43, -1.1984e+00, -1.5180e+00,
         -8.1227e-01,  1.0490e+00],
        [ 4.8238e+00, -1.1091e+00,  4.5864e-42, -7.4129e-43,  4.0750e-42,
          5.1316e+00,  7.6371e-43,  1.3537e-42,  4.3851e+00, -1.7360e-01,
          1.5804e+00,  4.1185e+00],
        [-1.8916e+00,  1.6765e+00,  1.3060e-42, -9.9632e-43,  1.2695e-13,
         -9.5878e-01,  7.5670e-44, -5.9135e-43, -1.5950e+00, -1.6883e+00,
         -9.9166e-01,  1.2451e+00]], device='cuda:2')), ('fc2Root.weight', tensor([[-3.2977,  2.2308, -3.9417,  2.8407]], device='cuda:2'))])
---------------plt.close(fig)    # close the figure window-------------------------------------------------------------------------------------------

 Optimizer's state_dict:
CRITERION = MSELoss()
OPTIMIZER = Adam (
Parameter Group 0
    amsgrad: False
    betas: (0.9, 0.999)
    eps: 1e-08
    lr: 0.001
    weight_decay: 0
)
Tempo di training 196.33114099502563


state	{140293740695624: {'step': 15000, 'exp_avg': tensor([[-6.6141e-01, -1.7776e+00,  2.8026e-45,  1.1908e-26,  4.2039e-45,
         -4.8272e-01, -4.2039e-45, -2.8026e-45, -4.7607e-01, -1.6086e-01,
         -3.8660e-02,  1.8436e-02],
        [ 1.6915e-01,  2.6940e-01,  1.4013e-45, -1.4013e-45,  3.4663e-16,
         -1.1096e-01, -5.7402e-09, -4.2039e-45,  1.9846e-01,  5.6113e-02,
          1.9003e-02, -7.4369e-04],
        [ 1.5486e-02,  5.9499e-02, -1.0809e-18,  0.0000e+00, -1.4013e-45,
         -6.9111e-03, -2.8026e-45,  2.8026e-45,  3.4659e-02,  1.5539e-02,
          6.2053e-03,  3.5943e-04],
        [ 3.3305e-03,  1.4208e-02,  6.0080e-10, -0.0000e+00,  2.8026e-45,
          1.1719e-02, -1.4013e-45, -1.4013e-45,  1.7989e-02,  8.3068e-03,
          3.3090e-03,  1.0567e-04]], device='cuda:2'), 'exp_avg_sq': tensor([[3.8119e+01, 1.5851e+02, 1.4156e-09, 4.1175e-10, 5.6816e-10, 3.8152e+01,
         4.5461e-09, 5.4537e-09, 1.0240e+01, 4.1463e+00, 5.5000e-01, 5.6930e-02],
        [3.7425e+00, 1.6198e+01, 3.0627e-10, 8.3355e-10, 3.1977e-10, 3.8395e+00,
         5.2718e-10, 1.4054e-09, 1.0194e+00, 4.0571e-01, 5.7619e-02, 7.6084e-03],
        [3.9378e-01, 1.7946e+00, 3.3897e-10, 4.3699e-10, 2.9109e-09, 3.9959e-01,
         7.1294e-09, 3.8849e-09, 1.0662e-01, 4.2230e-02, 6.2181e-03, 9.5720e-04],
        [1.9797e-01, 9.8804e-01, 2.6798e-10, 5.8218e-09, 6.7594e-09, 1.9695e-01,
         3.5490e-09, 2.0620e-09, 5.2649e-02, 2.1916e-02, 4.4209e-03, 9.5774e-04]],
       device='cuda:2')}, 140293740696560: {'step': 15000, 'exp_avg': tensor([[-2.0474, -0.2731, -0.0587, -0.0213]], device='cuda:2'), 'exp_avg_sq': tensor([[242.8245,   8.2422,   0.9980,   0.4369]], device='cuda:2')}, 140293740696704: {'step': 15000, 'exp_avg': tensor([[ 4.6660e-02,  5.3230e-01, -0.0000e+00, -3.0449e-11, -1.2640e-14,
          5.2453e-02, -0.0000e+00,  2.8026e-45,  6.4363e-02,  3.3675e-02,
          4.5234e-03,  3.5195e-02],
        [-1.6076e-02, -3.7523e-01,  1.4013e-45, -5.6052e-45,  1.4013e-45,
         -1.8758e-02,  0.0000e+00, -5.6052e-45, -1.7083e-02, -1.3802e-02,
         -4.0161e-03,  2.7691e-03],
        [ 3.6704e-03,  1.5390e-01, -5.6052e-45,  1.4013e-45, -5.6052e-45,
          8.1890e-03, -2.8026e-45,  2.8026e-45,  6.0395e-02,  7.6158e-03,
          4.5110e-03,  5.8330e-03],
        [-2.2267e-02, -4.8658e-01, -2.8026e-45,  1.4013e-45, -1.1141e-16,
         -8.5887e-03, -4.2039e-45,  4.2039e-45, -2.2748e-02, -1.3977e-02,
         -4.4856e-03,  2.1840e-03]], device='cuda:2'), 'exp_avg_sq': tensor([[3.2216e-02, 7.8608e+00, 1.9004e-12, 3.2758e-13, 2.8468e-13, 3.2335e-02,
         3.8337e-11, 1.3796e-10, 8.4740e-03, 1.1730e-02, 9.6756e-04, 5.0402e-03],
        [2.4740e-02, 7.0722e+00, 5.5148e-12, 1.5691e-10, 1.2264e-11, 2.4771e-02,
         7.1147e-13, 8.3307e-11, 8.9353e-04, 6.6072e-03, 3.2784e-03, 1.0835e-03],
        [6.5683e-03, 1.3189e+00, 2.2967e-13, 2.9876e-10, 1.2191e-12, 6.3956e-03,
         2.8618e-11, 9.1196e-11, 7.8722e-03, 1.6024e-03, 6.8806e-04, 3.6569e-03],
        [4.8829e-02, 1.2441e+01, 1.9094e-11, 1.1057e-10, 2.8643e-13, 4.8831e-02,
         1.6088e-10, 4.8323e-11, 1.3634e-03, 1.3594e-02, 6.3211e-03, 2.0571e-03]],
       device='cuda:2')}, 140293740696920: {'step': 15000, 'exp_avg': tensor([[ 0.0413, -0.2705,  0.1613, -0.2340]], device='cuda:2'), 'exp_avg_sq': tensor([[0.0961, 3.6039, 0.1516, 3.2263]], device='cuda:2')}}param_groups	[{'lr': 0.001, 'betas': (0.9, 0.999), 'eps': 1e-08, 'weight_decay': 0, 'amsgrad': False, 'params': [140293740695624, 140293740696560, 140293740696704, 140293740696920]}]
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Average Error Test Dataset= 9.59461924235026
RMSE Train Dataset = [17.0224452226295, 16.026303604592123, 14.55193472777036, 9.87116215164765, 6.311783551642373, 5.827832743908047, 5.6199124535091665, 5.434277511345229, 5.290408528062727, 5.201646566127054]
RMSE Test Dataset = [44.103886813196524, 43.656349263935105, 42.61675856223186, 38.67229008615617, 33.57469117795892, 31.130486307386445, 29.80463732793942, 28.178270947900284, 26.303881178241785, 24.544047716713568]
Number of epochs 15000
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
pred =165.67868041992188
true = tensor([170.])
differenza = tensor([4.3213])


pred =162.34201049804688
true = tensor([166.])
differenza = tensor([3.6580])


pred =132.21002197265625
true = tensor([126.5000])
differenza = tensor([5.7100])


pred =160.35308837890625
true = tensor([156.8000])
differenza = tensor([3.5531])


pred =134.07513427734375
true = tensor([140.2700])
differenza = tensor([6.1949])


pred =166.7987518310547
true = tensor([174.])
differenza = tensor([7.2012])


pred =137.10069274902344
true = tensor([140.5000])
differenza = tensor([3.3993])


pred =133.2821502685547
true = tensor([131.7000])
differenza = tensor([1.5822])


pred =154.80128479003906
true = tensor([148.])
differenza = tensor([6.8013])


pred =111.69055938720703
true = tensor([109.])
differenza = tensor([2.6906])


pred =88.58912658691406
true = tensor([90.])
differenza = tensor([1.4109])


pred =112.75436401367188
true = tensor([109.4000])
differenza = tensor([3.3544])


pred =-70.25682830810547
true = tensor([-164.])
differenza = tensor([93.7432])


pred =155.22787475585938
true = tensor([155.3000])
differenza = tensor([0.0721])


pred =145.97308349609375
true = tensor([146.2000])
differenza = tensor([0.2269])


