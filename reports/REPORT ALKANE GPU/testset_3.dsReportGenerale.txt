
+++++++++++++++++++++++++++++++++++REPORT+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

LISTA TEST FILE  
dict_keys(['molecule106.ct', 'molecule071.ct', 'molecule087.ct', 'molecule002.ct', 'molecule139.ct', 'molecule119.ct', 'molecule148.ct', 'molecule036.ct', 'molecule107.ct', 'molecule124.ct', 'molecule004.ct', 'molecule149.ct', 'molecule022.ct', 'molecule120.ct', 'molecule094.ct', 'molecule117.ct', 'molecule015.ct', 'molecule090.ct', 'molecule104.ct', 'molecule101.ct', 'molecule049.ct', 'molecule088.ct', 'molecule146.ct', 'molecule021.ct', 'molecule059.ct', 'molecule114.ct', 'molecule126.ct', 'molecule010.ct', 'molecule066.ct', 'molecule085.ct', 'molecule023.ct', 'molecule053.ct', 'molecule097.ct', 'molecule108.ct', 'molecule056.ct', 'molecule026.ct', 'molecule083.ct', 'molecule069.ct', 'molecule135.ct', 'molecule079.ct', 'molecule031.ct', 'molecule029.ct', 'molecule012.ct', 'molecule109.ct', 'molecule092.ct', 'molecule125.ct', 'molecule017.ct', 'molecule142.ct', 'molecule013.ct', 'molecule144.ct', 'molecule115.ct', 'molecule100.ct', 'molecule016.ct', 'molecule014.ct', 'molecule086.ct', 'molecule020.ct', 'molecule037.ct', 'molecule074.ct', 'molecule038.ct', 'molecule024.ct', 'molecule072.ct', 'molecule129.ct', 'molecule136.ct', 'molecule005.ct', 'molecule047.ct', 'molecule122.ct', 'molecule045.ct', 'molecule147.ct', 'molecule063.ct', 'molecule076.ct', 'molecule054.ct', 'molecule084.ct', 'molecule116.ct', 'molecule008.ct', 'molecule011.ct', 'molecule058.ct', 'molecule018.ct', 'molecule078.ct', 'molecule067.ct', 'molecule080.ct', 'molecule062.ct', 'molecule055.ct', 'molecule098.ct', 'molecule006.ct', 'molecule145.ct', 'molecule112.ct', 'molecule095.ct', 'molecule064.ct', 'molecule134.ct', 'molecule030.ct', 'molecule091.ct', 'molecule127.ct', 'molecule051.ct', 'molecule138.ct', 'molecule041.ct', 'molecule096.ct', 'molecule061.ct', 'molecule043.ct', 'molecule105.ct', 'molecule035.ct', 'molecule019.ct', 'molecule034.ct', 'molecule001.ct', 'molecule082.ct', 'molecule057.ct', 'molecule039.ct', 'molecule131.ct', 'molecule102.ct', 'molecule137.ct', 'molecule089.ct', 'molecule044.ct', 'molecule133.ct', 'molecule130.ct', 'molecule110.ct', 'molecule113.ct', 'molecule141.ct', 'molecule103.ct', 'molecule143.ct', 'molecule032.ct', 'molecule042.ct', 'molecule132.ct', 'molecule065.ct', 'molecule123.ct', 'molecule003.ct', 'molecule007.ct', 'molecule118.ct', 'molecule070.ct', 'molecule048.ct', 'molecule150.ct', 'molecule040.ct', 'molecule050.ct', 'molecule128.ct', 'molecule081.ct', 'molecule025.ct', 'molecule033.ct'])----------------------------------------------------------------------------------------------------------

LISTA VALIDATION FILE  
dict_keys(['molecule068.ct', 'molecule046.ct', 'molecule075.ct', 'molecule099.ct', 'molecule111.ct', 'molecule140.ct', 'molecule028.ct', 'molecule073.ct', 'molecule077.ct', 'molecule093.ct', 'molecule009.ct', 'molecule121.ct', 'molecule060.ct', 'molecule052.ct', 'molecule027.ct'])----------------------------------------------------------------------------------------------------------

Our model: 

Net(
  (fc1): Linear(in_features=12, out_features=4, bias=False)
  (fc2): Linear(in_features=4, out_features=1, bias=False)
  (LRelu): LeakyReLU(negative_slope=0.25)
  (fc1Root): Linear(in_features=12, out_features=4, bias=False)
  (fc2Root): Linear(in_features=4, out_features=1, bias=False)
  (LReluRoot): LeakyReLU(negative_slope=0.25)
)
Printing children
------------------------------[Linear(in_features=12, out_features=4, bias=False), Linear(in_features=4, out_features=1, bias=False), LeakyReLU(negative_slope=0.25), Linear(in_features=12, out_features=4, bias=False), Linear(in_features=4, out_features=1, bias=False), LeakyReLU(negative_slope=0.25)]

Printing Modules
------------------------------[Net(
  (fc1): Linear(in_features=12, out_features=4, bias=False)
  (fc2): Linear(in_features=4, out_features=1, bias=False)
  (LRelu): LeakyReLU(negative_slope=0.25)
  (fc1Root): Linear(in_features=12, out_features=4, bias=False)
  (fc2Root): Linear(in_features=4, out_features=1, bias=False)
  (LReluRoot): LeakyReLU(negative_slope=0.25)
), Linear(in_features=12, out_features=4, bias=False), Linear(in_features=4, out_features=1, bias=False), LeakyReLU(negative_slope=0.25), Linear(in_features=12, out_features=4, bias=False), Linear(in_features=4, out_features=1, bias=False), LeakyReLU(negative_slope=0.25)]
The state dict keys: 

odict_keys(['fc1.weight', 'fc2.weight', 'fc1Root.weight', 'fc2Root.weight'])Models state_dict:fc1.weight	torch.Size([4, 12])fc2.weight	torch.Size([1, 4])fc1Root.weight	torch.Size([4, 12])fc2Root.weight	torch.Size([1, 4])OrderedDict([('fc1.weight', tensor([[ 7.7298e-02, -8.1735e-01, -7.0014e-07,  1.7959e-06, -2.1019e-44,
          7.0093e-02,  8.9649e-09, -2.8026e-45, -5.9367e-02, -4.3202e-02,
         -7.3471e-03,  7.0303e-02],
        [ 5.4376e-01, -5.5403e-01, -2.9613e-11,  1.8918e-43,  8.4078e-45,
          4.8431e-01, -9.2486e-44,  3.2230e-44, -1.0947e-01,  1.2301e-01,
          7.2541e-02,  1.7352e-01],
        [-7.4305e-03,  2.2230e-01, -7.2698e-06,  9.8091e-45,  1.1070e-43,
         -7.2737e-03, -1.1469e-18,  2.9427e-44,  1.9443e-03, -8.9782e-04,
          1.0252e-03, -5.6953e-03],
        [ 7.4058e-01,  2.1096e-01,  1.6816e-44, -5.1848e-44,  8.1275e-44,
          7.6124e-01,  7.4217e-23,  3.9236e-44, -1.6831e-01,  2.4780e-01,
          4.4827e-01,  2.8993e-02]], device='cuda:3')), ('fc2.weight', tensor([[-0.5912, -1.2204,  0.2120, -1.0284]], device='cuda:3')), ('fc1Root.weight', tensor([[-9.9027e-01, -1.1331e+00, -1.1210e-43, -2.2463e-42,  8.6881e-43,
         -1.0506e+00, -8.8508e-01, -6.3398e-01, -8.3993e-01, -1.3724e+00,
         -4.7828e-01,  1.0754e+00],
        [-7.1436e-01, -1.0978e+00,  1.5134e-43, -9.6269e-43,  1.0019e-42,
         -1.2378e+00, -1.2562e+00, -1.6710e+00, -8.4187e-01, -1.0253e+00,
          2.0149e-02,  8.0726e-01],
        [ 5.3906e+00,  6.7167e-01, -3.2090e-43, -1.8805e-42,  3.9096e-43,
          4.7579e+00,  7.0935e+00,  6.8171e+00,  5.0844e+00,  1.0945e+00,
          1.5181e+00,  3.5823e+00],
        [-1.0155e+00, -9.3001e-01, -1.6087e-42, -7.0345e-43,  1.3887e-42,
         -1.5515e+00, -1.0012e+00, -9.2634e-01, -2.7477e-01, -1.3109e+00,
         -8.3257e-01,  1.0566e+00]], device='cuda:3')), ('fc2Root.weight', tensor([[ 1.8819,  1.9620, -6.5025,  2.5859]], device='cuda:3'))])
---------------plt.close(fig)    # close the figure window-------------------------------------------------------------------------------------------

 Optimizer's state_dict:
CRITERION = MSELoss()
OPTIMIZER = Adam (
Parameter Group 0
    amsgrad: False
    betas: (0.9, 0.999)
    eps: 1e-08
    lr: 0.001
    weight_decay: 0
)
Tempo di training 196.22987914085388


state	{140191119135944: {'step': 15000, 'exp_avg': tensor([[ 7.3590e-02, -1.8917e-01,  2.4002e-08, -6.0608e-08,  5.6052e-45,
          6.9494e-02, -1.6479e-10, -1.4013e-45,  1.2328e-02, -3.1554e-02,
          3.0620e-02, -4.1109e-03],
        [ 3.6996e-01,  2.5328e-01,  7.5567e-13, -5.6052e-45,  1.4013e-45,
          3.3619e-01,  2.8026e-45, -1.4013e-45,  3.2899e-02,  5.5817e-02,
          1.1317e-01,  7.6622e-03],
        [-6.9172e-03,  1.0196e-01,  3.1115e-08,  2.8026e-45, -1.4013e-45,
         -6.8268e-03,  3.6855e-20,  4.2039e-45, -3.0559e-03,  1.4618e-04,
         -2.5902e-03,  6.5401e-04],
        [-8.3078e-02,  2.2996e+00, -2.8026e-45,  1.4013e-45, -4.2039e-45,
         -7.1343e-02, -1.0569e-23, -5.6052e-45, -1.5512e-02, -2.4080e-01,
          7.1785e-02, -2.6531e-03]], device='cuda:3'), 'exp_avg_sq': tensor([[1.0021e+01, 6.8392e+01, 3.0008e-10, 5.7408e-10, 2.5593e-09, 1.0021e+01,
         2.7073e-10, 2.0020e-09, 2.9188e+00, 9.5879e-01, 1.9291e-01, 1.3843e-02],
        [4.5886e+01, 3.1693e+02, 2.3744e-10, 2.6039e-10, 2.7933e-10, 4.5871e+01,
         7.3379e-10, 2.5638e-10, 1.3346e+01, 4.3993e+00, 8.9254e-01, 6.7531e-02],
        [1.4294e-01, 1.0699e+00, 5.9272e-10, 1.2082e-09, 1.5673e-09, 1.4292e-01,
         2.3491e-10, 9.8576e-10, 4.1564e-02, 1.3794e-02, 2.7819e-03, 2.1100e-04],
        [2.5519e+01, 3.2908e+02, 2.7103e-10, 2.1750e-08, 2.7093e-09, 2.5522e+01,
         2.7391e-10, 1.3459e-09, 9.1270e+00, 6.3694e+00, 4.9775e-01, 3.3191e-03]],
       device='cuda:3')}, 140191119136592: {'step': 15000, 'exp_avg': tensor([[ 0.0376, -0.4873,  0.0982, -0.1281]], device='cuda:3'), 'exp_avg_sq': tensor([[153.8882, 186.3465,   1.5749,  33.6868]], device='cuda:3')}, 140191119136736: {'step': 15000, 'exp_avg': tensor([[ 2.0701e-03,  2.1116e-01, -4.2039e-45,  1.4013e-45, -1.4013e-45,
          1.2552e-03, -7.9627e-03, -4.5585e-03, -1.8239e-03, -1.0144e-02,
         -3.1555e-03,  4.6895e-03],
        [ 6.8369e-03,  2.2030e-01,  5.6052e-45,  5.6052e-45, -2.8026e-45,
         -2.2987e-04, -1.2812e-02, -1.8421e-02, -1.0448e-03, -5.0957e-03,
          3.7228e-03,  6.3868e-04],
        [-1.2701e-02, -1.1125e-01,  1.4013e-45,  1.4013e-45,  5.6052e-45,
         -2.1242e-02,  3.9925e-02,  3.6192e-02,  3.3412e-02,  3.5182e-02,
          2.4885e-02,  2.9354e-02],
        [-2.0935e-03,  3.2308e-01,  1.4013e-45,  1.4013e-45,  0.0000e+00,
         -9.3293e-03, -8.0170e-03, -7.0028e-03, -2.0513e-04, -6.1674e-03,
         -6.7040e-03,  7.4042e-04]], device='cuda:3'), 'exp_avg_sq': tensor([[3.0451e-02, 1.5238e+01, 4.3831e-11, 8.2925e-12, 2.6376e-10, 3.0450e-02,
         2.9612e-04, 1.7988e-04, 3.0902e-04, 6.5015e-03, 4.5034e-03, 1.4465e-03],
        [3.5242e-02, 1.6808e+01, 8.6975e-10, 9.9982e-11, 1.2705e-10, 3.5209e-02,
         4.9821e-04, 7.8034e-04, 2.9376e-04, 7.3874e-03, 5.2556e-03, 1.5999e-03],
        [5.1512e-02, 1.5405e+01, 2.1518e-12, 1.4169e-11, 2.4159e-10, 5.2246e-02,
         7.2147e-03, 6.8432e-03, 2.6043e-03, 8.3441e-03, 5.0136e-03, 6.0669e-03],
        [4.6623e-02, 2.7448e+01, 4.7713e-12, 9.3130e-11, 2.3512e-11, 4.6608e-02,
         3.0268e-04, 2.6548e-04, 2.6136e-05, 9.2392e-03, 6.9714e-03, 1.9656e-03]],
       device='cuda:3')}, 140191119136952: {'step': 15000, 'exp_avg': tensor([[-0.1230, -0.1151,  0.1258, -0.0806]], device='cuda:3'), 'exp_avg_sq': tensor([[4.4719, 4.3352, 0.2179, 2.3693]], device='cuda:3')}}param_groups	[{'lr': 0.001, 'betas': (0.9, 0.999), 'eps': 1e-08, 'weight_decay': 0, 'amsgrad': False, 'params': [140191119135944, 140191119136592, 140191119136736, 140191119136952]}]
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Average Error Test Dataset= 3.5584805806477866
RMSE Train Dataset = [21.987876325881626, 19.70864827050274, 13.149378633504536, 7.765322151649375, 6.451363754999124, 5.640750619435252, 5.332650240227155, 5.211456135758185, 5.135480074333078, 5.087172866538728]
RMSE Test Dataset = [10.392330540240586, 9.789358659725876, 8.620621606492435, 5.419927505627706, 5.118944824386399, 4.74083709342934, 4.805666741546957, 4.85089234470494, 4.893301234612094, 4.882166949513792]
Number of epochs 15000
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
pred =134.33609008789062
true = tensor([136.])
differenza = tensor([1.6639])


pred =138.36883544921875
true = tensor([141.5000])
differenza = tensor([3.1312])


pred =140.55746459960938
true = tensor([150.7700])
differenza = tensor([10.2125])


pred =157.60614013671875
true = tensor([147.7000])
differenza = tensor([9.9061])


pred =163.78890991210938
true = tensor([163.8000])
differenza = tensor([0.0111])


pred =160.462890625
true = tensor([160.])
differenza = tensor([0.4629])


pred =118.24794006347656
true = tensor([112.])
differenza = tensor([6.2479])


pred =141.1821746826172
true = tensor([143.])
differenza = tensor([1.8178])


pred =158.91856384277344
true = tensor([158.])
differenza = tensor([0.9186])


pred =160.84014892578125
true = tensor([153.])
differenza = tensor([7.8401])


pred =50.16992950439453
true = tensor([49.7000])
differenza = tensor([0.4699])


pred =156.5437469482422
true = tensor([157.])
differenza = tensor([0.4563])


pred =135.03250122070312
true = tensor([131.3000])
differenza = tensor([3.7325])


pred =128.28732299804688
true = tensor([124.])
differenza = tensor([4.2873])


pred =109.01898956298828
true = tensor([106.8000])
differenza = tensor([2.2190])


