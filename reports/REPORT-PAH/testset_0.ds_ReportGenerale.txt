
+++++++++++++++++++++++++++++++++++REPORT+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

LISTA TEST FILE  
dict_keys(['naphthalene.ct', 'anthracene.ct', 'phenanthrene.ct', 'naphthacene.ct', 'benzo[a]anthracene.ct', 'chrysene.ct', 'benzo[c]phenanthrene.ct', 'pyrene.ct', 'triphenylene.ct', 'dibenz[a,h]anthracene.ct', 'dibenz[a,j]anthracene.ct', 'benzo[a]pyrene.ct', 'benzo[c]chrysene.ct', 'benzo[g]chrysene.ct', 'benzo[a]naphthacene.ct', 'pentaphene.ct', 'dibenz[a,c]anthracene.ct', 'pentacene.ct', 'dibenzo[c,g]phenanthrene.ct', 'picene.ct', 'benzo[b]chrysene.ct', 'dibenzo[b,g]phenanthrene.ct', 'perylene.ct', 'anthanthrene.ct', 'naphtho[1,2-b]triphenylene.ct', 'dibenzo[e,l]pyrene.ct', 'dibenzo[a,e]pyrene.ct', 'anthra[1,2-a]anthracene.ct', 'dibenzo[b,k]chrysene.ct', 'naphtho(2,3-a)pyrene.ct', 'benzo[c]pentaphene.ct', 'dibenzo[a,l]naphthacene.ct', 'dibenzo[a,j]naphthacene.ct', 'dibenzo[a,l]pyrene.ct', 'dibenzo[a,h]pyrene.ct', 'dibenzo[c,i]pyrene.ct', '1-methylbenz[a]anthracene.ct', '2-methylbenz[a]anthracene.ct', '4-methylbenz[a]anthracene.ct', '5-methylbenz[a]anthracene.ct', '6-methylbenz[a]anthracene.ct', '7-methylbenz[a]anthracene.ct', '8-methylbenz[a]anthracene.ct', '9-methylbenz[a]anthracene.ct', '11-methylbenz[a]anthracene.ct', '12-methylbenz[a]anthracene.ct', '1,12-dimethylbenz[a]anthracene.ct', '7,12-dimethylbenz[a]anthracene.ct', '6,12-dimethylbenz[a]anthracene.ct', '6,8-dimethylbenz[a]anthracene.ct', '6,8,12-trimethylbenz[a]anthracene.ct', '1-methylchrysene.ct', '4-methylchrysene.ct', '5-methylchrysene.ct', '6-methylchrysene.ct', '1-methylbenzo[c]phenanthrene.ct', '3-methylbenzo[c]phenanthrene.ct', '4-methylbenzo[c]phenanthrene.ct', '5-methylbenzo[c]phenanthrene.ct', '6-methylbenzo[c]phenanthrene.ct', '5,8-dimethylbenzo[c]phenanthrene.ct', '1-methylpyrene.ct', '2-methylpyrene.ct', '4-methylpyrene.ct', '1-methylbenzo[a]pyrene.ct', '3-methylbenzo[a]pyrene.ct', '4-methylbenzo[a]pyrene.ct', '5-methylbenzo[a]pyrene.ct', '6-methylbenzo[a]pyrene.ct', '7-methylbenzo[a]pyrene.ct', '11-methylbenzo[a]pyrene.ct', '12-methylbenzo[a]pyrene.ct', '7,10-dimethylbenzo[a]pyrene.ct', '4,5-dimethylbenzo[a]pyrene.ct', '1,2-dimethylbenzo[a]pyrene.ct', '2,3-dimethylbenzo[a]pyrene.ct', '3,12-dimethylbenzo[a]pyrene.ct', '1,4-dimethylbenzo[a]pyrene.ct', '3,6-dimethylbenzo[a]pyrene.ct', '6-methylanthanthrene.ct', '6,12-dimethylanthanthrene.ct', '9,10-dimethylanthracene.ct', 'coronene.ct', 'benzo[g,h,i]perylene.ct'])
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

LISTA VALIDATION FILE  
dict_keys(['2-methylbenzo[c]phenanthrene.ct', '3-methylbenz[a]anthracene.ct', 'tribenzo[a,e,i]pyrene.ct', '1,3-dimethylbenzo[a]pyrene.ct', '8-methylbenzo[a]pyrene.ct', '10-methylbenzo[a]pyrene.ct', '10-methylbenz[a]anthracene.ct', '1,6-dimethylbenzo[a]pyrene.ct', '2-methylbenzo[a]pyrene.ct', 'benzo[e]pyrene.ct'])


Our model: 

ClassificationGm(
  (fc1): Linear(in_features=12, out_features=4, bias=False)
  (fc2): Linear(in_features=4, out_features=1, bias=False)
  (Relu): ReLU()
  (fc1Root): Linear(in_features=12, out_features=4, bias=False)
  (fc2Root): Linear(in_features=4, out_features=1, bias=False)
  (Drop): Dropout(p=0.15, inplace=False)
  (ReluRoot): ReLU()
)
Printing children
------------------------------[Linear(in_features=12, out_features=4, bias=False), Linear(in_features=4, out_features=1, bias=False), ReLU(), Linear(in_features=12, out_features=4, bias=False), Linear(in_features=4, out_features=1, bias=False), Dropout(p=0.15, inplace=False), ReLU()]

Printing Modules
------------------------------[ClassificationGm(
  (fc1): Linear(in_features=12, out_features=4, bias=False)
  (fc2): Linear(in_features=4, out_features=1, bias=False)
  (Relu): ReLU()
  (fc1Root): Linear(in_features=12, out_features=4, bias=False)
  (fc2Root): Linear(in_features=4, out_features=1, bias=False)
  (Drop): Dropout(p=0.15, inplace=False)
  (ReluRoot): ReLU()
), Linear(in_features=12, out_features=4, bias=False), Linear(in_features=4, out_features=1, bias=False), ReLU(), Linear(in_features=12, out_features=4, bias=False), Linear(in_features=4, out_features=1, bias=False), Dropout(p=0.15, inplace=False), ReLU()]
The state dict keys: 

odict_keys(['fc1.weight', 'fc2.weight', 'fc1Root.weight', 'fc2Root.weight'])Models state_dict:fc1.weight	torch.Size([4, 12])fc2.weight	torch.Size([1, 4])fc1Root.weight	torch.Size([4, 12])fc2Root.weight	torch.Size([1, 4])OrderedDict([('fc1.weight', tensor([[-0.4478,  0.1916,  0.1849,  0.4368,  0.4256, -0.8266,  0.5047,  0.1639,
          0.4764, -0.3051, -0.1341, -0.6615],
        [ 0.4320, -0.2254, -0.8180, -0.0905,  0.5639,  0.5012,  0.2520, -0.4914,
         -0.0756,  1.0265, -0.7754, -0.9675],
        [ 0.3369, -0.9148,  0.0498, -0.1560, -0.5311,  0.3506,  0.0199, -0.3441,
         -0.7110,  1.0476,  0.7628, -0.9868],
        [ 0.6518, -0.8637,  0.0708, -0.0244, -0.1245, -0.0144, -0.0445, -0.4601,
         -0.5293,  1.0225,  0.7602, -0.9764]])), ('fc2.weight', tensor([[-1.2733,  1.3695,  1.0984,  1.1563]])), ('fc1Root.weight', tensor([[ 0.2363,  1.0796,  0.1326,  0.0516, -3.3694, -0.4515, -0.2006, -0.1853,
         -0.6224, -0.0666,  0.3269, -0.2217],
        [ 0.4873, -2.4547,  0.1363,  0.2065,  5.0790, -0.0321,  0.0890,  0.3524,
         -0.0244,  0.1437, -0.0081, -0.0254],
        [-0.3176,  0.5341, -0.7764,  0.1956, -0.6654, -0.5768,  0.1903,  0.1447,
          0.1726, -0.1369,  0.3406,  0.0769],
        [-0.2253,  1.3894,  0.1793,  0.0713, -4.2654,  0.2406, -0.8244, -0.1797,
         -0.0933, -0.4047,  0.3920,  0.4041]])), ('fc2Root.weight', tensor([[-0.9861,  1.2270, -1.0809, -0.8281]]))])
---------------plt.close(fig)    # close the figure window-------------------------------------------------------------------------------------------

 Optimizer's state_dict:
CRITERION = BCEWithLogitsLoss()
OPTIMIZER = Adam (
Parameter Group 0
    amsgrad: False
    betas: (0.9, 0.999)
    eps: 1e-08
    lr: 0.001
    weight_decay: 0
)
Tempo di training 110.81254053115845


state	{139978352521456: {'step': 10000, 'exp_avg': tensor([[ 1.5453e-02,  1.1357e-01,  8.1608e-03,  0.0000e+00,  0.0000e+00,
          1.5453e-02,  5.0756e-04,  5.0756e-04,  5.0756e-04,  6.3925e-03,
          9.0609e-03,  3.2362e-20],
        [ 1.4417e-02,  6.2062e-03, -9.3678e-04,  0.0000e+00,  0.0000e+00,
          1.4417e-02,  8.2692e-07,  8.2692e-07,  8.2692e-07,  2.2552e-03,
          1.2161e-02,  2.3559e-26],
        [ 9.1386e-03, -1.1728e-02,  6.9087e-03,  0.0000e+00,  0.0000e+00,
          9.1386e-03,  2.2426e-03,  2.2426e-03,  2.2426e-03,  4.1498e-03,
          4.9888e-03,  3.9447e-03],
        [ 2.5445e-02, -7.4054e-03, -9.2735e-03,  0.0000e+00,  0.0000e+00,
          2.5445e-02,  1.7780e-02,  1.7780e-02,  1.7780e-02, -2.0812e-03,
          2.7526e-02,  7.6924e-03]]), 'exp_avg_sq': tensor([[6.4981e-04, 2.5956e-02, 3.8524e-03, 0.0000e+00, 0.0000e+00, 6.4981e-04,
         6.1949e-05, 6.1949e-05, 6.1949e-05, 4.5600e-04, 1.5591e-04, 6.3120e-07],
        [2.3112e-03, 3.3030e-02, 1.3321e-03, 0.0000e+00, 0.0000e+00, 2.3112e-03,
         5.8995e-05, 5.8995e-05, 5.8995e-05, 1.2724e-03, 7.4414e-04, 3.3141e-04],
        [9.8171e-03, 1.8595e-03, 2.7748e-03, 0.0000e+00, 0.0000e+00, 9.8171e-03,
         9.6332e-03, 9.6332e-03, 9.6332e-03, 2.9242e-04, 9.1998e-03, 4.2697e-03],
        [1.0879e-02, 1.9948e-03, 3.1851e-03, 0.0000e+00, 0.0000e+00, 1.0879e-02,
         1.0770e-02, 1.0770e-02, 1.0770e-02, 3.3334e-04, 1.0133e-02, 4.4065e-03]])}, 139978352524736: {'step': 10000, 'exp_avg': tensor([[-0.0015,  0.0044,  0.0176,  0.0131]]), 'exp_avg_sq': tensor([[2.4684e-05, 4.7178e-04, 1.7269e-03, 1.6366e-03]])}, 139978352547552: {'step': 10000, 'exp_avg': tensor([[-1.1871e-03,  3.1409e-04, -6.4103e-03, -8.4195e-03,  2.3203e-04,
         -1.1871e-03,  0.0000e+00,  0.0000e+00,  0.0000e+00, -1.1871e-03,
          0.0000e+00,  0.0000e+00],
        [-1.3148e-03, -2.2565e-05,  1.5064e-02,  7.5507e-04, -1.6514e-04,
         -1.3148e-03,  0.0000e+00,  0.0000e+00,  0.0000e+00, -1.3148e-03,
          0.0000e+00,  0.0000e+00],
        [ 1.1569e-04, -8.1198e-04, -1.4976e-03, -2.1663e-04,  2.3486e-04,
          1.1569e-04,  0.0000e+00,  0.0000e+00,  0.0000e+00,  1.1569e-04,
          0.0000e+00,  0.0000e+00],
        [ 9.5514e-04,  3.7808e-03, -5.0320e-03, -4.3504e-03,  4.6807e-04,
          9.5514e-04,  0.0000e+00,  0.0000e+00,  0.0000e+00,  9.5514e-04,
          0.0000e+00,  0.0000e+00]]), 'exp_avg_sq': tensor([[2.8181e-04, 2.6558e-04, 2.8462e-03, 9.8508e-04, 1.2716e-06, 2.8181e-04,
         0.0000e+00, 0.0000e+00, 0.0000e+00, 2.8181e-04, 0.0000e+00, 0.0000e+00],
        [5.5249e-04, 4.5972e-06, 3.1619e-03, 1.4516e-03, 5.4369e-07, 5.5249e-04,
         0.0000e+00, 0.0000e+00, 0.0000e+00, 5.5249e-04, 0.0000e+00, 0.0000e+00],
        [3.6423e-05, 9.1012e-05, 3.4734e-05, 5.2356e-04, 2.4521e-07, 3.6423e-05,
         0.0000e+00, 0.0000e+00, 0.0000e+00, 3.6423e-05, 0.0000e+00, 0.0000e+00],
        [1.8566e-04, 1.7783e-04, 1.8238e-03, 6.4801e-04, 9.0418e-07, 1.8566e-04,
         0.0000e+00, 0.0000e+00, 0.0000e+00, 1.8566e-04, 0.0000e+00, 0.0000e+00]])}, 139978352547312: {'step': 10000, 'exp_avg': tensor([[ 0.0013,  0.0006, -0.0004, -0.0021]]), 'exp_avg_sq': tensor([[2.9817e-04, 3.6482e-04, 7.4488e-06, 4.6378e-04]])}}param_groups	[{'lr': 0.001, 'betas': (0.9, 0.999), 'eps': 1e-08, 'weight_decay': 0, 'amsgrad': False, 'params': [139978352521456, 139978352524736, 139978352547552, 139978352547312]}]

Average Error Test Dataset= 0
RMSE Train Dataset = [tensor(0.5217, grad_fn=<BinaryCrossEntropyWithLogitsBackward>)]
RMSE Test Dataset = [0.72222673178349]
Number of epochs 10000

pred =0.8644574284553528
true = tensor([1.])
difference = tensor([0.1355])


pred =1.095044732093811
true = tensor([0.])
difference = tensor([1.0950])


pred =3.280214309692383
true = tensor([1.])
difference = tensor([2.2802])


pred =0.8644574284553528
true = tensor([1.])
difference = tensor([0.1355])


pred =1.095044732093811
true = tensor([0.])
difference = tensor([1.0950])


pred =1.4494267702102661
true = tensor([1.])
difference = tensor([0.4494])


pred =0.8644574284553528
true = tensor([1.])
difference = tensor([0.1355])


pred =0.0
true = tensor([1.])
difference = tensor([1.])


pred =0.8644574284553528
true = tensor([1.])
difference = tensor([0.1355])


pred =-1.210646390914917
true = tensor([1.])
difference = tensor([2.2106])


