
+++++++++++++++++++++++++++++++++++REPORT+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

LISTA TEST FILE  
dict_keys(['dimethyl_peroxide.ct', 'dimethyl_sulfide.ct', 'dimethyl_disulfide.ct', 'ethyl_methyl_ether.ct', 'ethyl_methyl_peroxide.ct', 'dimethoxymethane.ct', 'ethyl_methyl_sulfide.ct', 'ethyl_methyl_disulfide.ct', 'bis(methylthio)methane.ct', 'diethyl_ether.ct', 'isopropyl_methyl_ether.ct', 'diethyl_peroxide.ct', 'isopropyl_methyl_peroxide.ct', '1,1-dimethoxyethane.ct', '1,2-dimethoxyethane.ct', 'methyl_propyl_sulfide.ct', 'diethyl_sulfide.ct', 'isopropyl_methyl_sulfide.ct', '1,1-bis(methylthio)ethane.ct', 'ethylthiomethylthiomethane.ct', '1,2-bis(methylthio)ethane.ct', 'butyl_methyl_ether.ct', 'ethyl_propyl_ether.ct', 'ethyl_isopropyl_ether.ct', 'isobutyl_methyl_ether.ct', 'sec-butyl_methyl_ether.ct', 'tert-butyl_methyl_ether.ct', '2,2-dimethoxypropane.ct', '1,3-dimethoxypropane.ct', '1-ethoxy-2-methoxyethane.ct', '1,2-dimethoxypropane.ct', 'ethyl_isopropyl_sulfide.ct', 'butyl_methyl_sulfide.ct', 'isobutyl_methyl_sulfide.ct', 'ethyl_propyl_sulfide.ct', 'tert-butyl_methyl_sulfide.ct', 'ethyl_isopropyl_disulfide.ct', 'bis(ethylthio)methane.ct', 'methyl_pentyl_ether.ct', 'ethyl_butyl_ether.ct', 'dipropyl_ether.ct', 'isopropyl_propyl_ether.ct', 'ethyl_isobutyl_ether.ct', 'isopentyl_methyl_ether.ct', 'methyl_2-methylbutyl_ether.ct', 'methyl_1-methylbutyl_ether.ct', 'diisopropyl_ether.ct', 'methyl_tert-pentyl_ether.ct', '1,2-dimethylpropyl_methyl_ether.ct', '1,1-diethoxyethane.ct', '1,1-dimethoxy-2-methylpropane.ct', '2-ethoxy-2-methoxypropane.ct', '1,1-dimethoxybutane.ct', '1-methoxy-1-propoxyethane.ct', '1,2-diethoxyethane.ct', '1,3-dimethoxybutane.ct', 'methyl_pentyl_sulfide.ct', 'butyl_ethyl_sulfide.ct', 'dipropyl_sulfide.ct', 'isopropyl_propyl_sulfide.ct', 'ethyl_isobutyl_sulfide.ct', 'isopentyl_methyl_sulfide.ct', 'methyl_2-methylbutyl_sulfide.ct', 'tert-butyl_ethyl_sulfide.ct', 'diisopropyl_sulfide.ct', '1-ethylpropyl_methyl_sulfide.ct', 'dipropyl_disulfide.ct', 'diisopropyl_disulfide.ct', 'sec-butyl_ethyl_disulfide.ct', 'isopropyl_propyl_disulfide.ct', 'tert-butyl_ethyl_disulfide.ct', '1,1-bis(ethylthio)ethane.ct', 'hexyl_methyl_ether.ct', 'ethyl_pentyl_ether.ct', 'butyl_propyl_ether.ct', 'butyl_isopropyl_ether.ct', 'isobutyl_propyl_ether.ct', 'ethyl_isopentyl_ether.ct', 'tert-butyl_propyl_ether.ct', '2,2-dimethylpropyl_ethyl_ether.ct', 'tert-butyl_isopropyl_ether.ct', 'ethyl_tert-pentyl_ether.ct', '1,2-dimethylpropyl_ethyl_ether.ct', 'ethyl_1-ethylpropyl_ether.ct', 'dipropoxymethane.ct', '2,2-diethoxypropane.ct', '1-ethoxy-1-propoxyethane.ct', '1,1-diethoxypropane.ct', '1,3-diethoxypropane.ct', '1,5-dimethoxypentane.ct', '1,4-dimethoxypentane.ct', '1,3-dimethoxypentane.ct', 'hexyl_methyl_sulfide.ct', 'butyl_propyl_sulfide.ct', 'isobutyl_propyl_sulfide.ct', 'isobutyl_isopropyl_sulfide.ct', 'ethyl_2-methylbutyl_sulfide.ct', 'tert-butyl_propyl_sulfide.ct', 'sec-butyl_isopropyl_sulfide.ct', 'butyl_isopropyl_sulfide.ct', '1,3-bis(ethylthio)propane.ct', 'dibutyl_ether.ct', 'isopentyl_propyl_ether.ct', 'butyl_isobutyl_ether.ct', 'butyl_sec-butyl_ether.ct', 'butyl_tert-butyl_ether.ct', 'sec-butyl_isobutyl_ether.ct', '1,3-dimethylpentyl_methyl_ether.ct', 'isobutyl_tert-butyl_ether.ct', 'di-tert-butyl_ether.ct', 'isopropyl_tert-pentyl_ether.ct', 'heptyl_methyl_ether.ct', '1-ethylpropyl_propyl_ether.ct', 'di-tert-butyl_peroxide.ct', '1,1-diisopropoxyethane.ct', '1,1-dipropoxyethane.ct', '1,1-dimethoxyhexane.ct', '1,4-diethoxybutane.ct', 'dibutylsulfide.ct', 'diisobutyl_sulfide.ct', 'butyl_isobutyl_sulfide.ct', 'di-tert-butyl_sulfide.ct', 'di-sec-butyl_sulfide.ct', 'butyl_sec-butyl_sulfide.ct', 'sec-butyl_isobutyl_sulfide.ct', 'heptyl_methyl_sulfide.ct', 'diisobutyl_disulfide.ct', 'di-tert-butyl_disulfide.ct', '1,1-bis(isopropylthio)ethane.ct', '1-ethyl-1,3-dimethylbutyl_methyl_ether.ct', 'ethyl_heptyl_ether.ct', 'butyl_isopentyl_ether.ct', 'tert-butyl_isopentyl_ether.ct', 'butyl_pentyl_ether.ct', '1,5-dimethylhexyl_methyl_ether.ct', 'methyl_1-methylheptyl_ether.ct', 'methyl_octyl_ether.ct', '2-ethylhexyl_methyl_ether.ct', 'methyl_1,1,4-trimethylpentyl_ether.ct', '3,5-dimethylhexyl_methyl_ether.ct', 'ethyl_1,1,3-trimethylbutyl_ether.ct', 'tert-butyl_tert-pentyl_peroxide.ct', '1,1-dimethoxy-2,2-dimethylpentane.ct', '1,1-diethoxypentane.ct', '1,1-diisopropoxypropane.ct', '1,3-dipropoxypropane.ct', '1,3-diisopropoxypropane.ct', 'ethyl_heptyl_sulfide.ct', 'methyl_octyl_sulfide.ct', 'bis(butylthio)methane.ct', '2,2-bis(propylthio)propane.ct', 'ethyl_octyl_ether.ct', 'ethyl_1,1,3,3-tetramethylbutyl_ether.ct', 'bis(1-methylbutyl)_ether.ct', 'diisopentyl_ether.ct', 'dipentyl_ether.ct', 'isopropyl_heptyl_ether.ct', 'heptyl_propyl_ether.ct', 'isopentyl_pentyl_ether.ct', 'methyl_1-methyloctyl_ether.ct', 'di-tert-pentyl_sulfide.ct', 'dipentyl_sulfide.ct', 'isobutyl_4-methylpentyl_sulfide.ct', 'methyl_nonyl_sulfide.ct'])


LISTA VALIDATION FILE  
dict_keys(['dimethyl_ether.ct', 'methyl_propyl_ether.ct', 'diethyl_disulfide.ct', 'diethoxymethane.ct', 'ethyl_propyl_disulfide.ct', 'ethyl_sec-butyl_ether.ct', '1,4-dimethoxybutane.ct', 'sec-butyl_ethyl_sulfide.ct', '1,2-bis(ethylthio)ethane.ct', 'ethyl_1-methylbutyl_ether.ct', '1-ethoxy-4-methoxybutane.ct', 'ethyl_isopentyl_sulfide.ct', 'diisobutyl_ether.ct', '2,4-dimethoxy-2-methylpentane.ct', 'dibutyl_disulfide.ct', 'isobutyl_isopentyl_ether.ct', '1,1-dipropoxypropane.ct', 'bis(1-ethylpropyl)_ether.ct', 'diisopentyl_sulfide.ct'])


Our model: 

RegressionGm(
  (fc1): Linear(in_features=12, out_features=4, bias=False)
  (fc2): Linear(in_features=4, out_features=1, bias=False)
  (LRelu): SELU()
  (fc1Root): Linear(in_features=12, out_features=4, bias=False)
  (fc2Root): Linear(in_features=4, out_features=1, bias=False)
  (LReluRoot): SELU()
)
Printing children
------------------------------[Linear(in_features=12, out_features=4, bias=False), Linear(in_features=4, out_features=1, bias=False), SELU(), Linear(in_features=12, out_features=4, bias=False), Linear(in_features=4, out_features=1, bias=False), SELU()]

Printing Modules
------------------------------[RegressionGm(
  (fc1): Linear(in_features=12, out_features=4, bias=False)
  (fc2): Linear(in_features=4, out_features=1, bias=False)
  (LRelu): SELU()
  (fc1Root): Linear(in_features=12, out_features=4, bias=False)
  (fc2Root): Linear(in_features=4, out_features=1, bias=False)
  (LReluRoot): SELU()
), Linear(in_features=12, out_features=4, bias=False), Linear(in_features=4, out_features=1, bias=False), SELU(), Linear(in_features=12, out_features=4, bias=False), Linear(in_features=4, out_features=1, bias=False), SELU()]
The state dict keys: 

odict_keys(['fc1.weight', 'fc2.weight', 'fc1Root.weight', 'fc2Root.weight'])Models state_dict:fc1.weight	torch.Size([4, 12])fc2.weight	torch.Size([1, 4])fc1Root.weight	torch.Size([4, 12])fc2Root.weight	torch.Size([1, 4])OrderedDict([('fc1.weight', tensor([[ 5.1278e-02, -1.7148e-01, -4.8485e-43, -1.9394e-42,  6.0256e-43,
          8.0570e-01, -1.2053e+00, -1.9631e+00, -9.3326e-43, -2.3268e-02,
         -5.8818e-01, -4.5086e-01],
        [ 5.7991e-02,  3.3867e-01, -1.4187e-13,  2.3962e-42, -2.3640e-42,
         -2.0509e-01, -9.0679e-01,  6.0326e-01,  3.4458e-42, -1.1261e+00,
         -1.6557e-01,  1.4873e-01],
        [-1.3710e-01, -3.9349e-02,  1.8385e-42,  1.8259e-42,  2.7550e-42,
          7.3652e-01, -9.2137e-01, -1.4921e+00,  1.0173e-42, -8.5891e-01,
         -3.8280e-01, -2.8513e-01],
        [ 1.0193e+00,  8.8643e-01,  1.3172e-42,  1.6045e-42, -2.0305e-42,
          6.5525e-01,  3.4329e+00, -1.5626e+00,  6.5861e-43,  1.3847e+00,
          1.0822e+00,  1.6948e-01]])), ('fc2.weight', tensor([[-1.3022, -1.1301, -1.3975,  1.3628]])), ('fc1Root.weight', tensor([[-4.6824e-02,  1.3674e+00,  8.6979e-42, -6.8369e-42, -5.3978e-42,
         -1.4501e+00,  5.7456e+00, -3.3081e+00,  1.1785e-41,  1.2490e+00,
         -3.1001e-01, -2.4336e-02],
        [-1.7190e-01,  7.1410e-02,  8.0266e-42,  3.5467e-42, -6.8622e-42,
          6.1503e-01, -2.0467e+00,  4.7382e-01,  1.4564e-41, -2.5823e-01,
         -3.9318e-02, -3.3511e-01],
        [ 3.3558e-01,  1.4282e+00, -1.1254e-41, -6.5987e-42, -1.1402e-41,
         -1.4067e+00,  5.4723e+00, -3.3287e+00,  9.1967e-42,  1.1607e+00,
         -1.7127e-01,  4.9173e-02],
        [ 2.7926e-01,  6.0261e-02,  1.5246e-41, -1.0489e-41,  1.6353e-42,
          1.9346e+00, -3.3365e+00,  1.5507e+00, -1.4624e-41, -1.0704e+00,
          1.0215e+00, -1.0137e+00]])), ('fc2Root.weight', tensor([[ 1.9570, -1.1642,  1.8481, -1.7506]]))])
---------------plt.close(fig)    # close the figure window-------------------------------------------------------------------------------------------

 Optimizer's state_dict:
CRITERION = MSELoss()
OPTIMIZER = Adam (
Parameter Group 0
    amsgrad: False
    betas: (0.9, 0.999)
    eps: 1e-08
    lr: 0.001
    weight_decay: 0
)
Tempo di training 27.735295057296753


state	{140247149313792: {'step': 10000, 'exp_avg': tensor([[ 3.0943e-01,  3.3786e-01, -7.7071e-44, -3.2931e-43,  9.1084e-44,
         -1.0299e-01, -2.3589e-03, -3.0542e-03, -1.6115e-43,  3.3568e-02,
          6.7072e-02,  3.3218e-01],
        [ 4.2575e-01,  2.0419e+00,  1.1926e-15,  4.1338e-43, -4.1198e-43,
          3.1473e-01, -1.7066e-02,  3.0024e-02,  5.9555e-43, -2.8167e-03,
          1.2603e-01, -9.3711e-02],
        [ 3.3187e-01,  6.5872e-01,  3.1529e-43,  3.1529e-43,  4.6943e-43,
          1.6301e-01, -1.0925e-02, -8.7428e-02,  1.7516e-43, -8.1777e-04,
          4.0207e-02,  1.5745e-01],
        [-2.6679e-01, -2.1175e+00,  2.1720e-43,  2.7325e-43, -3.4332e-43,
         -3.2466e-01,  4.9923e-01, -1.8071e-01,  1.0510e-43,  8.0452e-03,
          7.4681e-02,  1.5762e-01]]), 'exp_avg_sq': tensor([[1.5473e+01, 3.7428e+01, 6.7167e-09, 2.5697e-11, 2.6753e-08, 1.5331e+01,
         1.0754e-03, 4.5546e-03, 8.1756e-09, 2.1461e-02, 2.2014e+00, 6.0958e+00],
        [3.1974e+01, 8.2510e+02, 2.0579e-11, 1.7338e-08, 4.0763e-07, 2.5303e+01,
         3.2746e-01, 4.0205e-01, 3.9381e-07, 7.9761e-04, 6.1433e+00, 1.0922e+01],
        [3.2866e+01, 8.1575e+02, 2.1310e-08, 1.5601e-07, 4.3831e-07, 3.1696e+01,
         9.5327e-03, 5.9986e-02, 5.9780e-08, 9.5164e-04, 1.0907e+01, 7.2172e+00],
        [3.6316e+01, 2.0703e+03, 7.3568e-10, 5.6008e-10, 2.0570e-08, 2.6344e+01,
         5.0560e+00, 3.8446e+00, 2.8922e-08, 2.6917e-03, 1.1777e+01, 8.0375e+00]])}, 140247149311552: {'step': 10000, 'exp_avg': tensor([[-0.1157, -0.4616, -0.0974, -2.1460]]), 'exp_avg_sq': tensor([[  24.8031,   88.8560,   21.3701, 2016.3810]])}, 140247149312192: {'step': 10000, 'exp_avg': tensor([[ 3.9365e-02, -1.1988e+00,  1.5975e-43, -1.3172e-43, -1.0370e-43,
         -1.1990e-02,  1.0059e-01, -3.0494e-02,  2.1580e-43,  1.2344e-02,
          4.4906e-02, -8.7235e-03],
        [ 2.1476e-02,  2.1942e-01,  1.4574e-43,  7.5670e-44, -1.3172e-43,
          2.6395e-03,  1.3562e-02, -9.0058e-03,  2.5924e-43,  1.4557e-03,
          1.7744e-02, -1.1496e-03],
        [ 4.4061e-02, -1.1297e+00, -2.0319e-43, -1.1911e-43, -2.0319e-43,
         -1.1998e-02,  9.5829e-02, -3.2510e-02,  1.7376e-43,  1.1315e-02,
          4.4612e-02, -6.9299e-03],
        [ 3.0582e-02,  2.4965e-01,  2.7325e-43, -1.8918e-43,  3.3631e-44,
          2.2282e-02,  4.2093e-03,  1.7264e-03, -2.7185e-43, -1.0212e-02,
          3.4816e-02, -1.0980e-02]]), 'exp_avg_sq': tensor([[4.2116e-01, 2.6190e+02, 8.2319e-10, 1.9432e-13, 2.5020e-11, 5.6965e-01,
         3.5137e-01, 4.6621e-02, 1.9215e-11, 2.6444e-02, 3.4649e-01, 1.3467e-01],
        [2.6455e-01, 1.2080e+01, 1.3573e-09, 5.5491e-10, 1.0375e-09, 2.3354e-01,
         1.7551e-02, 1.3837e-03, 8.5845e-09, 8.6746e-03, 1.8117e-01, 6.6261e-02],
        [4.3763e-01, 2.5812e+02, 5.0660e-10, 3.5251e-09, 1.5297e-10, 5.5833e-01,
         3.2741e-01, 4.3750e-02, 8.9284e-11, 2.5966e-02, 3.5401e-01, 1.3495e-01],
        [9.4584e-02, 2.5765e+01, 1.0779e-08, 1.6293e-09, 1.9054e-10, 1.4969e-01,
         5.2859e-02, 6.1238e-03, 1.6480e-08, 3.3323e-03, 7.9644e-02, 2.7903e-02]])}, 140247149313392: {'step': 10000, 'exp_avg': tensor([[-0.8267, -0.0288, -0.8590,  0.0022]]), 'exp_avg_sq': tensor([[172.0289,   2.6631, 216.9182,   3.2298]])}}param_groups	[{'lr': 0.001, 'betas': (0.9, 0.999), 'eps': 1e-08, 'weight_decay': 0, 'amsgrad': False, 'params': [140247149313792, 140247149311552, 140247149312192, 140247149313392]}]

Average Error Test Dataset= 4.663140547902961
RMSE Train Dataset = [29.660432767791104, 26.45909906515798, 20.251204843352454, 11.450136968468092, 8.926384689667463, 7.327962584820644, 6.5523888577870855, 6.32049990306607, 6.260773185780576, 6.218121520829481]
RMSE Test Dataset = [35.700820494554115, 32.156798540632316, 24.980848377197507, 14.735225713610724, 10.76189846435697, 8.223942150046089, 7.151406060529505, 6.925665581732921, 6.943093733930469, 6.959243928028726]
Number of epochs 10000

pred =-1.777564525604248
true = tensor([-23.7000])
difference = tensor([21.9224])


pred =44.62386703491211
true = tensor([40.])
difference = tensor([4.6239])


pred =153.534423828125
true = tensor([154.])
difference = tensor([0.4656])


pred =89.31172180175781
true = tensor([88.])
difference = tensor([1.3117])


pred =173.68922424316406
true = tensor([173.7000])
difference = tensor([0.0108])


pred =78.75169372558594
true = tensor([81.2000])
difference = tensor([2.4483])


pred =128.49676513671875
true = tensor([132.5000])
difference = tensor([4.0032])


pred =125.40156555175781
true = tensor([133.6000])
difference = tensor([8.1984])


pred =199.6178741455078
true = tensor([211.])
difference = tensor([11.3821])


pred =104.14472198486328
true = tensor([106.5000])
difference = tensor([2.3553])


pred =146.73377990722656
true = tensor([146.])
difference = tensor([0.7338])


pred =156.8799285888672
true = tensor([159.])
difference = tensor([2.1201])


pred =125.03218078613281
true = tensor([122.2000])
difference = tensor([2.8322])


pred =146.63571166992188
true = tensor([147.])
difference = tensor([0.3643])


pred =230.35708618164062
true = tensor([226.])
difference = tensor([4.3571])


pred =148.087646484375
true = tensor([139.])
difference = tensor([9.0876])


pred =165.50103759765625
true = tensor([166.5000])
difference = tensor([0.9990])


pred =153.92123413085938
true = tensor([162.])
difference = tensor([8.0788])


pred =211.6948699951172
true = tensor([215.])
difference = tensor([3.3051])


