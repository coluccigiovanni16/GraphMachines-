
+++++++++++++++++++++++++++++++++++REPORT+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

LISTA TEST FILE  
dict_keys(['dimethyl_peroxide.ct', 'dimethyl_sulfide.ct', 'dimethyl_disulfide.ct', 'ethyl_methyl_ether.ct', 'ethyl_methyl_peroxide.ct', 'dimethoxymethane.ct', 'ethyl_methyl_sulfide.ct', 'ethyl_methyl_disulfide.ct', 'bis(methylthio)methane.ct', 'diethyl_ether.ct', 'isopropyl_methyl_ether.ct', 'diethyl_peroxide.ct', 'isopropyl_methyl_peroxide.ct', '1,1-dimethoxyethane.ct', '1,2-dimethoxyethane.ct', 'methyl_propyl_sulfide.ct', 'diethyl_sulfide.ct', 'isopropyl_methyl_sulfide.ct', '1,1-bis(methylthio)ethane.ct', 'ethylthiomethylthiomethane.ct', '1,2-bis(methylthio)ethane.ct', 'butyl_methyl_ether.ct', 'ethyl_propyl_ether.ct', 'ethyl_isopropyl_ether.ct', 'isobutyl_methyl_ether.ct', 'sec-butyl_methyl_ether.ct', 'tert-butyl_methyl_ether.ct', '2,2-dimethoxypropane.ct', '1,3-dimethoxypropane.ct', '1-ethoxy-2-methoxyethane.ct', '1,2-dimethoxypropane.ct', 'ethyl_isopropyl_sulfide.ct', 'butyl_methyl_sulfide.ct', 'isobutyl_methyl_sulfide.ct', 'ethyl_propyl_sulfide.ct', 'tert-butyl_methyl_sulfide.ct', 'ethyl_isopropyl_disulfide.ct', 'bis(ethylthio)methane.ct', 'methyl_pentyl_ether.ct', 'ethyl_butyl_ether.ct', 'dipropyl_ether.ct', 'isopropyl_propyl_ether.ct', 'ethyl_isobutyl_ether.ct', 'isopentyl_methyl_ether.ct', 'methyl_2-methylbutyl_ether.ct', 'methyl_1-methylbutyl_ether.ct', 'diisopropyl_ether.ct', 'methyl_tert-pentyl_ether.ct', '1,2-dimethylpropyl_methyl_ether.ct', '1,1-diethoxyethane.ct', '1,1-dimethoxy-2-methylpropane.ct', '2-ethoxy-2-methoxypropane.ct', '1,1-dimethoxybutane.ct', '1-methoxy-1-propoxyethane.ct', '1,2-diethoxyethane.ct', '1,3-dimethoxybutane.ct', 'methyl_pentyl_sulfide.ct', 'butyl_ethyl_sulfide.ct', 'dipropyl_sulfide.ct', 'isopropyl_propyl_sulfide.ct', 'ethyl_isobutyl_sulfide.ct', 'isopentyl_methyl_sulfide.ct', 'methyl_2-methylbutyl_sulfide.ct', 'tert-butyl_ethyl_sulfide.ct', 'diisopropyl_sulfide.ct', '1-ethylpropyl_methyl_sulfide.ct', 'dipropyl_disulfide.ct', 'diisopropyl_disulfide.ct', 'sec-butyl_ethyl_disulfide.ct', 'isopropyl_propyl_disulfide.ct', 'tert-butyl_ethyl_disulfide.ct', '1,1-bis(ethylthio)ethane.ct', 'hexyl_methyl_ether.ct', 'ethyl_pentyl_ether.ct', 'butyl_propyl_ether.ct', 'butyl_isopropyl_ether.ct', 'isobutyl_propyl_ether.ct', 'ethyl_isopentyl_ether.ct', 'tert-butyl_propyl_ether.ct', '2,2-dimethylpropyl_ethyl_ether.ct', 'tert-butyl_isopropyl_ether.ct', 'ethyl_tert-pentyl_ether.ct', '1,2-dimethylpropyl_ethyl_ether.ct', 'ethyl_1-ethylpropyl_ether.ct', 'dipropoxymethane.ct', '2,2-diethoxypropane.ct', '1-ethoxy-1-propoxyethane.ct', '1,1-diethoxypropane.ct', '1,3-diethoxypropane.ct', '1,5-dimethoxypentane.ct', '1,4-dimethoxypentane.ct', '1,3-dimethoxypentane.ct', 'hexyl_methyl_sulfide.ct', 'butyl_propyl_sulfide.ct', 'isobutyl_propyl_sulfide.ct', 'isobutyl_isopropyl_sulfide.ct', 'ethyl_2-methylbutyl_sulfide.ct', 'tert-butyl_propyl_sulfide.ct', 'sec-butyl_isopropyl_sulfide.ct', 'butyl_isopropyl_sulfide.ct', '1,3-bis(ethylthio)propane.ct', 'dibutyl_ether.ct', 'isopentyl_propyl_ether.ct', 'butyl_isobutyl_ether.ct', 'butyl_sec-butyl_ether.ct', 'butyl_tert-butyl_ether.ct', 'sec-butyl_isobutyl_ether.ct', '1,3-dimethylpentyl_methyl_ether.ct', 'isobutyl_tert-butyl_ether.ct', 'di-tert-butyl_ether.ct', 'isopropyl_tert-pentyl_ether.ct', 'heptyl_methyl_ether.ct', '1-ethylpropyl_propyl_ether.ct', 'di-tert-butyl_peroxide.ct', '1,1-diisopropoxyethane.ct', '1,1-dipropoxyethane.ct', '1,1-dimethoxyhexane.ct', '1,4-diethoxybutane.ct', 'dibutylsulfide.ct', 'diisobutyl_sulfide.ct', 'butyl_isobutyl_sulfide.ct', 'di-tert-butyl_sulfide.ct', 'di-sec-butyl_sulfide.ct', 'butyl_sec-butyl_sulfide.ct', 'sec-butyl_isobutyl_sulfide.ct', 'heptyl_methyl_sulfide.ct', 'diisobutyl_disulfide.ct', 'di-tert-butyl_disulfide.ct', '1,1-bis(isopropylthio)ethane.ct', '1-ethyl-1,3-dimethylbutyl_methyl_ether.ct', 'ethyl_heptyl_ether.ct', 'butyl_isopentyl_ether.ct', 'tert-butyl_isopentyl_ether.ct', 'butyl_pentyl_ether.ct', '1,5-dimethylhexyl_methyl_ether.ct', 'methyl_1-methylheptyl_ether.ct', 'methyl_octyl_ether.ct', '2-ethylhexyl_methyl_ether.ct', 'methyl_1,1,4-trimethylpentyl_ether.ct', '3,5-dimethylhexyl_methyl_ether.ct', 'ethyl_1,1,3-trimethylbutyl_ether.ct', 'tert-butyl_tert-pentyl_peroxide.ct', '1,1-dimethoxy-2,2-dimethylpentane.ct', '1,1-diethoxypentane.ct', '1,1-diisopropoxypropane.ct', '1,3-dipropoxypropane.ct', '1,3-diisopropoxypropane.ct', 'ethyl_heptyl_sulfide.ct', 'methyl_octyl_sulfide.ct', 'bis(butylthio)methane.ct', '2,2-bis(propylthio)propane.ct', 'ethyl_octyl_ether.ct', 'ethyl_1,1,3,3-tetramethylbutyl_ether.ct', 'bis(1-methylbutyl)_ether.ct', 'diisopentyl_ether.ct', 'dipentyl_ether.ct', 'isopropyl_heptyl_ether.ct', 'heptyl_propyl_ether.ct', 'isopentyl_pentyl_ether.ct', 'methyl_1-methyloctyl_ether.ct', 'di-tert-pentyl_sulfide.ct', 'dipentyl_sulfide.ct', 'isobutyl_4-methylpentyl_sulfide.ct', 'methyl_nonyl_sulfide.ct'])


LISTA VALIDATION FILE  
dict_keys(['dimethyl_ether.ct', 'methyl_propyl_ether.ct', 'diethyl_disulfide.ct', 'diethoxymethane.ct', 'ethyl_propyl_disulfide.ct', 'ethyl_sec-butyl_ether.ct', '1,4-dimethoxybutane.ct', 'sec-butyl_ethyl_sulfide.ct', '1,2-bis(ethylthio)ethane.ct', 'ethyl_1-methylbutyl_ether.ct', '1-ethoxy-4-methoxybutane.ct', 'ethyl_isopentyl_sulfide.ct', 'diisobutyl_ether.ct', '2,4-dimethoxy-2-methylpentane.ct', 'dibutyl_disulfide.ct', 'isobutyl_isopentyl_ether.ct', '1,1-dipropoxypropane.ct', 'bis(1-ethylpropyl)_ether.ct', 'diisopentyl_sulfide.ct'])


Our model: 

RegressionGm(
  (fc1): Linear(in_features=12, out_features=4, bias=False)
  (fc2): Linear(in_features=4, out_features=1, bias=False)
  (LRelu): SELU()
  (fc1Root): Linear(in_features=12, out_features=4, bias=False)
  (fc2Root): Linear(in_features=4, out_features=1, bias=False)
  (LReluRoot): SELU()
)
Printing children
------------------------------[Linear(in_features=12, out_features=4, bias=False), Linear(in_features=4, out_features=1, bias=False), SELU(), Linear(in_features=12, out_features=4, bias=False), Linear(in_features=4, out_features=1, bias=False), SELU()]

Printing Modules
------------------------------[RegressionGm(
  (fc1): Linear(in_features=12, out_features=4, bias=False)
  (fc2): Linear(in_features=4, out_features=1, bias=False)
  (LRelu): SELU()
  (fc1Root): Linear(in_features=12, out_features=4, bias=False)
  (fc2Root): Linear(in_features=4, out_features=1, bias=False)
  (LReluRoot): SELU()
), Linear(in_features=12, out_features=4, bias=False), Linear(in_features=4, out_features=1, bias=False), SELU(), Linear(in_features=12, out_features=4, bias=False), Linear(in_features=4, out_features=1, bias=False), SELU()]
The state dict keys: 

odict_keys(['fc1.weight', 'fc2.weight', 'fc1Root.weight', 'fc2Root.weight'])Models state_dict:fc1.weight	torch.Size([4, 12])fc2.weight	torch.Size([1, 4])fc1Root.weight	torch.Size([4, 12])fc2Root.weight	torch.Size([1, 4])OrderedDict([('fc1.weight', tensor([[-0.1282,  0.4241, -0.0215,  0.0794, -0.1314, -0.2825,  0.0081,  0.0760,
          0.0648, -0.1160, -0.0168, -0.1252],
        [-0.1092,  0.0521,  0.1136,  0.1154,  0.1637, -0.1539, -0.3675,  0.0513,
          0.1160, -0.0758, -0.1461, -0.2023],
        [ 0.2461, -0.3396, -0.1000,  0.1852, -0.0714, -0.0600, -0.0827,  0.3328,
         -0.0449, -0.1422,  0.4302,  0.2093],
        [ 0.0674, -0.0896,  0.1184, -0.0701, -0.0835,  0.3049,  0.2018, -0.0655,
          0.0518,  0.0373,  0.2575,  0.0086]])), ('fc2.weight', tensor([[ 0.3847,  0.2344, -0.1993, -0.1193]])), ('fc1Root.weight', tensor([[-0.2728,  0.1297,  0.1165,  0.3460,  0.2977, -0.2703, -0.1620,  0.0365,
          0.1553,  0.0089,  0.0502, -0.2106],
        [-0.3829,  0.2376,  0.2307,  0.0775, -0.0378, -0.2670, -0.1222,  0.1666,
          0.1106, -0.2375, -0.2037, -0.0150],
        [-0.0527, -0.0587,  0.3085, -0.1093,  0.1628, -0.1730, -0.0008, -0.2720,
          0.1444,  0.1392, -0.3788,  0.0135],
        [-0.3685, -0.1552, -0.0212, -0.0437,  0.3182, -0.1852,  0.1203,  0.1587,
          0.1134, -0.3089, -0.3037,  0.1301]])), ('fc2Root.weight', tensor([[-0.4749, -0.3127, -0.4501, -0.3058]]))])
---------------plt.close(fig)    # close the figure window-------------------------------------------------------------------------------------------

 Optimizer's state_dict:
CRITERION = MSELoss()
OPTIMIZER = Adam (
Parameter Group 0
    amsgrad: False
    betas: (0.9, 0.999)
    eps: 1e-08
    lr: 0.001
    weight_decay: 0
)
Tempo di training 0.2562243938446045


state	{139712074429376: {'step': 100, 'exp_avg': tensor([[ 3.3541e+01, -1.2962e+01, -3.1946e-01, -2.4983e-02, -1.1941e-01,
          2.1341e+01,  4.5325e+00,  7.6367e+00,  6.1486e-02,  5.0405e-02,
          2.2891e+01,  1.0959e+01],
        [ 2.1749e+01, -8.7880e+00, -1.1318e-01,  4.2144e-02,  1.4727e-01,
          1.4784e+01,  1.7535e+00,  4.9326e+00,  1.0611e-01,  6.2307e-02,
          1.4850e+01,  6.8752e+00],
        [-1.5927e+01,  6.1695e+00,  1.0638e-01,  2.1573e-01, -6.7266e-02,
         -1.1359e+01, -1.9679e+00, -2.6790e+00, -4.3995e-02, -2.2311e-01,
         -1.0478e+01, -5.3001e+00],
        [-8.9910e+00,  3.5823e+00,  2.0844e-01, -3.7932e-02, -7.7902e-02,
         -6.0876e+00, -8.9631e-01, -1.7200e+00,  5.0077e-02, -1.8478e-02,
         -5.8519e+00, -3.0843e+00]]), 'exp_avg_sq': tensor([[3.8893e+01, 4.2279e+00, 3.6417e-03, 1.6736e-05, 2.4231e-03, 1.5466e+01,
         8.0036e-01, 2.1687e+00, 8.9989e-04, 5.5432e-04, 2.1513e+01, 4.1827e+00],
        [1.4530e+01, 1.8327e+00, 2.7616e-04, 1.4778e-03, 3.4081e-03, 6.6137e+00,
         9.6735e-02, 8.0336e-01, 2.0109e-03, 1.6431e-04, 7.6351e+00, 1.5078e+00],
        [6.8735e+00, 8.2662e-01, 2.3563e-04, 4.8962e-03, 1.0202e-03, 3.4533e+00,
         1.2143e-01, 2.0128e-01, 5.7860e-04, 4.4418e-03, 3.1691e+00, 7.1098e-01],
        [1.9270e+00, 2.6708e-01, 3.0043e-03, 8.6060e-04, 1.2599e-03, 8.5210e-01,
         1.9431e-02, 7.9677e-02, 6.8304e-04, 2.4932e-04, 8.3771e-01, 2.1601e-01]])}, 139712074443504: {'step': 100, 'exp_avg': tensor([[-54.5109, -46.0421,  60.7459,  38.9401]]), 'exp_avg_sq': tensor([[ 73.5450,  53.8863, 100.4277,  38.3406]])}, 139712074442304: {'step': 100, 'exp_avg': tensor([[ 9.8892e+01, -4.7644e+01, -5.3963e+01, -2.7698e+01, -6.9470e+00,
          7.7817e+01,  1.2367e+01,  8.6926e+00,  2.4007e-02,  1.4484e+01,
          8.4458e+01,  3.8829e+01],
        [ 4.9225e+01, -2.3793e+01, -2.6618e+01, -1.5866e+01, -3.9936e+00,
          4.0107e+01,  5.1571e+00,  3.9869e+00,  1.7371e-02,  8.0757e+00,
          4.1142e+01,  2.2102e+01],
        [ 1.1686e+02, -5.6767e+01, -6.2264e+01, -4.2901e+01, -1.4245e+01,
          1.0121e+02,  1.0880e+01,  4.7159e+00,  2.2389e-02,  2.8748e+01,
          8.8089e+01,  5.2087e+01],
        [ 7.3793e+01, -3.6141e+01, -4.0435e+01, -2.4978e+01, -4.8388e+00,
          6.0450e+01,  8.3889e+00,  5.0250e+00,  1.7786e-02,  9.8917e+00,
          6.3867e+01,  3.7049e+01]]), 'exp_avg_sq': tensor([[1.2886e+03, 1.1278e+02, 1.0676e+02, 2.5052e+01, 1.3869e+00, 8.5821e+02,
         1.7234e+01, 6.4930e+00, 9.5759e-05, 3.4625e+01, 9.0247e+02, 2.3243e+02],
        [2.8974e+02, 2.6357e+01, 2.5258e+01, 7.6337e+00, 4.2302e-01, 1.9428e+02,
         3.0411e+00, 1.8284e+00, 5.7217e-05, 7.2767e+00, 2.0520e+02, 6.2387e+01],
        [1.3328e+03, 1.3293e+02, 1.2855e+02, 5.1762e+01, 5.0806e+00, 9.7100e+02,
         1.3871e+01, 2.6286e+00, 8.5477e-05, 4.7990e+01, 8.9092e+02, 3.0696e+02],
        [4.8052e+02, 5.0102e+01, 5.1057e+01, 1.7090e+01, 6.0356e-01, 3.2620e+02,
         5.9002e+00, 2.1279e+00, 5.9348e-05, 1.0111e+01, 3.5101e+02, 1.2088e+02]])}, 139712074443664: {'step': 100, 'exp_avg': tensor([[246.4370, 296.9673, 191.6449, 209.8644]]), 'exp_avg_sq': tensor([[3151.6929, 5796.7085, 1744.8756, 2974.1221]])}}param_groups	[{'lr': 0.001, 'betas': (0.9, 0.999), 'eps': 1e-08, 'weight_decay': 0, 'amsgrad': False, 'params': [139712074429376, 139712074443504, 139712074442304, 139712074443664]}]

Average Error Test Dataset= 136.9188800610994
RMSE Train Dataset = [140.0203598476843, 139.94844195720793, 139.87479753113138, 139.79762158205696, 139.71481136810442, 139.62452439489275, 139.52316955885857, 139.40545491254997, 139.27234868908832, 139.12431210521763]
RMSE Test Dataset = [147.35562982331214, 147.28531118419446, 147.21320104698492, 147.1372459325816, 147.05564024587767, 146.9668728617099, 146.86785221969103, 146.75540343544424, 146.62908269038923, 146.4890140932077]
Number of epochs 100

pred =1.137801170349121
true = tensor([-23.7000])
difference = tensor([24.8378])


pred =1.1841435432434082
true = tensor([40.])
difference = tensor([38.8159])


pred =1.4865480661392212
true = tensor([154.])
difference = tensor([152.5135])


pred =1.4717116355895996
true = tensor([88.])
difference = tensor([86.5283])


pred =1.4871482849121094
true = tensor([173.7000])
difference = tensor([172.2128])


pred =1.5830899477005005
true = tensor([81.2000])
difference = tensor([79.6169])


pred =1.1866211891174316
true = tensor([132.5000])
difference = tensor([131.3134])


pred =1.5878732204437256
true = tensor([133.6000])
difference = tensor([132.0121])


pred =1.4910914897918701
true = tensor([211.])
difference = tensor([209.5089])


pred =1.59030282497406
true = tensor([106.5000])
difference = tensor([104.9097])


pred =1.1866543292999268
true = tensor([146.])
difference = tensor([144.8133])


pred =1.5610624551773071
true = tensor([159.])
difference = tensor([157.4389])


pred =1.5594768524169922
true = tensor([122.2000])
difference = tensor([120.6405])


pred =1.4275685548782349
true = tensor([147.])
difference = tensor([145.5724])


pred =1.5047568082809448
true = tensor([226.])
difference = tensor([224.4952])


pred =1.5594170093536377
true = tensor([139.])
difference = tensor([137.4406])


pred =1.5637004375457764
true = tensor([166.5000])
difference = tensor([164.9363])


pred =1.5867844820022583
true = tensor([162.])
difference = tensor([160.4132])


pred =1.5611042976379395
true = tensor([215.])
difference = tensor([213.4389])


