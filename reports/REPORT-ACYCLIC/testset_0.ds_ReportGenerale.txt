
+++++++++++++++++++++++++++++++++++REPORT+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

LISTA TEST FILE  
dict_keys(['dimethyl_peroxide.ct', 'dimethyl_sulfide.ct', 'dimethyl_disulfide.ct', 'ethyl_methyl_ether.ct', 'ethyl_methyl_peroxide.ct', 'dimethoxymethane.ct', 'ethyl_methyl_sulfide.ct', 'ethyl_methyl_disulfide.ct', 'bis(methylthio)methane.ct', 'diethyl_ether.ct', 'isopropyl_methyl_ether.ct', 'diethyl_peroxide.ct', 'isopropyl_methyl_peroxide.ct', '1,1-dimethoxyethane.ct', '1,2-dimethoxyethane.ct', 'methyl_propyl_sulfide.ct', 'diethyl_sulfide.ct', 'isopropyl_methyl_sulfide.ct', '1,1-bis(methylthio)ethane.ct', 'ethylthiomethylthiomethane.ct', '1,2-bis(methylthio)ethane.ct', 'butyl_methyl_ether.ct', 'ethyl_propyl_ether.ct', 'ethyl_isopropyl_ether.ct', 'isobutyl_methyl_ether.ct', 'sec-butyl_methyl_ether.ct', 'tert-butyl_methyl_ether.ct', '2,2-dimethoxypropane.ct', '1,3-dimethoxypropane.ct', '1-ethoxy-2-methoxyethane.ct', '1,2-dimethoxypropane.ct', 'ethyl_isopropyl_sulfide.ct', 'butyl_methyl_sulfide.ct', 'isobutyl_methyl_sulfide.ct', 'ethyl_propyl_sulfide.ct', 'tert-butyl_methyl_sulfide.ct', 'ethyl_isopropyl_disulfide.ct', 'bis(ethylthio)methane.ct', 'methyl_pentyl_ether.ct', 'ethyl_butyl_ether.ct', 'dipropyl_ether.ct', 'isopropyl_propyl_ether.ct', 'ethyl_isobutyl_ether.ct', 'isopentyl_methyl_ether.ct', 'methyl_2-methylbutyl_ether.ct', 'methyl_1-methylbutyl_ether.ct', 'diisopropyl_ether.ct', 'methyl_tert-pentyl_ether.ct', '1,2-dimethylpropyl_methyl_ether.ct', '1,1-diethoxyethane.ct', '1,1-dimethoxy-2-methylpropane.ct', '2-ethoxy-2-methoxypropane.ct', '1,1-dimethoxybutane.ct', '1-methoxy-1-propoxyethane.ct', '1,2-diethoxyethane.ct', '1,3-dimethoxybutane.ct', 'methyl_pentyl_sulfide.ct', 'butyl_ethyl_sulfide.ct', 'dipropyl_sulfide.ct', 'isopropyl_propyl_sulfide.ct', 'ethyl_isobutyl_sulfide.ct', 'isopentyl_methyl_sulfide.ct', 'methyl_2-methylbutyl_sulfide.ct', 'tert-butyl_ethyl_sulfide.ct', 'diisopropyl_sulfide.ct', '1-ethylpropyl_methyl_sulfide.ct', 'dipropyl_disulfide.ct', 'diisopropyl_disulfide.ct', 'sec-butyl_ethyl_disulfide.ct', 'isopropyl_propyl_disulfide.ct', 'tert-butyl_ethyl_disulfide.ct', '1,1-bis(ethylthio)ethane.ct', 'hexyl_methyl_ether.ct', 'ethyl_pentyl_ether.ct', 'butyl_propyl_ether.ct', 'butyl_isopropyl_ether.ct', 'isobutyl_propyl_ether.ct', 'ethyl_isopentyl_ether.ct', 'tert-butyl_propyl_ether.ct', '2,2-dimethylpropyl_ethyl_ether.ct', 'tert-butyl_isopropyl_ether.ct', 'ethyl_tert-pentyl_ether.ct', '1,2-dimethylpropyl_ethyl_ether.ct', 'ethyl_1-ethylpropyl_ether.ct', 'dipropoxymethane.ct', '2,2-diethoxypropane.ct', '1-ethoxy-1-propoxyethane.ct', '1,1-diethoxypropane.ct', '1,3-diethoxypropane.ct', '1,5-dimethoxypentane.ct', '1,4-dimethoxypentane.ct', '1,3-dimethoxypentane.ct', 'hexyl_methyl_sulfide.ct', 'butyl_propyl_sulfide.ct', 'isobutyl_propyl_sulfide.ct', 'isobutyl_isopropyl_sulfide.ct', 'ethyl_2-methylbutyl_sulfide.ct', 'tert-butyl_propyl_sulfide.ct', 'sec-butyl_isopropyl_sulfide.ct', 'butyl_isopropyl_sulfide.ct', '1,3-bis(ethylthio)propane.ct', 'dibutyl_ether.ct', 'isopentyl_propyl_ether.ct', 'butyl_isobutyl_ether.ct', 'butyl_sec-butyl_ether.ct', 'butyl_tert-butyl_ether.ct', 'sec-butyl_isobutyl_ether.ct', '1,3-dimethylpentyl_methyl_ether.ct', 'isobutyl_tert-butyl_ether.ct', 'di-tert-butyl_ether.ct', 'isopropyl_tert-pentyl_ether.ct', 'heptyl_methyl_ether.ct', '1-ethylpropyl_propyl_ether.ct', 'di-tert-butyl_peroxide.ct', '1,1-diisopropoxyethane.ct', '1,1-dipropoxyethane.ct', '1,1-dimethoxyhexane.ct', '1,4-diethoxybutane.ct', 'dibutylsulfide.ct', 'diisobutyl_sulfide.ct', 'butyl_isobutyl_sulfide.ct', 'di-tert-butyl_sulfide.ct', 'di-sec-butyl_sulfide.ct', 'butyl_sec-butyl_sulfide.ct', 'sec-butyl_isobutyl_sulfide.ct', 'heptyl_methyl_sulfide.ct', 'diisobutyl_disulfide.ct', 'di-tert-butyl_disulfide.ct', '1,1-bis(isopropylthio)ethane.ct', '1-ethyl-1,3-dimethylbutyl_methyl_ether.ct', 'ethyl_heptyl_ether.ct', 'butyl_isopentyl_ether.ct', 'tert-butyl_isopentyl_ether.ct', 'butyl_pentyl_ether.ct', '1,5-dimethylhexyl_methyl_ether.ct', 'methyl_1-methylheptyl_ether.ct', 'methyl_octyl_ether.ct', '2-ethylhexyl_methyl_ether.ct', 'methyl_1,1,4-trimethylpentyl_ether.ct', '3,5-dimethylhexyl_methyl_ether.ct', 'ethyl_1,1,3-trimethylbutyl_ether.ct', 'tert-butyl_tert-pentyl_peroxide.ct', '1,1-dimethoxy-2,2-dimethylpentane.ct', '1,1-diethoxypentane.ct', '1,1-diisopropoxypropane.ct', '1,3-dipropoxypropane.ct', '1,3-diisopropoxypropane.ct', 'ethyl_heptyl_sulfide.ct', 'methyl_octyl_sulfide.ct', 'bis(butylthio)methane.ct', '2,2-bis(propylthio)propane.ct', 'ethyl_octyl_ether.ct', 'ethyl_1,1,3,3-tetramethylbutyl_ether.ct', 'bis(1-methylbutyl)_ether.ct', 'diisopentyl_ether.ct', 'dipentyl_ether.ct', 'isopropyl_heptyl_ether.ct', 'heptyl_propyl_ether.ct', 'isopentyl_pentyl_ether.ct', 'methyl_1-methyloctyl_ether.ct', 'di-tert-pentyl_sulfide.ct', 'dipentyl_sulfide.ct', 'isobutyl_4-methylpentyl_sulfide.ct', 'methyl_nonyl_sulfide.ct'])


LISTA VALIDATION FILE  
dict_keys(['dimethyl_ether.ct', 'methyl_propyl_ether.ct', 'diethyl_disulfide.ct', 'diethoxymethane.ct', 'ethyl_propyl_disulfide.ct', 'ethyl_sec-butyl_ether.ct', '1,4-dimethoxybutane.ct', 'sec-butyl_ethyl_sulfide.ct', '1,2-bis(ethylthio)ethane.ct', 'ethyl_1-methylbutyl_ether.ct', '1-ethoxy-4-methoxybutane.ct', 'ethyl_isopentyl_sulfide.ct', 'diisobutyl_ether.ct', '2,4-dimethoxy-2-methylpentane.ct', 'dibutyl_disulfide.ct', 'isobutyl_isopentyl_ether.ct', '1,1-dipropoxypropane.ct', 'bis(1-ethylpropyl)_ether.ct', 'diisopentyl_sulfide.ct'])


Our model: 

RegressionGm(
  (fc1): Linear(in_features=12, out_features=4, bias=False)
  (fc2): Linear(in_features=4, out_features=1, bias=False)
  (LRelu): SELU()
  (fc1Root): Linear(in_features=12, out_features=4, bias=False)
  (fc2Root): Linear(in_features=4, out_features=1, bias=False)
  (LReluRoot): SELU()
)
Printing children
------------------------------[Linear(in_features=12, out_features=4, bias=False), Linear(in_features=4, out_features=1, bias=False), SELU(), Linear(in_features=12, out_features=4, bias=False), Linear(in_features=4, out_features=1, bias=False), SELU()]

Printing Modules
------------------------------[RegressionGm(
  (fc1): Linear(in_features=12, out_features=4, bias=False)
  (fc2): Linear(in_features=4, out_features=1, bias=False)
  (LRelu): SELU()
  (fc1Root): Linear(in_features=12, out_features=4, bias=False)
  (fc2Root): Linear(in_features=4, out_features=1, bias=False)
  (LReluRoot): SELU()
), Linear(in_features=12, out_features=4, bias=False), Linear(in_features=4, out_features=1, bias=False), SELU(), Linear(in_features=12, out_features=4, bias=False), Linear(in_features=4, out_features=1, bias=False), SELU()]
The state dict keys: 

odict_keys(['fc1.weight', 'fc2.weight', 'fc1Root.weight', 'fc2Root.weight'])Models state_dict:fc1.weight	torch.Size([4, 12])fc2.weight	torch.Size([1, 4])fc1Root.weight	torch.Size([4, 12])fc2Root.weight	torch.Size([1, 4])OrderedDict([('fc1.weight', tensor([[ 7.6800e-01,  3.1198e-02, -3.6187e-03, -2.5183e-01,  5.0027e-30,
          4.2168e-01,  4.0742e+00, -1.6658e+00,  1.3971e-42, -1.0129e-01,
          1.2835e+00,  3.3265e-01],
        [ 5.1807e-01, -4.9216e-01, -4.0577e-01, -5.7721e-01, -4.8284e-22,
          1.1152e-01,  3.7173e+00, -1.6275e+00,  1.1351e-43,  1.5036e-01,
          1.3941e+00,  5.2797e-01],
        [-1.9645e-01,  6.1340e-01, -2.2987e-02,  1.3892e-01,  1.9304e-21,
         -3.5706e-01, -3.0254e-01, -4.4058e-01, -7.9627e-35, -2.6535e-02,
         -4.7218e-01, -3.7061e-01],
        [ 7.4107e-01, -3.9744e-01, -3.7676e-01, -5.8216e-01, -2.9416e-23,
          3.5165e-01,  4.1145e+00, -1.9514e+00, -1.2476e-26,  1.6822e-01,
          1.3978e+00,  8.1880e-02]])), ('fc2.weight', tensor([[-1.3359, -0.9913,  1.2294, -1.2328]])), ('fc1Root.weight', tensor([[ 4.6273e-01,  8.7660e-02, -3.3772e-02, -9.0290e-02,  8.8430e-01,
          1.1898e+00, -2.7272e+00,  2.4816e+00,  7.5782e-42, -4.1943e-01,
          6.6391e-01,  3.4289e-01],
        [-2.9330e-02,  2.3544e-01,  2.2642e-01,  3.8669e-01,  2.5993e-01,
         -4.1644e-01, -2.2334e-01, -3.2828e-01,  8.7637e-42, -1.7696e-01,
          7.2752e-02, -4.1186e-01],
        [ 3.4788e-02,  4.7555e-01,  3.7958e-01,  2.1466e-01,  3.6989e-01,
         -1.7208e-01, -2.5958e-01, -6.7560e-02,  6.2078e-42,  9.2426e-02,
         -1.2405e-01, -1.2806e-01],
        [ 3.5720e-01, -1.3214e+00, -1.3883e+00, -1.3400e+00, -1.1850e+00,
         -3.7285e-01,  4.5577e+00, -3.4552e+00, -6.5174e-42,  3.1271e-02,
          3.2436e-01,  3.1492e-01]])), ('fc2Root.weight', tensor([[-1.1962, -0.8457, -0.8591,  1.5288]]))])
---------------plt.close(fig)    # close the figure window-------------------------------------------------------------------------------------------

 Optimizer's state_dict:
CRITERION = MSELoss()
OPTIMIZER = Adam (
Parameter Group 0
    amsgrad: False
    betas: (0.9, 0.999)
    eps: 1e-08
    lr: 0.001
    weight_decay: 0
)
Tempo di training 12.459953546524048


state	{140059495451056: {'step': 5000, 'exp_avg': tensor([[-4.4721e-01, -8.0823e-01,  2.4246e-01,  5.8752e-02,  1.1258e-30,
          4.5719e+00, -1.4767e+00, -3.2906e+00,  1.7376e-43, -2.7909e-01,
         -2.3405e+00,  2.3240e+00],
        [-9.4061e-01, -1.5642e+00,  1.3066e-01, -4.1264e-03, -8.1704e-23,
          3.3248e+00, -1.0111e+00, -3.0490e+00,  1.9618e-44, -1.7947e-01,
         -2.2853e+00,  1.7590e+00],
        [-1.3600e+00, -1.7541e-02,  4.1488e-03, -2.1826e-03,  3.2220e-22,
         -1.5409e+00,  1.6089e-02,  5.4945e-02, -9.8223e-36,  4.0099e-04,
         -4.9486e-02, -1.3984e+00],
        [-1.1580e+00, -1.9191e+00,  1.7813e-01,  1.1459e-02, -5.1266e-24,
          4.1610e+00, -1.3196e+00, -3.7830e+00, -2.4012e-27, -2.2541e-01,
         -2.8832e+00,  2.1173e+00]]), 'exp_avg_sq': tensor([[8.2609e+02, 2.3312e+04, 2.2501e+02, 6.2575e+00, 2.0757e-05, 6.9890e+02,
         2.0929e+02, 1.3499e+02, 4.2672e-06, 1.4219e-01, 1.6401e+02, 3.9254e+02],
        [9.6629e+02, 3.2537e+04, 2.2576e+02, 6.7739e+00, 3.4169e-05, 7.6213e+02,
         1.3119e+02, 8.2428e+01, 1.8193e-06, 1.3619e-01, 1.7300e+02, 4.1917e+02],
        [3.6954e+01, 4.6606e+00, 2.4695e-03, 8.5007e-05, 3.5871e-05, 3.5861e+01,
         8.6770e-03, 2.7052e-02, 1.7069e-05, 1.2379e-04, 5.3755e-01, 3.2375e+01],
        [1.2492e+03, 4.0999e+04, 2.9733e+02, 8.8139e+00, 3.1141e-05, 9.9831e+02,
         1.9466e+02, 1.2243e+02, 2.4887e-05, 1.8210e-01, 2.2676e+02, 5.4988e+02]])}, 140059495448656: {'step': 5000, 'exp_avg': tensor([[ 3.1714,  2.4812, -2.2712,  2.3734]]), 'exp_avg_sq': tensor([[13666.9346, 32322.6113,  3548.7485, 28668.4023]])}, 140059495449296: {'step': 5000, 'exp_avg': tensor([[-7.6270e-01, -3.4190e-02,  3.9296e-03, -3.9419e-02, -1.2450e-01,
         -2.7335e+00,  3.3765e+00, -1.3932e+00,  2.0179e-43,  4.8973e-03,
         -7.7334e-01, -1.0856e-01],
        [-1.2249e-02,  7.7101e-02,  1.3520e-01,  1.1499e-02,  6.9983e-03,
         -1.1903e-02, -7.8952e-03, -1.7115e-02,  2.2981e-43, -4.6647e-03,
         -9.5519e-03, -1.0945e-02],
        [ 2.0068e-04,  1.6887e-02,  1.6072e-02,  7.1344e-03,  9.7205e-03,
         -4.6543e-03, -6.9930e-03, -2.1767e-03,  1.7376e-43,  2.4263e-03,
         -3.9680e-03, -3.4889e-03],
        [ 7.6842e-01,  1.0102e+00,  1.8665e+00,  9.5724e+00, -8.9037e-01,
          3.4679e+00, -4.4724e+00,  1.7827e+00, -1.7376e-43, -1.0439e-01,
          8.7276e-01,  1.7019e-01]]), 'exp_avg_sq': tensor([[1.8647e+00, 1.9465e+00, 8.1731e+00, 2.1716e+00, 1.9393e-01, 5.0229e+00,
         6.2960e+00, 1.4793e+00, 4.0712e-09, 3.8546e-02, 1.5096e+00, 3.0547e-01],
        [9.2477e+00, 3.5954e+00, 7.9869e+00, 1.2711e+00, 8.6831e-02, 6.1230e+00,
         1.5123e-01, 4.4931e-02, 6.8834e-08, 1.9572e-01, 6.8221e+00, 1.5848e+00],
        [1.1041e+01, 3.2817e+00, 5.3515e+00, 2.4151e+00, 1.5686e-01, 7.9020e+00,
         1.0607e-01, 3.7256e-02, 7.4990e-07, 2.9728e-01, 7.7555e+00, 2.4213e+00],
        [4.1377e+01, 2.7607e+03, 2.2067e+04, 3.0836e+04, 2.2838e+03, 4.1911e+01,
         2.7042e+01, 6.7915e+00, 1.7586e-11, 1.2632e+00, 2.9663e+01, 1.2858e+01]])}, 140059495450336: {'step': 5000, 'exp_avg': tensor([[ 14.9771,  -0.8918,  -0.9057, -28.5952]]), 'exp_avg_sq': tensor([[   467.2176,    394.1592,    399.7887, 121277.6250]])}}param_groups	[{'lr': 0.001, 'betas': (0.9, 0.999), 'eps': 1e-08, 'weight_decay': 0, 'amsgrad': False, 'params': [140059495451056, 140059495448656, 140059495449296, 140059495450336]}]

Average Error Test Dataset= 10.358629327071341
RMSE Train Dataset = [64.62291839611741, 32.26825806447607, 26.822269536085237, 23.830898916408138, 20.63712208873778, 17.275796812812374, 14.639846960216309, 13.166718945620763, 12.02399842340049, 11.061791693646777]
RMSE Test Dataset = [66.99507692384009, 37.27790514385247, 32.34963714537614, 29.16417132647791, 25.63090395020604, 21.905389744387467, 19.15318545149744, 17.654987337318012, 16.222509047761, 14.753998295317855]
Number of epochs 5000

pred =21.196697235107422
true = tensor([-23.7000])
difference = tensor([44.8967])


pred =68.37770080566406
true = tensor([40.])
difference = tensor([28.3777])


pred =157.64239501953125
true = tensor([154.])
difference = tensor([3.6424])


pred =86.6008529663086
true = tensor([88.])
difference = tensor([1.3991])


pred =180.2626953125
true = tensor([173.7000])
difference = tensor([6.5627])


pred =92.1512451171875
true = tensor([81.2000])
difference = tensor([10.9512])


pred =120.42549896240234
true = tensor([132.5000])
difference = tensor([12.0745])


pred =136.18093872070312
true = tensor([133.6000])
difference = tensor([2.5809])


pred =201.55075073242188
true = tensor([211.])
difference = tensor([9.4492])


pred =115.53119659423828
true = tensor([106.5000])
difference = tensor([9.0312])


pred =142.08067321777344
true = tensor([146.])
difference = tensor([3.9193])


pred =154.05784606933594
true = tensor([159.])
difference = tensor([4.9422])


pred =124.16648864746094
true = tensor([122.2000])
difference = tensor([1.9665])


pred =129.64199829101562
true = tensor([147.])
difference = tensor([17.3580])


pred =243.1753387451172
true = tensor([226.])
difference = tensor([17.1753])


pred =144.94601440429688
true = tensor([139.])
difference = tensor([5.9460])


pred =166.58026123046875
true = tensor([166.5000])
difference = tensor([0.0803])


pred =171.37258911132812
true = tensor([162.])
difference = tensor([9.3726])


pred =207.9119873046875
true = tensor([215.])
difference = tensor([7.0880])


