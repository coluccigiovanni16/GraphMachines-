
+++++++++++++++++++++++++++++++++++REPORT+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

LISTA TEST FILE  
dict_keys(['dimethyl_peroxide.ct', 'dimethyl_sulfide.ct', 'dimethyl_disulfide.ct', 'ethyl_methyl_ether.ct', 'ethyl_methyl_peroxide.ct', 'dimethoxymethane.ct', 'ethyl_methyl_sulfide.ct', 'ethyl_methyl_disulfide.ct', 'bis(methylthio)methane.ct', 'diethyl_ether.ct', 'isopropyl_methyl_ether.ct', 'diethyl_peroxide.ct', 'isopropyl_methyl_peroxide.ct', '1,1-dimethoxyethane.ct', '1,2-dimethoxyethane.ct', 'methyl_propyl_sulfide.ct', 'diethyl_sulfide.ct', 'isopropyl_methyl_sulfide.ct', '1,1-bis(methylthio)ethane.ct', 'ethylthiomethylthiomethane.ct', '1,2-bis(methylthio)ethane.ct', 'butyl_methyl_ether.ct', 'ethyl_propyl_ether.ct', 'ethyl_isopropyl_ether.ct', 'isobutyl_methyl_ether.ct', 'sec-butyl_methyl_ether.ct', 'tert-butyl_methyl_ether.ct', '2,2-dimethoxypropane.ct', '1,3-dimethoxypropane.ct', '1-ethoxy-2-methoxyethane.ct', '1,2-dimethoxypropane.ct', 'ethyl_isopropyl_sulfide.ct', 'butyl_methyl_sulfide.ct', 'isobutyl_methyl_sulfide.ct', 'ethyl_propyl_sulfide.ct', 'tert-butyl_methyl_sulfide.ct', 'ethyl_isopropyl_disulfide.ct', 'bis(ethylthio)methane.ct', 'methyl_pentyl_ether.ct', 'ethyl_butyl_ether.ct', 'dipropyl_ether.ct', 'isopropyl_propyl_ether.ct', 'ethyl_isobutyl_ether.ct', 'isopentyl_methyl_ether.ct', 'methyl_2-methylbutyl_ether.ct', 'methyl_1-methylbutyl_ether.ct', 'diisopropyl_ether.ct', 'methyl_tert-pentyl_ether.ct', '1,2-dimethylpropyl_methyl_ether.ct', '1,1-diethoxyethane.ct', '1,1-dimethoxy-2-methylpropane.ct', '2-ethoxy-2-methoxypropane.ct', '1,1-dimethoxybutane.ct', '1-methoxy-1-propoxyethane.ct', '1,2-diethoxyethane.ct', '1,3-dimethoxybutane.ct', 'methyl_pentyl_sulfide.ct', 'butyl_ethyl_sulfide.ct', 'dipropyl_sulfide.ct', 'isopropyl_propyl_sulfide.ct', 'ethyl_isobutyl_sulfide.ct', 'isopentyl_methyl_sulfide.ct', 'methyl_2-methylbutyl_sulfide.ct', 'tert-butyl_ethyl_sulfide.ct', 'diisopropyl_sulfide.ct', '1-ethylpropyl_methyl_sulfide.ct', 'dipropyl_disulfide.ct', 'diisopropyl_disulfide.ct', 'sec-butyl_ethyl_disulfide.ct', 'isopropyl_propyl_disulfide.ct', 'tert-butyl_ethyl_disulfide.ct', '1,1-bis(ethylthio)ethane.ct', 'hexyl_methyl_ether.ct', 'ethyl_pentyl_ether.ct', 'butyl_propyl_ether.ct', 'butyl_isopropyl_ether.ct', 'isobutyl_propyl_ether.ct', 'ethyl_isopentyl_ether.ct', 'tert-butyl_propyl_ether.ct', '2,2-dimethylpropyl_ethyl_ether.ct', 'tert-butyl_isopropyl_ether.ct', 'ethyl_tert-pentyl_ether.ct', '1,2-dimethylpropyl_ethyl_ether.ct', 'ethyl_1-ethylpropyl_ether.ct', 'dipropoxymethane.ct', '2,2-diethoxypropane.ct', '1-ethoxy-1-propoxyethane.ct', '1,1-diethoxypropane.ct', '1,3-diethoxypropane.ct', '1,5-dimethoxypentane.ct', '1,4-dimethoxypentane.ct', '1,3-dimethoxypentane.ct', 'hexyl_methyl_sulfide.ct', 'butyl_propyl_sulfide.ct', 'isobutyl_propyl_sulfide.ct', 'isobutyl_isopropyl_sulfide.ct', 'ethyl_2-methylbutyl_sulfide.ct', 'tert-butyl_propyl_sulfide.ct', 'sec-butyl_isopropyl_sulfide.ct', 'butyl_isopropyl_sulfide.ct', '1,3-bis(ethylthio)propane.ct', 'dibutyl_ether.ct', 'isopentyl_propyl_ether.ct', 'butyl_isobutyl_ether.ct', 'butyl_sec-butyl_ether.ct', 'butyl_tert-butyl_ether.ct', 'sec-butyl_isobutyl_ether.ct', '1,3-dimethylpentyl_methyl_ether.ct', 'isobutyl_tert-butyl_ether.ct', 'di-tert-butyl_ether.ct', 'isopropyl_tert-pentyl_ether.ct', 'heptyl_methyl_ether.ct', '1-ethylpropyl_propyl_ether.ct', 'di-tert-butyl_peroxide.ct', '1,1-diisopropoxyethane.ct', '1,1-dipropoxyethane.ct', '1,1-dimethoxyhexane.ct', '1,4-diethoxybutane.ct', 'dibutylsulfide.ct', 'diisobutyl_sulfide.ct', 'butyl_isobutyl_sulfide.ct', 'di-tert-butyl_sulfide.ct', 'di-sec-butyl_sulfide.ct', 'butyl_sec-butyl_sulfide.ct', 'sec-butyl_isobutyl_sulfide.ct', 'heptyl_methyl_sulfide.ct', 'diisobutyl_disulfide.ct', 'di-tert-butyl_disulfide.ct', '1,1-bis(isopropylthio)ethane.ct', '1-ethyl-1,3-dimethylbutyl_methyl_ether.ct', 'ethyl_heptyl_ether.ct', 'butyl_isopentyl_ether.ct', 'tert-butyl_isopentyl_ether.ct', 'butyl_pentyl_ether.ct', '1,5-dimethylhexyl_methyl_ether.ct', 'methyl_1-methylheptyl_ether.ct', 'methyl_octyl_ether.ct', '2-ethylhexyl_methyl_ether.ct', 'methyl_1,1,4-trimethylpentyl_ether.ct', '3,5-dimethylhexyl_methyl_ether.ct', 'ethyl_1,1,3-trimethylbutyl_ether.ct', 'tert-butyl_tert-pentyl_peroxide.ct', '1,1-dimethoxy-2,2-dimethylpentane.ct', '1,1-diethoxypentane.ct', '1,1-diisopropoxypropane.ct', '1,3-dipropoxypropane.ct', '1,3-diisopropoxypropane.ct', 'ethyl_heptyl_sulfide.ct', 'methyl_octyl_sulfide.ct', 'bis(butylthio)methane.ct', '2,2-bis(propylthio)propane.ct', 'ethyl_octyl_ether.ct', 'ethyl_1,1,3,3-tetramethylbutyl_ether.ct', 'bis(1-methylbutyl)_ether.ct', 'diisopentyl_ether.ct', 'dipentyl_ether.ct', 'isopropyl_heptyl_ether.ct', 'heptyl_propyl_ether.ct', 'isopentyl_pentyl_ether.ct', 'methyl_1-methyloctyl_ether.ct', 'di-tert-pentyl_sulfide.ct', 'dipentyl_sulfide.ct', 'isobutyl_4-methylpentyl_sulfide.ct', 'methyl_nonyl_sulfide.ct'])


LISTA VALIDATION FILE  
dict_keys(['dimethyl_ether.ct', 'methyl_propyl_ether.ct', 'diethyl_disulfide.ct', 'diethoxymethane.ct', 'ethyl_propyl_disulfide.ct', 'ethyl_sec-butyl_ether.ct', '1,4-dimethoxybutane.ct', 'sec-butyl_ethyl_sulfide.ct', '1,2-bis(ethylthio)ethane.ct', 'ethyl_1-methylbutyl_ether.ct', '1-ethoxy-4-methoxybutane.ct', 'ethyl_isopentyl_sulfide.ct', 'diisobutyl_ether.ct', '2,4-dimethoxy-2-methylpentane.ct', 'dibutyl_disulfide.ct', 'isobutyl_isopentyl_ether.ct', '1,1-dipropoxypropane.ct', 'bis(1-ethylpropyl)_ether.ct', 'diisopentyl_sulfide.ct'])


Our model: 

RegressionGm(
  (fc1): Linear(in_features=12, out_features=4, bias=False)
  (fc2): Linear(in_features=4, out_features=1, bias=False)
  (LRelu): SELU()
  (fc1Root): Linear(in_features=12, out_features=4, bias=False)
  (fc2Root): Linear(in_features=4, out_features=1, bias=False)
  (LReluRoot): SELU()
)
Printing children
------------------------------[Linear(in_features=12, out_features=4, bias=False), Linear(in_features=4, out_features=1, bias=False), SELU(), Linear(in_features=12, out_features=4, bias=False), Linear(in_features=4, out_features=1, bias=False), SELU()]

Printing Modules
------------------------------[RegressionGm(
  (fc1): Linear(in_features=12, out_features=4, bias=False)
  (fc2): Linear(in_features=4, out_features=1, bias=False)
  (LRelu): SELU()
  (fc1Root): Linear(in_features=12, out_features=4, bias=False)
  (fc2Root): Linear(in_features=4, out_features=1, bias=False)
  (LReluRoot): SELU()
), Linear(in_features=12, out_features=4, bias=False), Linear(in_features=4, out_features=1, bias=False), SELU(), Linear(in_features=12, out_features=4, bias=False), Linear(in_features=4, out_features=1, bias=False), SELU()]
The state dict keys: 

odict_keys(['fc1.weight', 'fc2.weight', 'fc1Root.weight', 'fc2Root.weight'])Models state_dict:fc1.weight	torch.Size([4, 12])fc2.weight	torch.Size([1, 4])fc1Root.weight	torch.Size([4, 12])fc2Root.weight	torch.Size([1, 4])OrderedDict([('fc1.weight', tensor([[ 7.6550e-01, -4.4229e-01, -4.7684e-01, -1.0776e+00,  5.9275e-43,
          1.6827e-01,  2.9646e+00, -9.9648e-01,  7.2447e-43,  2.3828e-01,
          6.7044e-01,  2.0979e-01],
        [-2.1054e-01,  3.3881e-01,  3.1613e-03,  3.5776e-01, -2.0809e-42,
          9.2593e-01, -1.0122e+00, -1.5477e+00,  1.4868e-42, -7.6714e-02,
         -7.7390e-02, -6.4239e-02],
        [ 6.4146e-01, -5.4494e-01, -4.7748e-01, -9.8260e-01, -2.1062e-42,
          4.2251e-01,  2.5247e+00, -1.2727e+00,  1.7278e-42,  2.1184e-01,
          9.1243e-01,  3.0340e-01],
        [-2.6704e-01,  6.2084e-02,  2.9736e-01,  3.4673e-01,  1.2598e-42,
          5.7196e-01, -1.0966e+00, -9.4829e-01, -5.9275e-43, -7.4395e-02,
         -2.1293e-01, -1.1714e-01]])), ('fc2.weight', tensor([[-0.8985,  0.7821, -0.7998,  1.1097]])), ('fc1Root.weight', tensor([[ 1.6029e-02, -1.4226e+00, -1.3516e+00, -1.3269e+00, -9.5351e-01,
         -1.8854e+00,  5.3994e+00, -2.5356e+00,  1.2912e-41,  2.1368e+00,
         -7.2834e-01, -2.4295e-01],
        [ 9.8975e-01, -8.0313e-01,  1.4588e-01,  9.6045e-01,  2.8027e-01,
          1.5423e+00, -1.8257e+00,  1.0248e+00, -2.9965e-41,  9.0173e-01,
          8.1413e-01, -1.2594e+00],
        [-3.3281e-01, -1.3318e+00, -1.3362e+00, -1.2954e+00, -1.1734e+00,
         -1.6248e+00,  5.2300e+00, -2.6824e+00, -7.2307e-42,  2.1122e+00,
         -5.4721e-01,  4.0877e-02],
        [-4.1710e-01, -1.4336e+00, -1.1387e+00, -1.1207e+00, -1.1445e+00,
         -1.9919e+00,  5.3606e+00, -2.7378e+00, -1.3382e-41,  2.0800e+00,
         -8.1308e-01, -1.8578e-01]])), ('fc2Root.weight', tensor([[ 1.6498, -1.4407,  1.7755,  1.7627]]))])
---------------plt.close(fig)    # close the figure window-------------------------------------------------------------------------------------------

 Optimizer's state_dict:
CRITERION = MSELoss()
OPTIMIZER = Adam (
Parameter Group 0
    amsgrad: False
    betas: (0.9, 0.999)
    eps: 1e-08
    lr: 0.001
    weight_decay: 0
)
Tempo di training 29.41533899307251


state	{139823188666560: {'step': 10000, 'exp_avg': tensor([[ 8.7536e-02, -3.7268e-01,  9.1395e-03, -8.7184e-03,  1.0510e-43,
         -2.1979e-02,  4.4272e-01, -8.6601e-02,  1.1911e-43,  2.8373e-03,
          6.8762e-02,  1.3504e-02],
        [-7.6247e-02, -9.5139e-03,  2.0994e-02,  3.0015e-03, -3.7134e-43,
         -3.3395e-01, -2.1424e-03,  3.8588e-03,  2.5924e-43, -2.1556e-03,
         -2.7715e-02,  5.1998e-03],
        [ 7.0760e-02, -3.5896e-01, -1.4290e-03, -1.2045e-02, -3.7134e-43,
          2.9478e-02,  3.7358e-01, -1.4650e-01,  3.0128e-43,  2.4809e-03,
          1.1798e-01,  3.3011e-02],
        [-3.3018e-02,  2.4581e-01,  1.2839e-02,  2.9486e-03,  2.1720e-43,
         -4.5899e-02, -1.4102e-02, -1.9116e-01, -1.0510e-43, -2.0237e-03,
          1.6840e-02, -4.5125e-02]]), 'exp_avg_sq': tensor([[1.2006e+01, 5.0171e+02, 3.6048e-01, 1.6644e-02, 2.4479e-07, 8.7625e+00,
         2.2728e+00, 1.4406e+00, 1.4376e-08, 7.2848e-04, 4.0304e+00, 2.5379e+00],
        [2.5291e+00, 1.9100e+00, 9.9250e-02, 3.3834e-04, 1.2735e-08, 2.5517e+00,
         4.8739e-04, 2.5646e-03, 1.8491e-08, 1.2281e-04, 2.5564e-01, 1.3541e+00],
        [1.0141e+01, 4.4168e+02, 3.2576e-01, 1.5005e-02, 4.4462e-09, 7.3707e+00,
         1.9543e+00, 1.2731e+00, 8.1315e-10, 6.2139e-04, 3.4194e+00, 2.1347e+00],
        [9.7875e+00, 8.5590e+01, 1.4628e-02, 3.0190e-04, 1.6486e-11, 9.3366e+00,
         3.5794e-03, 8.7653e-02, 6.2296e-09, 1.0879e-04, 2.4882e+00, 2.8683e+00]])}, 139823188667120: {'step': 10000, 'exp_avg': tensor([[ 0.1405, -0.0913,  0.1496,  0.3861]]), 'exp_avg_sq': tensor([[661.1411,  29.9536, 879.7820,  29.1329]])}, 139823188666640: {'step': 10000, 'exp_avg': tensor([[ 3.6063e-02,  3.0617e-02,  1.6227e-01,  8.2649e-02,  6.9366e-03,
          6.3039e-03,  6.0242e-02, -1.5428e-02,  2.0179e-43,  3.1703e-02,
          2.6186e-02,  9.9899e-03],
        [-5.6756e-02, -3.1803e-02, -2.1736e-01,  1.3059e-02,  2.5732e-03,
         -3.8053e-02, -1.7447e-02, -5.1785e-03, -4.6943e-43, -4.4182e-03,
         -4.0982e-02,  7.1850e-02],
        [ 3.3328e-02,  3.6066e-02,  1.7648e-01,  9.1021e-02,  5.1606e-03,
          1.3113e-02,  5.5737e-02, -1.5874e-02, -1.1771e-43,  3.1176e-02,
          3.1883e-02,  1.5484e-02],
        [ 3.1732e-02,  3.4060e-02,  1.7814e-01,  9.2945e-02,  5.4411e-03,
          7.0855e-03,  5.7974e-02, -1.6934e-02, -2.1580e-43,  3.0693e-02,
          2.7430e-02,  1.1829e-02]]), 'exp_avg_sq': tensor([[1.9592e-01, 2.2324e+00, 1.5519e+01, 5.9171e+00, 6.8807e-01, 2.5803e-01,
         1.2250e-01, 1.4769e-02, 7.0923e-10, 1.5387e-02, 1.6926e-01, 4.6924e-02],
        [1.2552e-01, 3.3214e-02, 7.2134e+00, 1.0562e-02, 7.3832e-03, 1.2171e-01,
         1.9992e-02, 1.0418e-03, 1.9556e-09, 5.3446e-03, 8.0890e-02, 2.2538e-02],
        [3.3657e-01, 3.3519e+00, 2.2844e+01, 8.8009e+00, 1.0085e+00, 3.8730e-01,
         1.5391e-01, 1.8986e-02, 2.3765e-11, 2.1654e-02, 2.7446e-01, 7.8356e-02],
        [1.4607e-01, 1.8588e+00, 1.3167e+01, 4.9903e+00, 5.8450e-01, 2.2975e-01,
         1.2475e-01, 1.4326e-02, 1.7124e-09, 1.4567e-02, 1.3765e-01, 3.6143e-02]])}, 139823188666480: {'step': 10000, 'exp_avg': tensor([[-0.3707,  0.0972, -0.3545, -0.3457]]), 'exp_avg_sq': tensor([[92.5623,  2.0694, 93.7893, 54.9836]])}}param_groups	[{'lr': 0.001, 'betas': (0.9, 0.999), 'eps': 1e-08, 'weight_decay': 0, 'amsgrad': False, 'params': [139823188666560, 139823188667120, 139823188666640, 139823188666480]}]

Average Error Test Dataset= 4.956770445171156
RMSE Train Dataset = [27.721596968366786, 21.925083569983975, 13.280795603440012, 9.751706487530544, 7.5880939785331325, 6.573034931293749, 6.114883476139003, 5.942278735864469, 5.850548038732408, 5.786761651614628]
RMSE Test Dataset = [33.24925472026591, 26.58602818269871, 17.048955998382002, 12.822800380366473, 8.872569006433581, 7.341918197404737, 6.77472960435752, 6.621275232579175, 6.557546435419695, 6.54992779408033]
Number of epochs 10000

pred =-4.091254234313965
true = tensor([-23.7000])
difference = tensor([19.6087])


pred =43.43614959716797
true = tensor([40.])
difference = tensor([3.4361])


pred =156.0250244140625
true = tensor([154.])
difference = tensor([2.0250])


pred =87.51875305175781
true = tensor([88.])
difference = tensor([0.4812])


pred =177.54208374023438
true = tensor([173.7000])
difference = tensor([3.8421])


pred =78.23936462402344
true = tensor([81.2000])
difference = tensor([2.9606])


pred =129.73480224609375
true = tensor([132.5000])
difference = tensor([2.7652])


pred =125.43727111816406
true = tensor([133.6000])
difference = tensor([8.1627])


pred =202.66012573242188
true = tensor([211.])
difference = tensor([8.3399])


pred =104.16361999511719
true = tensor([106.5000])
difference = tensor([2.3364])


pred =147.33303833007812
true = tensor([146.])
difference = tensor([1.3330])


pred =155.45713806152344
true = tensor([159.])
difference = tensor([3.5429])


pred =124.97671508789062
true = tensor([122.2000])
difference = tensor([2.7767])


pred =150.080810546875
true = tensor([147.])
difference = tensor([3.0808])


pred =234.37246704101562
true = tensor([226.])
difference = tensor([8.3725])


pred =147.47654724121094
true = tensor([139.])
difference = tensor([8.4765])


pred =167.56082153320312
true = tensor([166.5000])
difference = tensor([1.0608])


pred =156.05540466308594
true = tensor([162.])
difference = tensor([5.9446])


pred =209.36729431152344
true = tensor([215.])
difference = tensor([5.6327])


