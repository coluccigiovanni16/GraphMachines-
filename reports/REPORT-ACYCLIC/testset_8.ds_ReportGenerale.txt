
+++++++++++++++++++++++++++++++++++REPORT+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

LISTA TEST FILE  
dict_keys(['dimethyl_ether.ct', 'dimethyl_peroxide.ct', 'dimethyl_sulfide.ct', 'dimethyl_disulfide.ct', 'ethyl_methyl_ether.ct', 'ethyl_methyl_peroxide.ct', 'dimethoxymethane.ct', 'ethyl_methyl_sulfide.ct', 'bis(methylthio)methane.ct', 'methyl_propyl_ether.ct', 'diethyl_ether.ct', 'isopropyl_methyl_ether.ct', 'diethyl_peroxide.ct', 'isopropyl_methyl_peroxide.ct', '1,1-dimethoxyethane.ct', '1,2-dimethoxyethane.ct', 'methyl_propyl_sulfide.ct', 'isopropyl_methyl_sulfide.ct', 'diethyl_disulfide.ct', '1,1-bis(methylthio)ethane.ct', 'ethylthiomethylthiomethane.ct', '1,2-bis(methylthio)ethane.ct', 'butyl_methyl_ether.ct', 'ethyl_propyl_ether.ct', 'ethyl_isopropyl_ether.ct', 'isobutyl_methyl_ether.ct', 'tert-butyl_methyl_ether.ct', 'diethoxymethane.ct', '2,2-dimethoxypropane.ct', '1,3-dimethoxypropane.ct', '1-ethoxy-2-methoxyethane.ct', '1,2-dimethoxypropane.ct', 'ethyl_isopropyl_sulfide.ct', 'butyl_methyl_sulfide.ct', 'isobutyl_methyl_sulfide.ct', 'tert-butyl_methyl_sulfide.ct', 'ethyl_propyl_disulfide.ct', 'ethyl_isopropyl_disulfide.ct', 'bis(ethylthio)methane.ct', 'methyl_pentyl_ether.ct', 'ethyl_butyl_ether.ct', 'dipropyl_ether.ct', 'isopropyl_propyl_ether.ct', 'ethyl_isobutyl_ether.ct', 'methyl_2-methylbutyl_ether.ct', 'ethyl_sec-butyl_ether.ct', 'methyl_1-methylbutyl_ether.ct', 'diisopropyl_ether.ct', 'methyl_tert-pentyl_ether.ct', '1,2-dimethylpropyl_methyl_ether.ct', '1,1-diethoxyethane.ct', '1,1-dimethoxy-2-methylpropane.ct', '2-ethoxy-2-methoxypropane.ct', '1-methoxy-1-propoxyethane.ct', '1,4-dimethoxybutane.ct', '1,2-diethoxyethane.ct', '1,3-dimethoxybutane.ct', 'methyl_pentyl_sulfide.ct', 'butyl_ethyl_sulfide.ct', 'dipropyl_sulfide.ct', 'isopropyl_propyl_sulfide.ct', 'ethyl_isobutyl_sulfide.ct', 'methyl_2-methylbutyl_sulfide.ct', 'sec-butyl_ethyl_sulfide.ct', 'tert-butyl_ethyl_sulfide.ct', 'diisopropyl_sulfide.ct', '1-ethylpropyl_methyl_sulfide.ct', 'dipropyl_disulfide.ct', 'diisopropyl_disulfide.ct', 'sec-butyl_ethyl_disulfide.ct', 'isopropyl_propyl_disulfide.ct', '1,1-bis(ethylthio)ethane.ct', '1,2-bis(ethylthio)ethane.ct', 'hexyl_methyl_ether.ct', 'ethyl_pentyl_ether.ct', 'butyl_propyl_ether.ct', 'butyl_isopropyl_ether.ct', 'isobutyl_propyl_ether.ct', 'ethyl_isopentyl_ether.ct', 'tert-butyl_propyl_ether.ct', 'tert-butyl_isopropyl_ether.ct', 'ethyl_1-methylbutyl_ether.ct', 'ethyl_tert-pentyl_ether.ct', '1,2-dimethylpropyl_ethyl_ether.ct', 'ethyl_1-ethylpropyl_ether.ct', 'dipropoxymethane.ct', '2,2-diethoxypropane.ct', '1-ethoxy-1-propoxyethane.ct', '1,1-diethoxypropane.ct', '1,5-dimethoxypentane.ct', '1-ethoxy-4-methoxybutane.ct', '1,4-dimethoxypentane.ct', '1,3-dimethoxypentane.ct', 'hexyl_methyl_sulfide.ct', 'butyl_propyl_sulfide.ct', 'isobutyl_propyl_sulfide.ct', 'isobutyl_isopropyl_sulfide.ct', 'ethyl_2-methylbutyl_sulfide.ct', 'sec-butyl_isopropyl_sulfide.ct', 'ethyl_isopentyl_sulfide.ct', 'butyl_isopropyl_sulfide.ct', '1,3-bis(ethylthio)propane.ct', 'dibutyl_ether.ct', 'isopentyl_propyl_ether.ct', 'butyl_isobutyl_ether.ct', 'butyl_sec-butyl_ether.ct', 'butyl_tert-butyl_ether.ct', '1,3-dimethylpentyl_methyl_ether.ct', 'diisobutyl_ether.ct', 'isobutyl_tert-butyl_ether.ct', 'di-tert-butyl_ether.ct', 'isopropyl_tert-pentyl_ether.ct', 'heptyl_methyl_ether.ct', '1-ethylpropyl_propyl_ether.ct', 'di-tert-butyl_peroxide.ct', '1,1-diisopropoxyethane.ct', '1,1-dimethoxyhexane.ct', '2,4-dimethoxy-2-methylpentane.ct', '1,4-diethoxybutane.ct', 'dibutylsulfide.ct', 'diisobutyl_sulfide.ct', 'butyl_isobutyl_sulfide.ct', 'di-tert-butyl_sulfide.ct', 'di-sec-butyl_sulfide.ct', 'butyl_sec-butyl_sulfide.ct', 'heptyl_methyl_sulfide.ct', 'dibutyl_disulfide.ct', 'diisobutyl_disulfide.ct', 'di-tert-butyl_disulfide.ct', '1,1-bis(isopropylthio)ethane.ct', '1-ethyl-1,3-dimethylbutyl_methyl_ether.ct', 'ethyl_heptyl_ether.ct', 'butyl_isopentyl_ether.ct', 'tert-butyl_isopentyl_ether.ct', '1,5-dimethylhexyl_methyl_ether.ct', 'isobutyl_isopentyl_ether.ct', 'methyl_1-methylheptyl_ether.ct', 'methyl_octyl_ether.ct', '2-ethylhexyl_methyl_ether.ct', 'methyl_1,1,4-trimethylpentyl_ether.ct', '3,5-dimethylhexyl_methyl_ether.ct', 'ethyl_1,1,3-trimethylbutyl_ether.ct', 'tert-butyl_tert-pentyl_peroxide.ct', '1,1-diethoxypentane.ct', '1,1-dipropoxypropane.ct', '1,1-diisopropoxypropane.ct', '1,3-dipropoxypropane.ct', '1,3-diisopropoxypropane.ct', 'ethyl_heptyl_sulfide.ct', 'methyl_octyl_sulfide.ct', 'bis(butylthio)methane.ct', '2,2-bis(propylthio)propane.ct', 'ethyl_1,1,3,3-tetramethylbutyl_ether.ct', 'bis(1-ethylpropyl)_ether.ct', 'bis(1-methylbutyl)_ether.ct', 'diisopentyl_ether.ct', 'dipentyl_ether.ct', 'isopropyl_heptyl_ether.ct', 'heptyl_propyl_ether.ct', 'isopentyl_pentyl_ether.ct', 'methyl_1-methyloctyl_ether.ct', 'dipentyl_sulfide.ct', 'diisopentyl_sulfide.ct', 'isobutyl_4-methylpentyl_sulfide.ct', 'methyl_nonyl_sulfide.ct'])


LISTA VALIDATION FILE  
dict_keys(['ethyl_methyl_disulfide.ct', 'diethyl_sulfide.ct', 'sec-butyl_methyl_ether.ct', 'ethyl_propyl_sulfide.ct', 'isopentyl_methyl_ether.ct', '1,1-dimethoxybutane.ct', 'isopentyl_methyl_sulfide.ct', 'tert-butyl_ethyl_disulfide.ct', '2,2-dimethylpropyl_ethyl_ether.ct', '1,3-diethoxypropane.ct', 'tert-butyl_propyl_sulfide.ct', 'sec-butyl_isobutyl_ether.ct', '1,1-dipropoxyethane.ct', 'sec-butyl_isobutyl_sulfide.ct', 'butyl_pentyl_ether.ct', '1,1-dimethoxy-2,2-dimethylpentane.ct', 'ethyl_octyl_ether.ct', 'di-tert-pentyl_sulfide.ct'])


Our model: 

RegressionGm(
  (fc1): Linear(in_features=12, out_features=4, bias=False)
  (fc2): Linear(in_features=4, out_features=1, bias=False)
  (LRelu): SELU()
  (fc1Root): Linear(in_features=12, out_features=4, bias=False)
  (fc2Root): Linear(in_features=4, out_features=1, bias=False)
  (LReluRoot): SELU()
)
Printing children
------------------------------[Linear(in_features=12, out_features=4, bias=False), Linear(in_features=4, out_features=1, bias=False), SELU(), Linear(in_features=12, out_features=4, bias=False), Linear(in_features=4, out_features=1, bias=False), SELU()]

Printing Modules
------------------------------[RegressionGm(
  (fc1): Linear(in_features=12, out_features=4, bias=False)
  (fc2): Linear(in_features=4, out_features=1, bias=False)
  (LRelu): SELU()
  (fc1Root): Linear(in_features=12, out_features=4, bias=False)
  (fc2Root): Linear(in_features=4, out_features=1, bias=False)
  (LReluRoot): SELU()
), Linear(in_features=12, out_features=4, bias=False), Linear(in_features=4, out_features=1, bias=False), SELU(), Linear(in_features=12, out_features=4, bias=False), Linear(in_features=4, out_features=1, bias=False), SELU()]
The state dict keys: 

odict_keys(['fc1.weight', 'fc2.weight', 'fc1Root.weight', 'fc2Root.weight'])Models state_dict:fc1.weight	torch.Size([4, 12])fc2.weight	torch.Size([1, 4])fc1Root.weight	torch.Size([4, 12])fc2Root.weight	torch.Size([1, 4])OrderedDict([('fc1.weight', tensor([[ 5.8298e-01, -4.8755e-01, -2.3343e-01, -5.0328e-01,  1.3691e-42,
          4.2617e-01,  2.3029e+00, -1.0860e+00, -9.3326e-43,  3.2823e-01,
          1.0529e+00,  1.5770e-02],
        [-1.6864e-01,  2.5366e-01,  1.0182e-01,  4.9909e-01,  2.8741e-42,
          1.2471e+00, -1.1090e+00, -1.8958e+00,  1.7881e-42, -3.3094e-01,
         -5.3717e-02,  2.3487e-03],
        [ 6.1751e-01, -2.8865e-01, -4.0541e-01, -6.7362e-01,  4.2039e-44,
          5.0744e-01,  2.3498e+00, -8.2660e-01, -1.6619e-42,  4.3521e-01,
          6.7033e-01,  2.8008e-01],
        [-1.8283e-01,  2.8140e-02,  3.5631e-01,  3.4191e-01,  2.5364e-43,
          6.9563e-01, -6.1390e-01, -8.1960e-01, -9.3467e-43, -2.2746e-01,
         -1.8733e-01, -2.5553e-01]])), ('fc2.weight', tensor([[-0.9494,  0.9869, -1.2538,  0.8970]])), ('fc1Root.weight', tensor([[ 1.0241e+00,  1.7153e-02, -2.6723e-02,  2.3545e-01,  2.4984e-01,
          1.5037e+00, -2.9878e+00,  4.6765e-01,  9.5723e-42, -6.2830e-01,
          1.2294e+00, -3.3206e-01],
        [-3.7497e-01, -7.4838e-01, -1.2969e+00, -8.4717e-01, -1.0233e+00,
         -1.1514e+00,  4.6005e+00, -2.5617e+00,  5.5211e-43,  1.8600e+00,
         -5.7847e-01,  6.6543e-01],
        [-4.1467e-01, -1.1752e+00, -1.1527e+00, -1.2172e+00, -7.0707e-01,
         -1.0638e+00,  4.5201e+00, -2.7629e+00,  1.1136e-41,  1.6462e+00,
         -7.4823e-01,  3.2536e-01],
        [-1.1685e-01, -1.2417e+00, -1.0123e+00, -1.1279e+00, -1.1532e+00,
         -1.2927e+00,  4.8520e+00, -2.0180e+00, -2.6344e-43,  1.7764e+00,
         -6.7273e-01,  4.3426e-01]])), ('fc2Root.weight', tensor([[-2.1116,  1.9758,  1.8297,  1.7133]]))])
---------------plt.close(fig)    # close the figure window-------------------------------------------------------------------------------------------

 Optimizer's state_dict:
CRITERION = MSELoss()
OPTIMIZER = Adam (
Parameter Group 0
    amsgrad: False
    betas: (0.9, 0.999)
    eps: 1e-08
    lr: 0.001
    weight_decay: 0
)
Tempo di training 27.78079390525818


state	{140008300845568: {'step': 10000, 'exp_avg': tensor([[-9.0514e-02,  1.0411e+00,  2.5179e-02, -1.4171e-03,  2.5924e-43,
         -1.3705e-02,  2.8179e-01, -1.5001e-01, -1.7516e-43, -6.6537e-05,
          1.5140e-01, -1.5871e-01],
        [ 2.4180e-01, -2.7403e-01, -1.8867e-02, -4.6641e-04,  5.5351e-43,
         -5.5359e-02, -4.3370e-03, -1.1717e-02,  3.4332e-43,  2.2665e-04,
          1.1099e-01,  1.3017e-01],
        [-1.4953e-01,  1.4449e+00,  1.4111e-02, -3.6415e-03,  7.0065e-45,
         -2.9020e-02,  2.3593e-01, -7.8409e-02, -3.1529e-43,  2.5235e-04,
          5.8215e-02, -1.5857e-01],
        [ 3.2144e-01, -1.8340e+00,  2.4672e-02, -1.2834e-03,  4.9045e-44,
          2.5158e-01, -1.1445e-03, -3.8799e-02, -1.7516e-43,  6.4753e-04,
          1.9518e-01,  2.0125e-01]]), 'exp_avg_sq': tensor([[1.7342e+01, 7.9045e+02, 3.8141e-01, 3.4076e-03, 3.0927e-07, 1.2840e+01,
         2.0048e+00, 1.0725e+00, 2.9373e-07, 2.3664e-04, 6.1336e+00, 3.4728e+00],
        [6.7523e+00, 1.8352e+01, 9.0681e-02, 2.9905e-04, 2.3955e-09, 6.6554e+00,
         1.3085e-03, 6.0349e-03, 1.8947e-09, 1.4023e-04, 1.1370e+00, 2.6882e+00],
        [3.2296e+01, 1.4733e+03, 7.3050e-01, 6.5927e-03, 1.1159e-08, 2.3785e+01,
         3.5957e+00, 1.9362e+00, 1.1680e-07, 4.4113e-04, 1.1316e+01, 6.4673e+00],
        [1.1786e+01, 5.1013e+02, 1.2266e-02, 1.1608e-04, 2.3459e-09, 1.0654e+01,
         7.9582e-03, 2.7941e-02, 1.9176e-07, 5.3724e-05, 4.4908e+00, 2.0556e+00]])}, 140008300845808: {'step': 10000, 'exp_avg': tensor([[0.9382, 0.1773, 0.6193, 0.0835]]), 'exp_avg_sq': tensor([[700.3197,  26.6080, 385.1728,  26.2197]])}, 140008300844208: {'step': 10000, 'exp_avg': tensor([[-3.0081e-02, -5.9899e-02,  2.8283e-02, -4.1140e-02,  7.4676e-03,
         -3.0569e-02, -3.4018e-02, -1.6282e-03,  1.7376e-43,  2.1336e-02,
         -5.8840e-02, -3.0544e-02],
        [ 6.5333e-02,  6.5554e-03,  3.2910e-01,  1.9969e-01,  3.5166e-02,
          1.6369e-02,  6.9340e-02,  1.9784e-03,  7.0065e-45,  2.8119e-02,
          6.6562e-02, -7.4125e-03],
        [ 6.6065e-02, -1.2657e-02,  2.9542e-01,  1.7726e-01,  3.6821e-02,
          1.5203e-02,  6.8812e-02,  1.6742e-03,  2.0179e-43,  2.4690e-02,
          6.4636e-02, -1.2012e-02],
        [ 2.7355e-02,  4.4973e-02,  3.3714e-01,  1.6620e-01,  2.5789e-02,
          8.9883e-03,  7.5402e-02, -2.7701e-02, -5.6052e-45,  2.7292e-02,
          2.1705e-02, -8.9554e-03]]), 'exp_avg_sq': tensor([[2.2628e-01, 2.5964e-01, 5.8261e+00, 5.6707e-01, 5.1051e-03, 2.6553e-01,
         4.0315e-02, 5.5251e-03, 9.9665e-09, 2.5389e-03, 1.9158e-01, 4.8213e-02],
        [5.4820e-01, 6.0372e+00, 2.9191e+01, 1.4754e+01, 7.4057e-01, 5.4747e-01,
         1.6683e-01, 3.3034e-02, 1.2675e-09, 1.6668e-02, 4.4478e-01, 1.3720e-01],
        [4.9161e-01, 5.4549e+00, 2.6343e+01, 1.3340e+01, 6.7154e-01, 4.8676e-01,
         1.4864e-01, 2.9252e-02, 3.3295e-09, 1.4697e-02, 3.9992e-01, 1.2522e-01],
        [2.5902e-01, 3.2749e+00, 1.7051e+01, 8.5422e+00, 4.2554e-01, 3.0356e-01,
         1.1679e-01, 2.3454e-02, 1.2359e-10, 9.5234e-03, 2.1488e-01, 6.8870e-02]])}, 140008300844688: {'step': 10000, 'exp_avg': tensor([[ 0.1678, -0.4369, -0.4617, -0.4092]]), 'exp_avg_sq': tensor([[ 1.7403, 47.2003, 67.0415, 51.2746]])}}param_groups	[{'lr': 0.001, 'betas': (0.9, 0.999), 'eps': 1e-08, 'weight_decay': 0, 'amsgrad': False, 'params': [140008300845568, 140008300845808, 140008300844208, 140008300844688]}]

Average Error Test Dataset= 3.0487884945339627
RMSE Train Dataset = [27.68221768177633, 20.153050557604022, 13.127577174433336, 9.360169747924497, 7.591696379094301, 6.647009511285149, 6.227696103775965, 6.063547260242742, 5.997368553409878, 5.954945203399296]
RMSE Test Dataset = [27.45716212490149, 19.722214867436765, 12.067574021875213, 7.956588021145271, 5.795215132556961, 4.729530802192404, 4.058363466457743, 3.906577012679214, 4.015940612976991, 4.133540934814852]
Number of epochs 10000

pred =136.15737915039062
true = tensor([135.])
difference = tensor([1.1574])


pred =92.1373062133789
true = tensor([92.])
difference = tensor([0.1373])


pred =58.4150276184082
true = tensor([59.5000])
difference = tensor([1.0850])


pred =115.64654541015625
true = tensor([118.5000])
difference = tensor([2.8535])


pred =92.3075942993164
true = tensor([91.2000])
difference = tensor([1.1076])


pred =104.71141052246094
true = tensor([112.])
difference = tensor([7.2886])


pred =140.3826141357422
true = tensor([137.])
difference = tensor([3.3826])


pred =173.51283264160156
true = tensor([175.7000])
difference = tensor([2.1872])


pred =102.73190307617188
true = tensor([91.5000])
difference = tensor([11.2319])


pred =137.312255859375
true = tensor([140.5000])
difference = tensor([3.1877])


pred =139.78082275390625
true = tensor([138.])
difference = tensor([1.7808])


pred =118.87377166748047
true = tensor([122.])
difference = tensor([3.1262])


pred =146.7005615234375
true = tensor([147.])
difference = tensor([0.2994])


pred =168.0092010498047
true = tensor([167.])
difference = tensor([1.0092])


pred =165.93780517578125
true = tensor([163.])
difference = tensor([2.9378])


pred =164.53326416015625
true = tensor([164.])
difference = tensor([0.5333])


pred =180.8687286376953
true = tensor([186.5000])
difference = tensor([5.6313])


pred =193.05856323242188
true = tensor([199.])
difference = tensor([5.9414])


