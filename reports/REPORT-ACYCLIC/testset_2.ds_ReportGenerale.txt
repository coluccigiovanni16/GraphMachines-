
+++++++++++++++++++++++++++++++++++REPORT+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

LISTA TEST FILE  
dict_keys(['dimethyl_ether.ct', 'dimethyl_peroxide.ct', 'dimethyl_disulfide.ct', 'ethyl_methyl_ether.ct', 'ethyl_methyl_peroxide.ct', 'dimethoxymethane.ct', 'ethyl_methyl_sulfide.ct', 'ethyl_methyl_disulfide.ct', 'bis(methylthio)methane.ct', 'methyl_propyl_ether.ct', 'diethyl_ether.ct', 'diethyl_peroxide.ct', 'isopropyl_methyl_peroxide.ct', '1,1-dimethoxyethane.ct', '1,2-dimethoxyethane.ct', 'methyl_propyl_sulfide.ct', 'diethyl_sulfide.ct', 'isopropyl_methyl_sulfide.ct', 'diethyl_disulfide.ct', '1,1-bis(methylthio)ethane.ct', '1,2-bis(methylthio)ethane.ct', 'butyl_methyl_ether.ct', 'ethyl_propyl_ether.ct', 'ethyl_isopropyl_ether.ct', 'isobutyl_methyl_ether.ct', 'sec-butyl_methyl_ether.ct', 'tert-butyl_methyl_ether.ct', 'diethoxymethane.ct', '2,2-dimethoxypropane.ct', '1-ethoxy-2-methoxyethane.ct', '1,2-dimethoxypropane.ct', 'ethyl_isopropyl_sulfide.ct', 'butyl_methyl_sulfide.ct', 'isobutyl_methyl_sulfide.ct', 'ethyl_propyl_sulfide.ct', 'tert-butyl_methyl_sulfide.ct', 'ethyl_propyl_disulfide.ct', 'ethyl_isopropyl_disulfide.ct', 'methyl_pentyl_ether.ct', 'ethyl_butyl_ether.ct', 'dipropyl_ether.ct', 'isopropyl_propyl_ether.ct', 'ethyl_isobutyl_ether.ct', 'isopentyl_methyl_ether.ct', 'methyl_2-methylbutyl_ether.ct', 'ethyl_sec-butyl_ether.ct', 'methyl_1-methylbutyl_ether.ct', 'methyl_tert-pentyl_ether.ct', '1,2-dimethylpropyl_methyl_ether.ct', '1,1-diethoxyethane.ct', '1,1-dimethoxy-2-methylpropane.ct', '2-ethoxy-2-methoxypropane.ct', '1,1-dimethoxybutane.ct', '1-methoxy-1-propoxyethane.ct', '1,4-dimethoxybutane.ct', '1,2-diethoxyethane.ct', 'methyl_pentyl_sulfide.ct', 'butyl_ethyl_sulfide.ct', 'dipropyl_sulfide.ct', 'isopropyl_propyl_sulfide.ct', 'ethyl_isobutyl_sulfide.ct', 'isopentyl_methyl_sulfide.ct', 'methyl_2-methylbutyl_sulfide.ct', 'sec-butyl_ethyl_sulfide.ct', 'tert-butyl_ethyl_sulfide.ct', '1-ethylpropyl_methyl_sulfide.ct', 'dipropyl_disulfide.ct', 'diisopropyl_disulfide.ct', 'sec-butyl_ethyl_disulfide.ct', 'isopropyl_propyl_disulfide.ct', 'tert-butyl_ethyl_disulfide.ct', '1,1-bis(ethylthio)ethane.ct', '1,2-bis(ethylthio)ethane.ct', 'hexyl_methyl_ether.ct', 'butyl_propyl_ether.ct', 'butyl_isopropyl_ether.ct', 'isobutyl_propyl_ether.ct', 'ethyl_isopentyl_ether.ct', 'tert-butyl_propyl_ether.ct', '2,2-dimethylpropyl_ethyl_ether.ct', 'tert-butyl_isopropyl_ether.ct', 'ethyl_1-methylbutyl_ether.ct', 'ethyl_tert-pentyl_ether.ct', 'ethyl_1-ethylpropyl_ether.ct', 'dipropoxymethane.ct', '2,2-diethoxypropane.ct', '1-ethoxy-1-propoxyethane.ct', '1,1-diethoxypropane.ct', '1,3-diethoxypropane.ct', '1,5-dimethoxypentane.ct', '1-ethoxy-4-methoxybutane.ct', '1,4-dimethoxypentane.ct', 'hexyl_methyl_sulfide.ct', 'butyl_propyl_sulfide.ct', 'isobutyl_propyl_sulfide.ct', 'isobutyl_isopropyl_sulfide.ct', 'ethyl_2-methylbutyl_sulfide.ct', 'tert-butyl_propyl_sulfide.ct', 'sec-butyl_isopropyl_sulfide.ct', 'ethyl_isopentyl_sulfide.ct', 'butyl_isopropyl_sulfide.ct', 'dibutyl_ether.ct', 'isopentyl_propyl_ether.ct', 'butyl_isobutyl_ether.ct', 'butyl_sec-butyl_ether.ct', 'butyl_tert-butyl_ether.ct', 'sec-butyl_isobutyl_ether.ct', '1,3-dimethylpentyl_methyl_ether.ct', 'diisobutyl_ether.ct', 'isobutyl_tert-butyl_ether.ct', 'isopropyl_tert-pentyl_ether.ct', 'heptyl_methyl_ether.ct', '1-ethylpropyl_propyl_ether.ct', 'di-tert-butyl_peroxide.ct', '1,1-diisopropoxyethane.ct', '1,1-dipropoxyethane.ct', '1,1-dimethoxyhexane.ct', '2,4-dimethoxy-2-methylpentane.ct', '1,4-diethoxybutane.ct', 'diisobutyl_sulfide.ct', 'butyl_isobutyl_sulfide.ct', 'di-tert-butyl_sulfide.ct', 'di-sec-butyl_sulfide.ct', 'butyl_sec-butyl_sulfide.ct', 'sec-butyl_isobutyl_sulfide.ct', 'heptyl_methyl_sulfide.ct', 'dibutyl_disulfide.ct', 'diisobutyl_disulfide.ct', '1,1-bis(isopropylthio)ethane.ct', '1-ethyl-1,3-dimethylbutyl_methyl_ether.ct', 'ethyl_heptyl_ether.ct', 'butyl_isopentyl_ether.ct', 'tert-butyl_isopentyl_ether.ct', 'butyl_pentyl_ether.ct', '1,5-dimethylhexyl_methyl_ether.ct', 'isobutyl_isopentyl_ether.ct', 'methyl_1-methylheptyl_ether.ct', '2-ethylhexyl_methyl_ether.ct', 'methyl_1,1,4-trimethylpentyl_ether.ct', '3,5-dimethylhexyl_methyl_ether.ct', 'ethyl_1,1,3-trimethylbutyl_ether.ct', 'tert-butyl_tert-pentyl_peroxide.ct', '1,1-dimethoxy-2,2-dimethylpentane.ct', '1,1-diethoxypentane.ct', '1,1-dipropoxypropane.ct', '1,1-diisopropoxypropane.ct', '1,3-diisopropoxypropane.ct', 'ethyl_heptyl_sulfide.ct', 'methyl_octyl_sulfide.ct', 'bis(butylthio)methane.ct', '2,2-bis(propylthio)propane.ct', 'ethyl_octyl_ether.ct', 'ethyl_1,1,3,3-tetramethylbutyl_ether.ct', 'bis(1-ethylpropyl)_ether.ct', 'bis(1-methylbutyl)_ether.ct', 'dipentyl_ether.ct', 'isopropyl_heptyl_ether.ct', 'heptyl_propyl_ether.ct', 'isopentyl_pentyl_ether.ct', 'methyl_1-methyloctyl_ether.ct', 'di-tert-pentyl_sulfide.ct', 'dipentyl_sulfide.ct', 'diisopentyl_sulfide.ct', 'isobutyl_4-methylpentyl_sulfide.ct'])


LISTA VALIDATION FILE  
dict_keys(['dimethyl_sulfide.ct', 'isopropyl_methyl_ether.ct', 'ethylthiomethylthiomethane.ct', '1,3-dimethoxypropane.ct', 'bis(ethylthio)methane.ct', 'diisopropyl_ether.ct', '1,3-dimethoxybutane.ct', 'diisopropyl_sulfide.ct', 'ethyl_pentyl_ether.ct', '1,2-dimethylpropyl_ethyl_ether.ct', '1,3-dimethoxypentane.ct', '1,3-bis(ethylthio)propane.ct', 'di-tert-butyl_ether.ct', 'dibutylsulfide.ct', 'di-tert-butyl_disulfide.ct', 'methyl_octyl_ether.ct', '1,3-dipropoxypropane.ct', 'diisopentyl_ether.ct', 'methyl_nonyl_sulfide.ct'])
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Our model: 

RegressionGm(
  (fc1): Linear(in_features=12, out_features=4, bias=False)
  (fc2): Linear(in_features=4, out_features=1, bias=False)
  (LRelu): SELU()
  (fc1Root): Linear(in_features=12, out_features=4, bias=False)
  (fc2Root): Linear(in_features=4, out_features=1, bias=False)
  (LReluRoot): SELU()
)
Printing children
------------------------------[Linear(in_features=12, out_features=4, bias=False), Linear(in_features=4, out_features=1, bias=False), SELU(), Linear(in_features=12, out_features=4, bias=False), Linear(in_features=4, out_features=1, bias=False), SELU()]

Printing Modules
------------------------------[RegressionGm(
  (fc1): Linear(in_features=12, out_features=4, bias=False)
  (fc2): Linear(in_features=4, out_features=1, bias=False)
  (LRelu): SELU()
  (fc1Root): Linear(in_features=12, out_features=4, bias=False)
  (fc2Root): Linear(in_features=4, out_features=1, bias=False)
  (LReluRoot): SELU()
), Linear(in_features=12, out_features=4, bias=False), Linear(in_features=4, out_features=1, bias=False), SELU(), Linear(in_features=12, out_features=4, bias=False), Linear(in_features=4, out_features=1, bias=False), SELU()]
The state dict keys: 

odict_keys(['fc1.weight', 'fc2.weight', 'fc1Root.weight', 'fc2Root.weight'])Models state_dict:fc1.weight	torch.Size([4, 12])fc2.weight	torch.Size([1, 4])fc1Root.weight	torch.Size([4, 12])fc2Root.weight	torch.Size([1, 4])OrderedDict([('fc1.weight', tensor([[-1.3433e-01, -2.0014e-01, -9.4612e-02, -2.8649e-01,  2.1019e-43,
          1.2640e+00, -1.1004e+00, -2.0348e+00,  1.5372e-42,  1.2208e-02,
         -4.8339e-02, -1.5374e-01],
        [ 7.8540e-01,  2.7064e-01,  2.6628e-01,  8.0305e-01,  1.6325e-42,
          1.5341e-01,  2.6449e+00, -6.5022e-01, -2.1019e-44,  1.0132e-01,
          1.0533e+00,  3.4309e-01],
        [ 7.9092e-01,  4.0222e-01,  3.2261e-01,  6.5697e-01,  2.6316e-42,
          1.5985e-01,  2.3019e+00, -8.8499e-01,  1.4447e-42,  7.8150e-02,
          6.8549e-01,  3.8475e-01],
        [ 7.2319e-01,  2.3611e-01,  2.6256e-01,  6.7297e-01, -1.4588e-42,
         -6.9696e-02,  2.2424e+00, -8.4309e-01,  3.0240e-42,  8.0223e-02,
          6.8935e-01,  1.9948e-01]])), ('fc2.weight', tensor([[-1.2948,  1.1155,  0.8751,  0.9011]])), ('fc1Root.weight', tensor([[ 6.7964e-01,  3.5932e-02,  7.9319e-02, -1.4000e-01, -2.9350e-01,
          2.6439e+00, -4.2809e+00,  1.7318e+00, -1.6163e-41, -1.0340e+00,
          9.3195e-01, -8.5195e-01],
        [-2.2448e-01,  1.1014e+00,  1.3659e+00,  1.2517e+00,  1.1950e+00,
         -1.5723e+00,  5.5117e+00, -3.1874e+00, -5.1035e-42,  1.0951e+00,
         -5.7444e-01,  1.9843e-01],
        [-1.8433e-01,  1.4467e+00,  1.3158e+00,  1.2733e+00,  9.8251e-01,
         -1.6862e+00,  5.3063e+00, -2.7606e+00,  4.6579e-42,  1.0933e+00,
         -1.4899e-01,  2.3088e-02],
        [ 1.0550e+00, -2.5306e-01, -5.7719e-01,  6.8982e-02, -7.9179e-01,
         -3.4185e-01, -4.2565e-01,  5.5134e+00, -1.0215e-42, -5.6875e-02,
          1.4845e+00, -2.7752e-01]])), ('fc2Root.weight', tensor([[-2.2959,  1.8200,  1.7633, -2.1945]]))])
---------------plt.close(fig)    # close the figure window-------------------------------------------------------------------------------------------

 Optimizer's state_dict:
CRITERION = MSELoss()
OPTIMIZER = Adam (
Parameter Group 0
    amsgrad: False
    betas: (0.9, 0.999)
    eps: 1e-08
    lr: 0.001
    weight_decay: 0
)
Tempo di training 30.796802520751953


state	{140207462597728: {'step': 10000, 'exp_avg': tensor([[ 1.5817e-02, -5.2561e-01, -2.4805e-02, -7.6180e-03,  3.5032e-44,
         -2.4050e-01, -1.4761e-02, -3.3711e-02,  2.5924e-43, -3.7409e-03,
         -8.2398e-02, -3.1729e-01],
        [ 3.3227e-01,  2.2825e+00,  1.3463e-02,  3.2676e-03,  2.7325e-43,
          2.7780e-01,  2.8019e-01,  1.2971e-02,  5.6052e-45,  3.3364e-03,
          4.9606e-01,  2.7701e-02],
        [ 2.9128e-01,  1.8239e+00,  3.0499e-02,  7.3691e-03,  4.5542e-43,
          2.2486e-01,  2.5966e-01, -5.5557e-02,  2.4523e-43,  2.3916e-03,
          3.6454e-01,  4.1976e-02],
        [ 2.8397e-01,  1.8470e+00,  1.9197e-02,  6.9596e-03, -2.4523e-43,
          1.9054e-01,  2.4497e-01, -4.5254e-02,  5.2549e-43,  2.4199e-03,
          3.7251e-01,  8.7690e-03]]), 'exp_avg_sq': tensor([[4.3039e+00, 1.7834e+01, 8.8984e-02, 8.0181e-04, 3.3828e-09, 4.3770e+00,
         2.8745e-03, 3.1577e-02, 4.1192e-08, 1.2577e-04, 7.5567e-01, 1.7871e+00],
        [1.3515e+01, 7.2821e+02, 1.0016e+00, 1.8075e-02, 1.1939e-07, 9.8950e+00,
         1.5966e+00, 8.6621e-01, 3.0002e-09, 7.3363e-04, 4.2978e+00, 3.4579e+00],
        [8.7943e+00, 4.8185e+02, 6.7124e-01, 1.1996e-02, 7.1237e-08, 6.4210e+00,
         1.0492e+00, 5.6473e-01, 3.8182e-08, 4.7407e-04, 2.7608e+00, 2.2598e+00],
        [7.9906e+00, 4.3000e+02, 5.7302e-01, 1.0137e-02, 5.1572e-08, 5.8877e+00,
         9.5652e-01, 5.2198e-01, 3.2029e-09, 4.3347e-04, 2.5422e+00, 2.0626e+00]])}, 140207462596768: {'step': 10000, 'exp_avg': tensor([[-0.1996,  0.9096,  1.0042,  0.6411]]), 'exp_avg_sq': tensor([[ 23.6502, 284.1866, 388.5463, 205.1012]])}, 140207462581344: {'step': 10000, 'exp_avg': tensor([[ 3.9103e-02,  2.2636e-03, -3.4830e-01, -8.2589e-02, -1.3707e-01,
          2.7128e-02, -1.2536e-02,  1.5373e-02, -2.5784e-43,  8.2397e-02,
         -5.5331e-02, -8.1927e-02],
        [-2.1654e-02,  2.5643e-02, -8.3956e-02, -1.7648e-01, -4.9880e-02,
         -1.5972e-02,  5.0143e-02, -4.0573e-02, -8.9683e-44, -1.5836e-02,
          5.8216e-03,  9.7756e-03],
        [-2.0461e-02,  3.0779e-02, -8.1462e-02, -1.7004e-01, -5.1068e-02,
         -1.8021e-02,  4.8053e-02, -3.4185e-02,  7.5670e-44, -1.4837e-02,
          1.2015e-02,  6.8248e-03],
        [-1.3310e-01,  4.0249e-02,  7.7101e-02,  5.6227e-02,  4.5447e-03,
          2.3894e-02, -9.8407e-03, -8.9495e-02, -1.9618e-44,  1.6727e-03,
         -1.2895e-01,  2.9613e-02]]), 'exp_avg_sq': tensor([[7.7346e-02, 2.0103e-01, 5.6394e+00, 5.2514e+00, 2.8631e-02, 1.8329e-01,
         9.0919e-02, 8.3925e-03, 7.3664e-09, 2.6145e-03, 6.4687e-02, 2.3198e-02],
        [2.5208e-01, 5.4878e+00, 3.3557e+01, 2.6160e+01, 2.6561e+00, 3.7764e-01,
         2.3513e-01, 3.5101e-02, 2.5870e-10, 1.5653e-02, 1.9523e-01, 8.7944e-02],
        [2.4056e-01, 5.2957e+00, 3.2322e+01, 2.5162e+01, 2.5571e+00, 3.5849e-01,
         2.2303e-01, 3.3121e-02, 1.8882e-09, 1.5036e-02, 1.8566e-01, 8.4873e-02],
        [1.5397e-01, 1.5130e-01, 4.5372e-01, 8.3290e+00, 7.7886e-03, 8.3936e-02,
         1.3097e-03, 3.9888e-02, 9.7038e-10, 3.7238e-03, 1.1946e-01, 3.7033e-02]])}, 140207462583424: {'step': 10000, 'exp_avg': tensor([[ 0.0315, -0.3185, -0.3030,  0.5586]]), 'exp_avg_sq': tensor([[  2.6261, 135.7450, 147.5887,   2.2597]])}}param_groups	[{'lr': 0.001, 'betas': (0.9, 0.999), 'eps': 1e-08, 'weight_decay': 0, 'amsgrad': False, 'params': [140207462597728, 140207462596768, 140207462581344, 140207462583424]}]

Average Error Test Dataset= 4.026052173815276
RMSE Train Dataset = [26.783556274676258, 19.51901022731189, 13.870672427422802, 11.587349248109174, 8.38745739353234, 6.9481957268518695, 6.217954345103618, 5.951721506556028, 5.783818514624004, 5.681031289837549]
RMSE Test Dataset = [33.35682989413019, 24.54400668513917, 16.341157142260364, 12.816669362584207, 9.251085784695803, 6.787855455845619, 5.635522113972255, 5.30563898781002, 5.233620113768218, 5.235372237677185]
Number of epochs 10000

pred =43.00047302246094
true = tensor([37.3000])
difference = tensor([5.7005])


pred =37.4423828125
true = tensor([32.])
difference = tensor([5.4424])


pred =162.97540283203125
true = tensor([166.])
difference = tensor([3.0246])


pred =104.23945617675781
true = tensor([104.5000])
difference = tensor([0.2605])


pred =178.59359741210938
true = tensor([181.])
difference = tensor([2.4064])


pred =71.17533874511719
true = tensor([69.])
difference = tensor([2.1753])


pred =115.88174438476562
true = tensor([120.3000])
difference = tensor([4.4183])


pred =118.79867553710938
true = tensor([120.])
difference = tensor([1.2013])


pred =118.24866485595703
true = tensor([118.])
difference = tensor([0.2487])


pred =97.46231079101562
true = tensor([99.3000])
difference = tensor([1.8377])


pred =134.88821411132812
true = tensor([141.])
difference = tensor([6.1118])


pred =221.57601928710938
true = tensor([229.5000])
difference = tensor([7.9240])


pred =100.85255432128906
true = tensor([106.])
difference = tensor([5.1474])


pred =184.09945678710938
true = tensor([188.9000])
difference = tensor([4.8005])


pred =191.08544921875
true = tensor([201.])
difference = tensor([9.9146])


pred =173.16845703125
true = tensor([173.])
difference = tensor([0.1685])


pred =177.7078857421875
true = tensor([165.])
difference = tensor([12.7079])


pred =171.19740295410156
true = tensor([173.2000])
difference = tensor([2.0026])


pred =238.9979248046875
true = tensor([240.])
difference = tensor([1.0021])


