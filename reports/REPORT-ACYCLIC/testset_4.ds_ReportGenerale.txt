
+++++++++++++++++++++++++++++++++++REPORT+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

LISTA TEST FILE  
dict_keys(['dimethyl_ether.ct', 'dimethyl_peroxide.ct', 'dimethyl_sulfide.ct', 'dimethyl_disulfide.ct', 'ethyl_methyl_peroxide.ct', 'dimethoxymethane.ct', 'ethyl_methyl_sulfide.ct', 'ethyl_methyl_disulfide.ct', 'bis(methylthio)methane.ct', 'methyl_propyl_ether.ct', 'diethyl_ether.ct', 'isopropyl_methyl_ether.ct', 'diethyl_peroxide.ct', '1,1-dimethoxyethane.ct', '1,2-dimethoxyethane.ct', 'methyl_propyl_sulfide.ct', 'diethyl_sulfide.ct', 'isopropyl_methyl_sulfide.ct', 'diethyl_disulfide.ct', '1,1-bis(methylthio)ethane.ct', 'ethylthiomethylthiomethane.ct', '1,2-bis(methylthio)ethane.ct', 'ethyl_propyl_ether.ct', 'ethyl_isopropyl_ether.ct', 'isobutyl_methyl_ether.ct', 'sec-butyl_methyl_ether.ct', 'tert-butyl_methyl_ether.ct', 'diethoxymethane.ct', '2,2-dimethoxypropane.ct', '1,3-dimethoxypropane.ct', '1-ethoxy-2-methoxyethane.ct', 'ethyl_isopropyl_sulfide.ct', 'butyl_methyl_sulfide.ct', 'isobutyl_methyl_sulfide.ct', 'ethyl_propyl_sulfide.ct', 'tert-butyl_methyl_sulfide.ct', 'ethyl_propyl_disulfide.ct', 'ethyl_isopropyl_disulfide.ct', 'bis(ethylthio)methane.ct', 'methyl_pentyl_ether.ct', 'dipropyl_ether.ct', 'isopropyl_propyl_ether.ct', 'ethyl_isobutyl_ether.ct', 'isopentyl_methyl_ether.ct', 'methyl_2-methylbutyl_ether.ct', 'ethyl_sec-butyl_ether.ct', 'methyl_1-methylbutyl_ether.ct', 'diisopropyl_ether.ct', 'methyl_tert-pentyl_ether.ct', '1,1-diethoxyethane.ct', '1,1-dimethoxy-2-methylpropane.ct', '2-ethoxy-2-methoxypropane.ct', '1,1-dimethoxybutane.ct', '1-methoxy-1-propoxyethane.ct', '1,4-dimethoxybutane.ct', '1,2-diethoxyethane.ct', '1,3-dimethoxybutane.ct', 'methyl_pentyl_sulfide.ct', 'dipropyl_sulfide.ct', 'isopropyl_propyl_sulfide.ct', 'ethyl_isobutyl_sulfide.ct', 'isopentyl_methyl_sulfide.ct', 'methyl_2-methylbutyl_sulfide.ct', 'sec-butyl_ethyl_sulfide.ct', 'tert-butyl_ethyl_sulfide.ct', 'diisopropyl_sulfide.ct', '1-ethylpropyl_methyl_sulfide.ct', 'diisopropyl_disulfide.ct', 'sec-butyl_ethyl_disulfide.ct', 'isopropyl_propyl_disulfide.ct', 'tert-butyl_ethyl_disulfide.ct', '1,1-bis(ethylthio)ethane.ct', '1,2-bis(ethylthio)ethane.ct', 'hexyl_methyl_ether.ct', 'ethyl_pentyl_ether.ct', 'butyl_propyl_ether.ct', 'isobutyl_propyl_ether.ct', 'ethyl_isopentyl_ether.ct', 'tert-butyl_propyl_ether.ct', '2,2-dimethylpropyl_ethyl_ether.ct', 'tert-butyl_isopropyl_ether.ct', 'ethyl_1-methylbutyl_ether.ct', 'ethyl_tert-pentyl_ether.ct', '1,2-dimethylpropyl_ethyl_ether.ct', 'ethyl_1-ethylpropyl_ether.ct', '2,2-diethoxypropane.ct', '1-ethoxy-1-propoxyethane.ct', '1,1-diethoxypropane.ct', '1,3-diethoxypropane.ct', '1,5-dimethoxypentane.ct', '1-ethoxy-4-methoxybutane.ct', '1,4-dimethoxypentane.ct', '1,3-dimethoxypentane.ct', 'hexyl_methyl_sulfide.ct', 'isobutyl_propyl_sulfide.ct', 'isobutyl_isopropyl_sulfide.ct', 'ethyl_2-methylbutyl_sulfide.ct', 'tert-butyl_propyl_sulfide.ct', 'sec-butyl_isopropyl_sulfide.ct', 'ethyl_isopentyl_sulfide.ct', 'butyl_isopropyl_sulfide.ct', '1,3-bis(ethylthio)propane.ct', 'dibutyl_ether.ct', 'butyl_isobutyl_ether.ct', 'butyl_sec-butyl_ether.ct', 'butyl_tert-butyl_ether.ct', 'sec-butyl_isobutyl_ether.ct', '1,3-dimethylpentyl_methyl_ether.ct', 'diisobutyl_ether.ct', 'isobutyl_tert-butyl_ether.ct', 'di-tert-butyl_ether.ct', 'isopropyl_tert-pentyl_ether.ct', '1-ethylpropyl_propyl_ether.ct', 'di-tert-butyl_peroxide.ct', '1,1-diisopropoxyethane.ct', '1,1-dipropoxyethane.ct', '1,1-dimethoxyhexane.ct', '2,4-dimethoxy-2-methylpentane.ct', '1,4-diethoxybutane.ct', 'dibutylsulfide.ct', 'diisobutyl_sulfide.ct', 'di-tert-butyl_sulfide.ct', 'di-sec-butyl_sulfide.ct', 'butyl_sec-butyl_sulfide.ct', 'sec-butyl_isobutyl_sulfide.ct', 'heptyl_methyl_sulfide.ct', 'dibutyl_disulfide.ct', 'diisobutyl_disulfide.ct', 'di-tert-butyl_disulfide.ct', '1,1-bis(isopropylthio)ethane.ct', 'ethyl_heptyl_ether.ct', 'butyl_isopentyl_ether.ct', 'tert-butyl_isopentyl_ether.ct', 'butyl_pentyl_ether.ct', '1,5-dimethylhexyl_methyl_ether.ct', 'isobutyl_isopentyl_ether.ct', 'methyl_1-methylheptyl_ether.ct', 'methyl_octyl_ether.ct', '2-ethylhexyl_methyl_ether.ct', '3,5-dimethylhexyl_methyl_ether.ct', 'ethyl_1,1,3-trimethylbutyl_ether.ct', 'tert-butyl_tert-pentyl_peroxide.ct', '1,1-dimethoxy-2,2-dimethylpentane.ct', '1,1-diethoxypentane.ct', '1,1-dipropoxypropane.ct', '1,1-diisopropoxypropane.ct', '1,3-dipropoxypropane.ct', '1,3-diisopropoxypropane.ct', 'methyl_octyl_sulfide.ct', 'bis(butylthio)methane.ct', '2,2-bis(propylthio)propane.ct', 'ethyl_octyl_ether.ct', 'ethyl_1,1,3,3-tetramethylbutyl_ether.ct', 'bis(1-ethylpropyl)_ether.ct', 'bis(1-methylbutyl)_ether.ct', 'diisopentyl_ether.ct', 'dipentyl_ether.ct', 'heptyl_propyl_ether.ct', 'isopentyl_pentyl_ether.ct', 'methyl_1-methyloctyl_ether.ct', 'di-tert-pentyl_sulfide.ct', 'dipentyl_sulfide.ct', 'diisopentyl_sulfide.ct', 'isobutyl_4-methylpentyl_sulfide.ct', 'methyl_nonyl_sulfide.ct'])


LISTA VALIDATION FILE  
dict_keys(['ethyl_methyl_ether.ct', 'isopropyl_methyl_peroxide.ct', 'butyl_methyl_ether.ct', '1,2-dimethoxypropane.ct', 'ethyl_butyl_ether.ct', '1,2-dimethylpropyl_methyl_ether.ct', 'butyl_ethyl_sulfide.ct', 'dipropyl_disulfide.ct', 'butyl_isopropyl_ether.ct', 'dipropoxymethane.ct', 'butyl_propyl_sulfide.ct', 'isopentyl_propyl_ether.ct', 'heptyl_methyl_ether.ct', 'butyl_isobutyl_sulfide.ct', '1-ethyl-1,3-dimethylbutyl_methyl_ether.ct', 'methyl_1,1,4-trimethylpentyl_ether.ct', 'ethyl_heptyl_sulfide.ct', 'isopropyl_heptyl_ether.ct'])


Our model: 

RegressionGm(
  (fc1): Linear(in_features=12, out_features=4, bias=False)
  (fc2): Linear(in_features=4, out_features=1, bias=False)
  (LRelu): SELU()
  (fc1Root): Linear(in_features=12, out_features=4, bias=False)
  (fc2Root): Linear(in_features=4, out_features=1, bias=False)
  (LReluRoot): SELU()
)
Printing children
------------------------------[Linear(in_features=12, out_features=4, bias=False), Linear(in_features=4, out_features=1, bias=False), SELU(), Linear(in_features=12, out_features=4, bias=False), Linear(in_features=4, out_features=1, bias=False), SELU()]

Printing Modules
------------------------------[RegressionGm(
  (fc1): Linear(in_features=12, out_features=4, bias=False)
  (fc2): Linear(in_features=4, out_features=1, bias=False)
  (LRelu): SELU()
  (fc1Root): Linear(in_features=12, out_features=4, bias=False)
  (fc2Root): Linear(in_features=4, out_features=1, bias=False)
  (LReluRoot): SELU()
), Linear(in_features=12, out_features=4, bias=False), Linear(in_features=4, out_features=1, bias=False), SELU(), Linear(in_features=12, out_features=4, bias=False), Linear(in_features=4, out_features=1, bias=False), SELU()]
The state dict keys: 

odict_keys(['fc1.weight', 'fc2.weight', 'fc1Root.weight', 'fc2Root.weight'])Models state_dict:fc1.weight	torch.Size([4, 12])fc2.weight	torch.Size([1, 4])fc1Root.weight	torch.Size([4, 12])fc2Root.weight	torch.Size([1, 4])OrderedDict([('fc1.weight', tensor([[ 8.1791e-01, -4.0906e-01, -4.9668e-01, -8.8421e-01,  5.6052e-44,
          3.7630e-01,  2.7943e+00, -1.1061e+00,  2.6358e-42,  3.2422e-01,
          9.6677e-01,  3.1992e-01],
        [-7.1014e-02,  8.4066e-02,  1.7886e-01,  4.2159e-01,  1.4139e-42,
          7.0719e-01, -1.0700e+00, -1.6646e+00,  1.1561e-42, -2.0534e-01,
         -1.7384e-01, -4.0131e-04],
        [-1.7645e-01,  2.5612e-01, -1.6165e-01,  4.0734e-01,  8.0294e-43,
          7.3084e-01, -1.0996e+00, -1.6433e+00,  9.3607e-43, -1.9736e-01,
         -2.6533e-01, -2.6991e-01],
        [ 8.6123e-01, -4.1829e-01, -4.2630e-01, -7.0269e-01,  9.2851e-12,
          2.2251e-02,  2.7862e+00, -1.3351e+00,  7.8893e-43,  2.5855e-01,
          7.8975e-01,  2.9071e-01]])), ('fc2.weight', tensor([[-1.1091,  1.1865,  0.8806, -0.8905]])), ('fc1Root.weight', tensor([[ 2.1756e+00,  8.9134e-03,  5.4941e-03,  2.7545e-01,  8.4070e-01,
          3.3991e+00, -4.2544e+00,  2.2698e+00,  1.5330e-41, -2.0464e-01,
          2.3978e+00, -1.7380e-01],
        [ 2.1077e-01, -1.2325e+00, -1.0642e+00, -9.3091e-01, -9.9016e-01,
         -9.3204e-01,  4.0055e+00, -2.5669e+00,  1.1031e-41,  5.1747e-01,
          6.0085e-02,  7.0882e-01],
        [ 2.5271e-01, -7.4309e-01, -1.4108e+00, -1.2791e+00, -1.0032e+00,
         -8.8846e-01,  4.4367e+00, -2.5615e+00,  5.2745e-42,  5.6569e-01,
          9.8535e-02,  4.9758e-01],
        [-2.9035e-01, -1.3114e+00, -1.1542e+00, -1.0028e+00, -1.0560e+00,
         -1.5082e+00,  4.5115e+00, -2.7074e+00,  1.5266e-41,  4.7339e-01,
         -1.1959e-01,  5.6668e-01]])), ('fc2Root.weight', tensor([[-2.0556,  1.6613,  1.5172,  1.5569]]))])
---------------plt.close(fig)    # close the figure window-------------------------------------------------------------------------------------------

 Optimizer's state_dict:
CRITERION = MSELoss()
OPTIMIZER = Adam (
Parameter Group 0
    amsgrad: False
    betas: (0.9, 0.999)
    eps: 1e-08
    lr: 0.001
    weight_decay: 0
)
Tempo di training 28.272684335708618


state	{140159647960432: {'step': 10000, 'exp_avg': tensor([[-2.6744e-01,  1.8037e+00,  5.1848e-03, -1.2147e-03,  7.0065e-45,
         -2.4788e-01,  2.9897e-01, -1.0379e-01,  4.4141e-43,  5.0749e-04,
          3.0400e-02, -1.7398e-01],
        [ 5.8903e-01, -1.8028e+00, -2.4519e-02, -1.5490e-04,  2.3121e-43,
          2.9899e-01, -6.0502e-03, -4.1267e-02,  1.8918e-43,  1.5927e-04,
          3.0376e-01,  1.6762e-02],
        [ 2.8831e-01, -2.2218e-01, -2.0760e-02, -2.7945e-04,  1.3312e-43,
         -2.2781e-02, -2.4677e-03, -2.9104e-03,  1.6115e-43,  1.9157e-04,
          6.6562e-02,  9.5944e-02],
        [-1.7950e-01,  1.4327e+00, -5.9467e-04,  2.7918e-04, -6.3491e-14,
         -2.4722e-01,  3.3364e-01, -1.6042e-01,  1.3312e-43,  1.0090e-04,
          2.6778e-02, -1.3386e-01]]), 'exp_avg_sq': tensor([[1.6630e+01, 9.1647e+02, 8.2704e-01, 1.6079e-02, 3.9267e-11, 1.2119e+01,
         3.0238e+00, 1.8929e+00, 9.3260e-11, 7.6950e-04, 5.3989e+00, 3.6193e+00],
        [1.1861e+01, 1.6373e+02, 9.7819e-02, 3.0922e-04, 2.0579e-07, 1.1488e+01,
         5.3746e-03, 5.4327e-02, 4.3548e-08, 8.1684e-05, 3.7163e+00, 2.9903e+00],
        [3.5276e+00, 4.0870e+00, 1.0198e-01, 2.8018e-04, 1.8158e-08, 3.4749e+00,
         1.1092e-03, 2.8542e-03, 8.6311e-10, 7.2914e-05, 4.8327e-01, 1.6377e+00],
        [9.4745e+00, 4.9862e+02, 4.2522e-01, 7.8322e-03, 2.2175e-11, 6.9752e+00,
         1.7657e+00, 1.0872e+00, 2.7898e-08, 4.2324e-04, 3.0887e+00, 2.0685e+00]])}, 140159647958032: {'step': 10000, 'exp_avg': tensor([[1.4649, 0.2574, 0.0776, 1.4583]]), 'exp_avg_sq': tensor([[616.8918,  20.8491,  23.4781, 593.1198]])}, 140159647959552: {'step': 10000, 'exp_avg': tensor([[ 9.2370e-05, -4.8000e-02, -2.3659e-01, -2.8900e-01,  2.4258e-04,
          2.1708e-02, -3.2653e-02, -1.6902e-03,  2.5784e-43,  2.8696e-04,
          1.0325e-04, -3.1852e-02],
        [ 1.2586e-03,  7.5318e-02,  3.7871e-01,  2.0669e-01,  4.8717e-02,
         -1.8774e-02,  3.5840e-02, -1.0872e-02,  1.8777e-43,  2.1813e-02,
         -1.4406e-02, -1.2473e-02],
        [ 2.1553e-03,  7.5170e-02,  3.3855e-01,  1.8161e-01,  4.2841e-02,
         -1.7768e-02,  4.5731e-02, -1.3561e-02,  8.9683e-44,  2.1483e-02,
         -1.2428e-02, -1.3892e-02],
        [-6.9636e-03,  6.7972e-02,  3.5227e-01,  1.9151e-01,  4.3516e-02,
         -2.8192e-02,  4.6243e-02, -1.5239e-02,  2.5784e-43,  2.0262e-02,
         -1.6437e-02, -1.3319e-02]]), 'exp_avg_sq': tensor([[3.9988e-02, 1.3642e-01, 5.1694e+00, 8.1642e+00, 2.3347e-04, 7.9138e-02,
         2.7090e-02, 1.9987e-03, 5.9254e-09, 9.4957e-05, 3.8665e-02, 1.5968e-02],
        [3.8214e-01, 6.6764e+00, 4.0939e+01, 1.5256e+01, 9.8486e-01, 3.5442e-01,
         1.1098e-01, 1.5618e-02, 9.2435e-09, 1.2766e-02, 2.8902e-01, 9.6945e-02],
        [2.4372e-01, 4.7764e+00, 3.0503e+01, 1.1231e+01, 7.3204e-01, 2.4358e-01,
         9.3283e-02, 1.3153e-02, 5.9241e-11, 8.9692e-03, 1.8744e-01, 6.3711e-02],
        [1.3583e-01, 2.9299e+00, 2.0368e+01, 7.4592e+00, 4.8664e-01, 1.6112e-01,
         8.0968e-02, 1.0515e-02, 2.7883e-09, 6.1392e-03, 1.0912e-01, 3.7985e-02]])}, 140159647957552: {'step': 10000, 'exp_avg': tensor([[ 0.1402, -0.5209, -0.6359, -0.5722]]), 'exp_avg_sq': tensor([[  3.4096,  72.7646, 117.4349,  63.7666]])}}param_groups	[{'lr': 0.001, 'betas': (0.9, 0.999), 'eps': 1e-08, 'weight_decay': 0, 'amsgrad': False, 'params': [140159647960432, 140159647958032, 140159647959552, 140159647957552]}]

Average Error Test Dataset= 4.434839778476292
RMSE Train Dataset = [29.06393435640532, 22.975776189367494, 13.66155581549205, 9.2989042231317, 7.204072902312687, 6.245450614755324, 5.9674636493242135, 5.9033570647377465, 5.865902613968502, 5.8266985991160904]
RMSE Test Dataset = [25.018957655895658, 20.329647209532745, 13.937755086300776, 11.193587538297946, 8.090309619613512, 6.946888662196979, 6.455441851042227, 6.4090471813449055, 6.492477759380828, 6.585481349583559]
Number of epochs 10000

pred =15.643168449401855
true = tensor([10.8000])
difference = tensor([4.8432])


pred =58.478111267089844
true = tensor([53.5000])
difference = tensor([4.9781])


pred =70.96918487548828
true = tensor([70.3000])
difference = tensor([0.6692])


pred =88.0145034790039
true = tensor([92.])
difference = tensor([3.9855])


pred =92.13340759277344
true = tensor([92.3000])
difference = tensor([0.1666])


pred =75.64210510253906
true = tensor([82.])
difference = tensor([6.3579])


pred =142.140380859375
true = tensor([144.2000])
difference = tensor([2.0596])


pred =197.60324096679688
true = tensor([195.8000])
difference = tensor([1.8032])


pred =104.45752716064453
true = tensor([107.])
difference = tensor([2.5425])


pred =135.93399047851562
true = tensor([137.])
difference = tensor([1.0660])


pred =165.8030548095703
true = tensor([166.])
difference = tensor([0.1969])


pred =135.01498413085938
true = tensor([125.])
difference = tensor([10.0150])


pred =151.24679565429688
true = tensor([151.])
difference = tensor([0.2468])


pred =177.14114379882812
true = tensor([178.])
difference = tensor([0.8589])


pred =142.78961181640625
true = tensor([151.5000])
difference = tensor([8.7104])


pred =146.23634338378906
true = tensor([159.5000])
difference = tensor([13.2637])


pred =212.530029296875
true = tensor([195.])
difference = tensor([17.5300])


pred =173.53367614746094
true = tensor([173.])
difference = tensor([0.5337])


