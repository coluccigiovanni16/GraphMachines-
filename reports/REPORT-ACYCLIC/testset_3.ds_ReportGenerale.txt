
+++++++++++++++++++++++++++++++++++REPORT+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

LISTA TEST FILE  
dict_keys(['dimethyl_ether.ct', 'dimethyl_peroxide.ct', 'dimethyl_sulfide.ct', 'ethyl_methyl_ether.ct', 'ethyl_methyl_peroxide.ct', 'dimethoxymethane.ct', 'ethyl_methyl_sulfide.ct', 'ethyl_methyl_disulfide.ct', 'bis(methylthio)methane.ct', 'methyl_propyl_ether.ct', 'diethyl_ether.ct', 'isopropyl_methyl_ether.ct', 'isopropyl_methyl_peroxide.ct', '1,1-dimethoxyethane.ct', '1,2-dimethoxyethane.ct', 'methyl_propyl_sulfide.ct', 'diethyl_sulfide.ct', 'isopropyl_methyl_sulfide.ct', 'diethyl_disulfide.ct', '1,1-bis(methylthio)ethane.ct', 'ethylthiomethylthiomethane.ct', 'butyl_methyl_ether.ct', 'ethyl_propyl_ether.ct', 'ethyl_isopropyl_ether.ct', 'isobutyl_methyl_ether.ct', 'sec-butyl_methyl_ether.ct', 'tert-butyl_methyl_ether.ct', 'diethoxymethane.ct', '2,2-dimethoxypropane.ct', '1,3-dimethoxypropane.ct', '1,2-dimethoxypropane.ct', 'ethyl_isopropyl_sulfide.ct', 'butyl_methyl_sulfide.ct', 'isobutyl_methyl_sulfide.ct', 'ethyl_propyl_sulfide.ct', 'tert-butyl_methyl_sulfide.ct', 'ethyl_propyl_disulfide.ct', 'ethyl_isopropyl_disulfide.ct', 'bis(ethylthio)methane.ct', 'ethyl_butyl_ether.ct', 'dipropyl_ether.ct', 'isopropyl_propyl_ether.ct', 'ethyl_isobutyl_ether.ct', 'isopentyl_methyl_ether.ct', 'methyl_2-methylbutyl_ether.ct', 'ethyl_sec-butyl_ether.ct', 'methyl_1-methylbutyl_ether.ct', 'diisopropyl_ether.ct', '1,2-dimethylpropyl_methyl_ether.ct', '1,1-diethoxyethane.ct', '1,1-dimethoxy-2-methylpropane.ct', '2-ethoxy-2-methoxypropane.ct', '1,1-dimethoxybutane.ct', '1-methoxy-1-propoxyethane.ct', '1,4-dimethoxybutane.ct', '1,2-diethoxyethane.ct', '1,3-dimethoxybutane.ct', 'butyl_ethyl_sulfide.ct', 'dipropyl_sulfide.ct', 'isopropyl_propyl_sulfide.ct', 'ethyl_isobutyl_sulfide.ct', 'isopentyl_methyl_sulfide.ct', 'methyl_2-methylbutyl_sulfide.ct', 'sec-butyl_ethyl_sulfide.ct', 'tert-butyl_ethyl_sulfide.ct', 'diisopropyl_sulfide.ct', 'dipropyl_disulfide.ct', 'diisopropyl_disulfide.ct', 'sec-butyl_ethyl_disulfide.ct', 'isopropyl_propyl_disulfide.ct', 'tert-butyl_ethyl_disulfide.ct', '1,1-bis(ethylthio)ethane.ct', '1,2-bis(ethylthio)ethane.ct', 'hexyl_methyl_ether.ct', 'ethyl_pentyl_ether.ct', 'butyl_isopropyl_ether.ct', 'isobutyl_propyl_ether.ct', 'ethyl_isopentyl_ether.ct', 'tert-butyl_propyl_ether.ct', '2,2-dimethylpropyl_ethyl_ether.ct', 'tert-butyl_isopropyl_ether.ct', 'ethyl_1-methylbutyl_ether.ct', 'ethyl_tert-pentyl_ether.ct', '1,2-dimethylpropyl_ethyl_ether.ct', 'dipropoxymethane.ct', '2,2-diethoxypropane.ct', '1-ethoxy-1-propoxyethane.ct', '1,1-diethoxypropane.ct', '1,3-diethoxypropane.ct', '1,5-dimethoxypentane.ct', '1-ethoxy-4-methoxybutane.ct', '1,4-dimethoxypentane.ct', '1,3-dimethoxypentane.ct', 'butyl_propyl_sulfide.ct', 'isobutyl_propyl_sulfide.ct', 'isobutyl_isopropyl_sulfide.ct', 'ethyl_2-methylbutyl_sulfide.ct', 'tert-butyl_propyl_sulfide.ct', 'sec-butyl_isopropyl_sulfide.ct', 'ethyl_isopentyl_sulfide.ct', 'butyl_isopropyl_sulfide.ct', '1,3-bis(ethylthio)propane.ct', 'isopentyl_propyl_ether.ct', 'butyl_isobutyl_ether.ct', 'butyl_sec-butyl_ether.ct', 'butyl_tert-butyl_ether.ct', 'sec-butyl_isobutyl_ether.ct', '1,3-dimethylpentyl_methyl_ether.ct', 'diisobutyl_ether.ct', 'isobutyl_tert-butyl_ether.ct', 'di-tert-butyl_ether.ct', 'heptyl_methyl_ether.ct', '1-ethylpropyl_propyl_ether.ct', 'di-tert-butyl_peroxide.ct', '1,1-diisopropoxyethane.ct', '1,1-dipropoxyethane.ct', '1,1-dimethoxyhexane.ct', '2,4-dimethoxy-2-methylpentane.ct', '1,4-diethoxybutane.ct', 'dibutylsulfide.ct', 'butyl_isobutyl_sulfide.ct', 'di-tert-butyl_sulfide.ct', 'di-sec-butyl_sulfide.ct', 'butyl_sec-butyl_sulfide.ct', 'sec-butyl_isobutyl_sulfide.ct', 'heptyl_methyl_sulfide.ct', 'dibutyl_disulfide.ct', 'diisobutyl_disulfide.ct', 'di-tert-butyl_disulfide.ct', '1-ethyl-1,3-dimethylbutyl_methyl_ether.ct', 'ethyl_heptyl_ether.ct', 'butyl_isopentyl_ether.ct', 'tert-butyl_isopentyl_ether.ct', 'butyl_pentyl_ether.ct', '1,5-dimethylhexyl_methyl_ether.ct', 'isobutyl_isopentyl_ether.ct', 'methyl_1-methylheptyl_ether.ct', 'methyl_octyl_ether.ct', 'methyl_1,1,4-trimethylpentyl_ether.ct', '3,5-dimethylhexyl_methyl_ether.ct', 'ethyl_1,1,3-trimethylbutyl_ether.ct', 'tert-butyl_tert-pentyl_peroxide.ct', '1,1-dimethoxy-2,2-dimethylpentane.ct', '1,1-diethoxypentane.ct', '1,1-dipropoxypropane.ct', '1,1-diisopropoxypropane.ct', '1,3-dipropoxypropane.ct', 'ethyl_heptyl_sulfide.ct', 'methyl_octyl_sulfide.ct', 'bis(butylthio)methane.ct', '2,2-bis(propylthio)propane.ct', 'ethyl_octyl_ether.ct', 'ethyl_1,1,3,3-tetramethylbutyl_ether.ct', 'bis(1-ethylpropyl)_ether.ct', 'bis(1-methylbutyl)_ether.ct', 'diisopentyl_ether.ct', 'isopropyl_heptyl_ether.ct', 'heptyl_propyl_ether.ct', 'isopentyl_pentyl_ether.ct', 'methyl_1-methyloctyl_ether.ct', 'di-tert-pentyl_sulfide.ct', 'dipentyl_sulfide.ct', 'diisopentyl_sulfide.ct', 'isobutyl_4-methylpentyl_sulfide.ct', 'methyl_nonyl_sulfide.ct'])


LISTA VALIDATION FILE  
dict_keys(['dimethyl_disulfide.ct', 'diethyl_peroxide.ct', '1,2-bis(methylthio)ethane.ct', '1-ethoxy-2-methoxyethane.ct', 'methyl_pentyl_ether.ct', 'methyl_tert-pentyl_ether.ct', 'methyl_pentyl_sulfide.ct', '1-ethylpropyl_methyl_sulfide.ct', 'butyl_propyl_ether.ct', 'ethyl_1-ethylpropyl_ether.ct', 'hexyl_methyl_sulfide.ct', 'dibutyl_ether.ct', 'isopropyl_tert-pentyl_ether.ct', 'diisobutyl_sulfide.ct', '1,1-bis(isopropylthio)ethane.ct', '2-ethylhexyl_methyl_ether.ct', '1,3-diisopropoxypropane.ct', 'dipentyl_ether.ct'])


Our model: 

RegressionGm(
  (fc1): Linear(in_features=12, out_features=4, bias=False)
  (fc2): Linear(in_features=4, out_features=1, bias=False)
  (LRelu): SELU()
  (fc1Root): Linear(in_features=12, out_features=4, bias=False)
  (fc2Root): Linear(in_features=4, out_features=1, bias=False)
  (LReluRoot): SELU()
)
Printing children
------------------------------[Linear(in_features=12, out_features=4, bias=False), Linear(in_features=4, out_features=1, bias=False), SELU(), Linear(in_features=12, out_features=4, bias=False), Linear(in_features=4, out_features=1, bias=False), SELU()]

Printing Modules
------------------------------[RegressionGm(
  (fc1): Linear(in_features=12, out_features=4, bias=False)
  (fc2): Linear(in_features=4, out_features=1, bias=False)
  (LRelu): SELU()
  (fc1Root): Linear(in_features=12, out_features=4, bias=False)
  (fc2Root): Linear(in_features=4, out_features=1, bias=False)
  (LReluRoot): SELU()
), Linear(in_features=12, out_features=4, bias=False), Linear(in_features=4, out_features=1, bias=False), SELU(), Linear(in_features=12, out_features=4, bias=False), Linear(in_features=4, out_features=1, bias=False), SELU()]
The state dict keys: 

odict_keys(['fc1.weight', 'fc2.weight', 'fc1Root.weight', 'fc2Root.weight'])Models state_dict:fc1.weight	torch.Size([4, 12])fc2.weight	torch.Size([1, 4])fc1Root.weight	torch.Size([4, 12])fc2Root.weight	torch.Size([1, 4])OrderedDict([('fc1.weight', tensor([[-3.5323e-01,  3.5567e-02,  4.9997e-01,  3.5663e-01, -4.8261e-42,
          7.7518e-01, -1.0930e+00, -1.5131e+00,  5.1358e-42, -1.5519e-01,
         -1.3166e-01, -1.0839e-01],
        [-1.8110e-01,  1.7816e-01,  2.0018e-02,  6.0250e-01,  2.5686e-42,
          1.0301e+00, -1.2223e+00, -2.1137e+00, -1.4728e-42, -2.5636e-01,
          1.2111e-01,  1.6045e-01],
        [ 9.4529e-01, -2.7576e-01, -3.3441e-01, -7.9611e-01,  9.1084e-44,
          3.7569e-01,  4.1401e+00, -1.6339e+00, -3.7036e-42,  4.8590e-01,
          1.8586e+00,  4.5785e-01],
        [ 9.2786e-01, -4.7037e-01, -4.4459e-01, -8.3671e-01, -1.5554e-43,
          5.5137e-01,  3.8105e+00, -1.3918e+00,  1.6900e-42,  4.3274e-01,
          1.3278e+00,  2.2686e-01]])), ('fc2.weight', tensor([[ 1.3397,  1.2770, -1.1999, -1.0696]])), ('fc1Root.weight', tensor([[ 6.6007e-01, -4.2728e-01,  3.8424e-01,  1.2462e+00,  1.6664e-01,
         -2.8619e-01, -7.3546e-01,  3.3638e+00,  1.1373e-41, -6.5581e-02,
          7.8690e-01, -3.4545e-01],
        [ 2.9768e-01, -1.7874e+00, -1.8103e+00, -1.5953e+00, -1.4727e+00,
         -2.3232e+00,  7.5605e+00, -4.6848e+00,  1.8609e-42,  1.8039e+00,
         -1.1007e-01, -1.3339e+00],
        [ 1.7415e+00, -7.5027e-02,  1.0608e-01,  1.1568e+00,  1.8179e-01,
          3.2882e+00, -3.5473e+00,  2.4078e+00, -6.5160e-43,  1.6951e+00,
          1.5875e+00, -6.9046e-01],
        [ 6.5270e-02, -1.3670e-01, -9.7289e-02,  1.0054e-01,  6.3220e-01,
          1.7065e+00, -3.8547e+00,  1.7107e+00,  1.0653e-41, -9.6679e-02,
          2.2514e-02,  1.5004e+00]])), ('fc2Root.weight', tensor([[-1.5062,  2.0353, -1.9115, -2.2726]]))])
---------------plt.close(fig)    # close the figure window-------------------------------------------------------------------------------------------

 Optimizer's state_dict:
CRITERION = MSELoss()
OPTIMIZER = Adam (
Parameter Group 0
    amsgrad: False
    betas: (0.9, 0.999)
    eps: 1e-08
    lr: 0.001
    weight_decay: 0
)
Tempo di training 29.485250234603882


state	{139816613057872: {'step': 10000, 'exp_avg': tensor([[ 3.3038e-01, -2.2825e+00, -2.2421e-03,  1.6156e-03, -6.2358e-43,
          2.7039e-01, -1.5574e-02, -1.1840e-01,  6.6562e-43, -6.4014e-04,
          2.6317e-01,  8.4176e-02],
        [ 1.3342e-01, -3.3450e-01, -1.8600e-03,  2.2407e-03,  3.2931e-43,
         -1.4528e-01, -1.1976e-03,  1.9398e-03, -1.8918e-43, -9.3848e-04,
          6.7432e-02,  5.6985e-02],
        [-1.3667e-01,  1.4786e+00, -1.0422e-02, -4.3474e-03,  7.0065e-45,
         -1.5594e-01,  4.3610e-01, -1.6364e-01, -4.8345e-43,  3.1626e-03,
          1.1162e-01,  3.1012e-02],
        [-1.1069e-01,  1.2886e+00, -2.8449e-02, -2.0564e-02, -2.1019e-44,
         -1.1071e-01,  4.0445e-01, -1.3742e-01,  2.1720e-43,  2.7654e-03,
          5.6477e-02,  3.9431e-03]]), 'exp_avg_sq': tensor([[4.9881e+00, 2.4293e+02, 5.7638e-03, 3.1456e-05, 2.4615e-07, 4.9462e+00,
         7.7203e-03, 6.2306e-02, 2.3769e-07, 5.3195e-06, 1.5516e+00, 1.2416e+00],
        [2.0975e+00, 8.4686e+00, 6.1529e-02, 6.8704e-05, 1.5767e-07, 2.1174e+00,
         1.5512e-04, 7.3156e-04, 1.3010e-07, 1.1966e-05, 2.6929e-01, 9.9194e-01],
        [9.5746e+00, 8.0649e+02, 1.5117e+00, 4.8618e-02, 3.6013e-08, 7.5413e+00,
         3.1869e+00, 1.7776e+00, 3.6582e-09, 2.0414e-03, 2.8139e+00, 2.7734e+00],
        [9.5145e+00, 7.9074e+02, 1.6909e+00, 5.5733e-02, 2.2780e-08, 7.3417e+00,
         2.9124e+00, 1.6058e+00, 2.6539e-08, 1.8385e-03, 2.6352e+00, 2.8563e+00]])}, 139816613058432: {'step': 10000, 'exp_avg': tensor([[0.3003, 0.0699, 0.8730, 1.0993]]), 'exp_avg_sq': tensor([[ 20.2221,  21.3894, 505.0555, 685.9395]])}, 139816613059552: {'step': 10000, 'exp_avg': tensor([[-8.6877e-02,  1.1182e-02, -3.0004e-02, -4.8490e-02, -1.2452e-03,
         -6.5221e-03, -1.4926e-02, -4.0334e-02,  1.7376e-43, -7.2380e-04,
         -8.5244e-02,  2.5128e-03],
        [-2.1892e-02,  8.3032e-02,  6.6884e-01,  5.0718e-01,  1.7081e-01,
          3.1850e-02, -4.8607e-03, -4.5075e-02,  3.3631e-44,  1.1505e-01,
         -1.1601e-01, -6.8713e-02],
        [-1.8272e-02, -1.3609e-02, -1.2262e-01,  9.8289e-03,  4.5070e-02,
          9.8126e-03, -3.4500e-02,  1.2534e-02, -7.0065e-45,  3.9499e-03,
          8.7271e-04, -2.9139e-03],
        [ 3.4522e-03, -6.0913e-02, -2.2935e-01, -2.8808e-01, -5.9648e-03,
         -4.5054e-02,  4.3331e-02, -2.3488e-03,  1.5975e-43,  4.5041e-04,
          9.1540e-04, -1.9510e-02]]), 'exp_avg_sq': tensor([[1.4155e-01, 4.2403e-02, 7.9293e-02, 2.4915e-02, 1.4578e-03, 8.9178e-02,
         2.2547e-03, 1.2944e-02, 6.3923e-13, 3.4776e-03, 1.0323e-01, 2.3516e-02],
        [2.7377e-01, 1.7354e+01, 1.1592e+02, 1.1955e+02, 1.4703e+01, 7.6782e-01,
         9.7419e-01, 1.8075e-01, 3.4774e-09, 5.7171e-02, 2.9437e-01, 1.6897e-01],
        [1.6525e-02, 3.6722e-02, 4.6452e+00, 1.2435e-02, 8.5105e-01, 1.1893e-01,
         1.1092e-01, 1.1789e-02, 6.5280e-09, 2.2883e-03, 8.1414e-03, 5.3895e-04],
        [1.8488e-01, 2.6332e-01, 1.1630e+01, 1.1985e+01, 2.9794e-03, 4.3446e-01,
         3.0928e-01, 1.1716e-02, 9.7127e-09, 4.4074e-03, 1.3804e-01, 8.9385e-02]])}, 139816613058192: {'step': 10000, 'exp_avg': tensor([[ 0.3825, -1.6261,  0.0704,  0.2078]]), 'exp_avg_sq': tensor([[  3.9378, 904.5779,   6.1652,   5.4823]])}}param_groups	[{'lr': 0.001, 'betas': (0.9, 0.999), 'eps': 1e-08, 'weight_decay': 0, 'amsgrad': False, 'params': [139816613057872, 139816613058432, 139816613059552, 139816613058192]}]

Average Error Test Dataset= 4.372598012288411
RMSE Train Dataset = [32.53090290100611, 25.95294509081231, 20.902633924471544, 14.109722145854011, 10.959636847612378, 8.594133070297461, 6.999379539239616, 6.200867056976853, 5.922369380233534, 5.82467721200269]
RMSE Test Dataset = [38.03780371838982, 32.35822630445483, 27.901188475750903, 19.39250170335053, 15.00154563569904, 11.399711846173185, 7.958348565478169, 5.974725578103364, 5.509275764181784, 5.57026404831882]
Number of epochs 10000

pred =117.05371856689453
true = tensor([109.7000])
difference = tensor([7.3537])


pred =61.771629333496094
true = tensor([63.])
difference = tensor([1.2284])


pred =170.52023315429688
true = tensor([183.])
difference = tensor([12.4798])


pred =97.1090087890625
true = tensor([102.])
difference = tensor([4.8910])


pred =101.92709350585938
true = tensor([99.5000])
difference = tensor([2.4271])


pred =82.87841796875
true = tensor([86.3000])
difference = tensor([3.4216])


pred =150.4380340576172
true = tensor([145.])
difference = tensor([5.4380])


pred =127.3890151977539
true = tensor([137.])
difference = tensor([9.6110])


pred =119.88491821289062
true = tensor([117.1000])
difference = tensor([2.7849])


pred =100.19526672363281
true = tensor([90.])
difference = tensor([10.1953])


pred =175.28952026367188
true = tensor([171.])
difference = tensor([4.2895])


pred =145.27931213378906
true = tensor([142.])
difference = tensor([3.2793])


pred =112.83745574951172
true = tensor([114.5000])
difference = tensor([1.6625])


pred =169.1287078857422
true = tensor([170.])
difference = tensor([0.8713])


pred =211.02740478515625
true = tensor([205.])
difference = tensor([6.0274])


pred =160.28543090820312
true = tensor([159.5000])
difference = tensor([0.7854])


pred =160.46128845214844
true = tensor([159.])
difference = tensor([1.4613])


pred =187.2992401123047
true = tensor([186.8000])
difference = tensor([0.4992])


