
+++++++++++++++++++++++++++++++++++REPORT+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

LISTA TEST FILE  
dict_keys(['dimethyl_ether.ct', 'dimethyl_peroxide.ct', 'dimethyl_sulfide.ct', 'dimethyl_disulfide.ct', 'ethyl_methyl_ether.ct', 'dimethoxymethane.ct', 'ethyl_methyl_sulfide.ct', 'ethyl_methyl_disulfide.ct', 'bis(methylthio)methane.ct', 'methyl_propyl_ether.ct', 'diethyl_ether.ct', 'isopropyl_methyl_ether.ct', 'diethyl_peroxide.ct', 'isopropyl_methyl_peroxide.ct', '1,2-dimethoxyethane.ct', 'methyl_propyl_sulfide.ct', 'diethyl_sulfide.ct', 'isopropyl_methyl_sulfide.ct', 'diethyl_disulfide.ct', '1,1-bis(methylthio)ethane.ct', 'ethylthiomethylthiomethane.ct', '1,2-bis(methylthio)ethane.ct', 'butyl_methyl_ether.ct', 'ethyl_isopropyl_ether.ct', 'isobutyl_methyl_ether.ct', 'sec-butyl_methyl_ether.ct', 'tert-butyl_methyl_ether.ct', 'diethoxymethane.ct', '2,2-dimethoxypropane.ct', '1,3-dimethoxypropane.ct', '1-ethoxy-2-methoxyethane.ct', '1,2-dimethoxypropane.ct', 'butyl_methyl_sulfide.ct', 'isobutyl_methyl_sulfide.ct', 'ethyl_propyl_sulfide.ct', 'tert-butyl_methyl_sulfide.ct', 'ethyl_propyl_disulfide.ct', 'ethyl_isopropyl_disulfide.ct', 'bis(ethylthio)methane.ct', 'methyl_pentyl_ether.ct', 'ethyl_butyl_ether.ct', 'isopropyl_propyl_ether.ct', 'ethyl_isobutyl_ether.ct', 'isopentyl_methyl_ether.ct', 'methyl_2-methylbutyl_ether.ct', 'ethyl_sec-butyl_ether.ct', 'methyl_1-methylbutyl_ether.ct', 'diisopropyl_ether.ct', 'methyl_tert-pentyl_ether.ct', '1,2-dimethylpropyl_methyl_ether.ct', '1,1-dimethoxy-2-methylpropane.ct', '2-ethoxy-2-methoxypropane.ct', '1,1-dimethoxybutane.ct', '1-methoxy-1-propoxyethane.ct', '1,4-dimethoxybutane.ct', '1,2-diethoxyethane.ct', '1,3-dimethoxybutane.ct', 'methyl_pentyl_sulfide.ct', 'butyl_ethyl_sulfide.ct', 'isopropyl_propyl_sulfide.ct', 'ethyl_isobutyl_sulfide.ct', 'isopentyl_methyl_sulfide.ct', 'methyl_2-methylbutyl_sulfide.ct', 'sec-butyl_ethyl_sulfide.ct', 'tert-butyl_ethyl_sulfide.ct', 'diisopropyl_sulfide.ct', '1-ethylpropyl_methyl_sulfide.ct', 'dipropyl_disulfide.ct', 'sec-butyl_ethyl_disulfide.ct', 'isopropyl_propyl_disulfide.ct', 'tert-butyl_ethyl_disulfide.ct', '1,1-bis(ethylthio)ethane.ct', '1,2-bis(ethylthio)ethane.ct', 'hexyl_methyl_ether.ct', 'ethyl_pentyl_ether.ct', 'butyl_propyl_ether.ct', 'butyl_isopropyl_ether.ct', 'ethyl_isopentyl_ether.ct', 'tert-butyl_propyl_ether.ct', '2,2-dimethylpropyl_ethyl_ether.ct', 'tert-butyl_isopropyl_ether.ct', 'ethyl_1-methylbutyl_ether.ct', 'ethyl_tert-pentyl_ether.ct', '1,2-dimethylpropyl_ethyl_ether.ct', 'ethyl_1-ethylpropyl_ether.ct', 'dipropoxymethane.ct', '1-ethoxy-1-propoxyethane.ct', '1,1-diethoxypropane.ct', '1,3-diethoxypropane.ct', '1,5-dimethoxypentane.ct', '1-ethoxy-4-methoxybutane.ct', '1,4-dimethoxypentane.ct', '1,3-dimethoxypentane.ct', 'hexyl_methyl_sulfide.ct', 'butyl_propyl_sulfide.ct', 'isobutyl_isopropyl_sulfide.ct', 'ethyl_2-methylbutyl_sulfide.ct', 'tert-butyl_propyl_sulfide.ct', 'sec-butyl_isopropyl_sulfide.ct', 'ethyl_isopentyl_sulfide.ct', 'butyl_isopropyl_sulfide.ct', '1,3-bis(ethylthio)propane.ct', 'dibutyl_ether.ct', 'isopentyl_propyl_ether.ct', 'butyl_sec-butyl_ether.ct', 'butyl_tert-butyl_ether.ct', 'sec-butyl_isobutyl_ether.ct', '1,3-dimethylpentyl_methyl_ether.ct', 'diisobutyl_ether.ct', 'isobutyl_tert-butyl_ether.ct', 'di-tert-butyl_ether.ct', 'isopropyl_tert-pentyl_ether.ct', 'heptyl_methyl_ether.ct', 'di-tert-butyl_peroxide.ct', '1,1-diisopropoxyethane.ct', '1,1-dipropoxyethane.ct', '1,1-dimethoxyhexane.ct', '2,4-dimethoxy-2-methylpentane.ct', '1,4-diethoxybutane.ct', 'dibutylsulfide.ct', 'diisobutyl_sulfide.ct', 'butyl_isobutyl_sulfide.ct', 'di-sec-butyl_sulfide.ct', 'butyl_sec-butyl_sulfide.ct', 'sec-butyl_isobutyl_sulfide.ct', 'heptyl_methyl_sulfide.ct', 'dibutyl_disulfide.ct', 'diisobutyl_disulfide.ct', 'di-tert-butyl_disulfide.ct', '1,1-bis(isopropylthio)ethane.ct', '1-ethyl-1,3-dimethylbutyl_methyl_ether.ct', 'butyl_isopentyl_ether.ct', 'tert-butyl_isopentyl_ether.ct', 'butyl_pentyl_ether.ct', '1,5-dimethylhexyl_methyl_ether.ct', 'isobutyl_isopentyl_ether.ct', 'methyl_1-methylheptyl_ether.ct', 'methyl_octyl_ether.ct', '2-ethylhexyl_methyl_ether.ct', 'methyl_1,1,4-trimethylpentyl_ether.ct', 'ethyl_1,1,3-trimethylbutyl_ether.ct', 'tert-butyl_tert-pentyl_peroxide.ct', '1,1-dimethoxy-2,2-dimethylpentane.ct', '1,1-diethoxypentane.ct', '1,1-dipropoxypropane.ct', '1,1-diisopropoxypropane.ct', '1,3-dipropoxypropane.ct', '1,3-diisopropoxypropane.ct', 'ethyl_heptyl_sulfide.ct', 'bis(butylthio)methane.ct', '2,2-bis(propylthio)propane.ct', 'ethyl_octyl_ether.ct', 'ethyl_1,1,3,3-tetramethylbutyl_ether.ct', 'bis(1-ethylpropyl)_ether.ct', 'bis(1-methylbutyl)_ether.ct', 'diisopentyl_ether.ct', 'dipentyl_ether.ct', 'isopropyl_heptyl_ether.ct', 'isopentyl_pentyl_ether.ct', 'methyl_1-methyloctyl_ether.ct', 'di-tert-pentyl_sulfide.ct', 'dipentyl_sulfide.ct', 'diisopentyl_sulfide.ct', 'isobutyl_4-methylpentyl_sulfide.ct', 'methyl_nonyl_sulfide.ct'])


LISTA VALIDATION FILE  
dict_keys(['ethyl_methyl_peroxide.ct', '1,1-dimethoxyethane.ct', 'ethyl_propyl_ether.ct', 'ethyl_isopropyl_sulfide.ct', 'dipropyl_ether.ct', '1,1-diethoxyethane.ct', 'dipropyl_sulfide.ct', 'diisopropyl_disulfide.ct', 'isobutyl_propyl_ether.ct', '2,2-diethoxypropane.ct', 'isobutyl_propyl_sulfide.ct', 'butyl_isobutyl_ether.ct', '1-ethylpropyl_propyl_ether.ct', 'di-tert-butyl_sulfide.ct', 'ethyl_heptyl_ether.ct', '3,5-dimethylhexyl_methyl_ether.ct', 'methyl_octyl_sulfide.ct', 'heptyl_propyl_ether.ct'])


Our model: 

RegressionGm(
  (fc1): Linear(in_features=12, out_features=4, bias=False)
  (fc2): Linear(in_features=4, out_features=1, bias=False)
  (LRelu): SELU()
  (fc1Root): Linear(in_features=12, out_features=4, bias=False)
  (fc2Root): Linear(in_features=4, out_features=1, bias=False)
  (LReluRoot): SELU()
)
Printing children
------------------------------[Linear(in_features=12, out_features=4, bias=False), Linear(in_features=4, out_features=1, bias=False), SELU(), Linear(in_features=12, out_features=4, bias=False), Linear(in_features=4, out_features=1, bias=False), SELU()]

Printing Modules
------------------------------[RegressionGm(
  (fc1): Linear(in_features=12, out_features=4, bias=False)
  (fc2): Linear(in_features=4, out_features=1, bias=False)
  (LRelu): SELU()
  (fc1Root): Linear(in_features=12, out_features=4, bias=False)
  (fc2Root): Linear(in_features=4, out_features=1, bias=False)
  (LReluRoot): SELU()
), Linear(in_features=12, out_features=4, bias=False), Linear(in_features=4, out_features=1, bias=False), SELU(), Linear(in_features=12, out_features=4, bias=False), Linear(in_features=4, out_features=1, bias=False), SELU()]
The state dict keys: 

odict_keys(['fc1.weight', 'fc2.weight', 'fc1Root.weight', 'fc2Root.weight'])Models state_dict:fc1.weight	torch.Size([4, 12])fc2.weight	torch.Size([1, 4])fc1Root.weight	torch.Size([4, 12])fc2Root.weight	torch.Size([1, 4])OrderedDict([('fc1.weight', tensor([[ 5.5890e-01,  3.4861e-01,  2.9472e-01,  4.0043e-01,  1.1561e-42,
          2.6521e-01,  1.7082e+00, -6.3784e-01, -2.1048e-42,  1.4197e-01,
          6.2444e-01,  7.6521e-04],
        [-1.6075e-01, -1.8078e-01,  3.5771e-02, -4.8870e-01,  2.8699e-42,
          1.0239e+00, -1.0824e+00, -2.0099e+00,  1.7572e-42, -2.4214e-01,
         -2.7302e-01, -3.4272e-01],
        [ 6.1930e-01,  3.5211e-01,  3.0272e-01,  5.9176e-01,  1.3831e-42,
          1.9089e-02,  1.8409e+00, -5.8396e-01,  8.3756e-42,  2.0726e-01,
          6.6386e-01,  5.3750e-02],
        [ 5.6263e-01,  2.6109e-01,  4.1372e-01,  7.8982e-01, -2.7311e-42,
         -1.6353e-04,  2.0348e+00, -8.8741e-01,  3.0618e-42,  2.8208e-01,
          8.2584e-01,  4.5472e-01]])), ('fc2.weight', tensor([[ 0.6117, -1.3585,  0.8871,  1.1945]])), ('fc1Root.weight', tensor([[ 1.1422e+00, -4.5362e-01, -9.9580e-02, -2.8529e-01, -1.6874e-01,
          1.9717e+00, -2.5692e+00,  1.4591e+00, -1.3085e-41, -1.0384e-01,
          1.5625e+00,  1.3748e-01],
        [-1.2293e-01,  6.9011e-01,  1.2656e+00,  9.1375e-01,  8.7199e-01,
         -1.4489e+00,  4.7679e+00, -2.9406e+00,  1.6695e-41,  1.4717e+00,
         -7.2696e-01,  3.1048e-01],
        [-2.4591e-01,  1.2578e+00,  1.3547e+00,  1.3470e+00,  1.2326e+00,
         -1.9473e+00,  5.0934e+00, -2.7860e+00,  1.3734e-41,  1.6708e+00,
         -9.3301e-01,  3.7328e-01],
        [-4.0303e-01,  1.2755e+00,  1.0606e+00,  1.2839e+00,  1.0634e+00,
         -2.0768e+00,  5.3105e+00, -3.0783e+00, -1.5064e-41,  1.9212e+00,
         -9.4922e-01,  1.7163e-01]])), ('fc2Root.weight', tensor([[-1.9950,  1.9500,  1.4605,  1.6878]]))])
---------------plt.close(fig)    # close the figure window-------------------------------------------------------------------------------------------

 Optimizer's state_dict:
CRITERION = MSELoss()
OPTIMIZER = Adam (
Parameter Group 0
    amsgrad: False
    betas: (0.9, 0.999)
    eps: 1e-08
    lr: 0.001
    weight_decay: 0
)
Tempo di training 28.182746648788452


state	{140002348365536: {'step': 10000, 'exp_avg': tensor([[ 7.4924e-02,  1.0473e-01,  1.5911e-02, -4.4202e-04,  2.3121e-43,
          8.1380e-02,  2.2250e-01, -6.8673e-02, -4.2740e-43, -1.3040e-05,
          1.8538e-01, -3.1428e-02],
        [ 2.6395e-01,  7.8121e-02, -2.7103e-04, -1.0530e-04,  5.8154e-43,
         -6.7688e-02, -1.4278e-02, -4.7897e-02,  3.5733e-43, -1.2838e-04,
          4.0989e-02, -9.6592e-02],
        [ 6.9210e-02,  1.2024e-01, -2.7183e-03,  1.6713e-03,  2.7325e-43,
          4.2649e-02,  1.9112e-01, -2.9049e-02,  5.6192e-43,  2.7245e-04,
          2.1887e-01, -3.4700e-02],
        [ 3.7284e-02,  1.1803e-01, -2.3983e-03,  7.6169e-04, -5.5351e-43,
          5.2085e-02,  1.6565e-01, -5.9943e-02,  6.2358e-43,  1.0033e-03,
          2.8061e-01,  3.2095e-02]]), 'exp_avg_sq': tensor([[5.3555e+00, 2.4741e+02, 2.0026e-01, 3.9007e-03, 5.4891e-10, 3.9052e+00,
         6.0954e-01, 2.9791e-01, 1.7594e-09, 2.3967e-04, 1.7943e+00, 1.2228e+00],
        [9.3850e+00, 3.2397e+01, 2.8024e-01, 5.6740e-04, 7.8765e-10, 9.2811e+00,
         1.7562e-02, 3.5437e-02, 6.1975e-08, 1.6640e-04, 1.6982e+00, 3.8539e+00],
        [1.2811e+01, 5.9853e+02, 4.9647e-01, 9.8257e-03, 3.2863e-09, 9.2399e+00,
         1.2890e+00, 6.6766e-01, 1.3066e-08, 5.8313e-04, 4.2611e+00, 2.8968e+00],
        [2.3591e+01, 1.0840e+03, 9.0124e-01, 1.7876e-02, 2.2043e-12, 1.7004e+01,
         2.3291e+00, 1.2414e+00, 1.4868e-10, 1.1233e-03, 7.8500e+00, 5.3024e+00]])}, 140002348365616: {'step': 10000, 'exp_avg': tensor([[-0.1699, -0.2427, -0.1047, -0.0773]]), 'exp_avg_sq': tensor([[356.7496,  24.8038, 319.6776, 252.9080]])}, 140002348365136: {'step': 10000, 'exp_avg': tensor([[-1.7299e-01,  1.1986e-02, -9.4804e-02, -1.5696e-02,  1.5307e-03,
         -6.8105e-02, -1.2037e-01,  1.0985e-02, -2.1580e-43,  2.7604e-02,
         -1.9549e-01, -6.6962e-02],
        [ 1.1236e-02, -4.0034e-02, -2.2944e-01, -1.5074e-01, -7.0624e-02,
         -1.3483e-02,  4.1430e-02, -8.7134e-03,  2.7185e-43,  3.3688e-02,
         -8.5810e-03, -5.3938e-02],
        [-1.3639e-02, -5.1660e-02, -1.9885e-01, -1.0233e-01, -4.3652e-02,
         -2.3858e-02,  5.5333e-02, -3.5462e-02,  2.1720e-43,  3.4329e-02,
         -3.2231e-02, -3.8165e-02],
        [ 8.5109e-03, -1.7819e-02, -1.9314e-01, -1.2261e-01, -5.6206e-02,
         -2.4800e-02,  5.4755e-02, -1.2535e-02, -2.4383e-43,  3.9509e-02,
         -9.0167e-03, -4.8245e-02]]), 'exp_avg_sq': tensor([[1.8298e-01, 6.9569e-02, 3.3801e+00, 2.0410e-01, 9.2917e-03, 1.8995e-01,
         4.4644e-02, 4.8133e-03, 4.6156e-11, 4.4103e-03, 1.4880e-01, 2.7695e-02],
        [4.4150e-01, 4.0410e+00, 2.5480e+01, 1.5649e+01, 1.3398e+00, 4.8821e-01,
         2.0428e-01, 3.6698e-02, 6.1469e-09, 2.4321e-02, 3.4395e-01, 1.2243e-01],
        [1.1921e-01, 1.4957e+00, 1.0172e+01, 6.2043e+00, 5.3804e-01, 1.7725e-01,
         1.0679e-01, 1.8454e-02, 9.4527e-11, 1.0512e-02, 1.0144e-01, 4.0055e-02],
        [1.7814e-01, 2.0111e+00, 1.3474e+01, 8.2089e+00, 7.0773e-01, 2.4488e-01,
         1.3762e-01, 2.2258e-02, 6.5069e-09, 1.4081e-02, 1.5013e-01, 5.7180e-02]])}, 140002348364976: {'step': 10000, 'exp_avg': tensor([[ 0.2641, -0.3640, -0.4592, -0.4185]]), 'exp_avg_sq': tensor([[  2.2882,  49.5478, 106.5978,  73.3713]])}}param_groups	[{'lr': 0.001, 'betas': (0.9, 0.999), 'eps': 1e-08, 'weight_decay': 0, 'amsgrad': False, 'params': [140002348365536, 140002348365616, 140002348365136, 140002348364976]}]

Average Error Test Dataset= 3.546052932739258
RMSE Train Dataset = [26.70596482302982, 17.83305933851771, 12.87023244936863, 10.068620230313842, 7.894633689340322, 6.790043205831649, 6.329831343056699, 6.161494311122595, 6.05694671811983, 5.926517005864471]
RMSE Test Dataset = [22.020024982822807, 13.85612620021798, 9.874543384666659, 8.27576146612735, 6.185931999279254, 4.8970113865519584, 4.256833361112721, 4.029942973374728, 4.017149402106879, 3.9988104720460576]
Number of epochs 10000

pred =37.06682205200195
true = tensor([39.])
difference = tensor([1.9332])


pred =59.95733642578125
true = tensor([64.4000])
difference = tensor([4.4427])


pred =65.77162170410156
true = tensor([63.6000])
difference = tensor([2.1716])


pred =105.448974609375
true = tensor([107.4000])
difference = tensor([1.9510])


pred =95.16806030273438
true = tensor([90.1000])
difference = tensor([5.0681])


pred =100.07203674316406
true = tensor([103.])
difference = tensor([2.9280])


pred =141.56007385253906
true = tensor([142.8000])
difference = tensor([1.2399])


pred =180.2667236328125
true = tensor([177.2000])
difference = tensor([3.0667])


pred =109.08268737792969
true = tensor([102.5000])
difference = tensor([6.5827])


pred =119.74130249023438
true = tensor([114.])
difference = tensor([5.7413])


pred =153.1627197265625
true = tensor([155.])
difference = tensor([1.8373])


pred =132.77810668945312
true = tensor([132.])
difference = tensor([0.7781])


pred =122.6734848022461
true = tensor([128.5000])
difference = tensor([5.8265])


pred =142.6720428466797
true = tensor([148.5000])
difference = tensor([5.8280])


pred =162.57276916503906
true = tensor([165.5000])
difference = tensor([2.9272])


pred =161.6999969482422
true = tensor([155.5000])
difference = tensor([6.2000])


pred =219.83071899414062
true = tensor([218.])
difference = tensor([1.8307])


pred =183.52401733398438
true = tensor([187.])
difference = tensor([3.4760])


