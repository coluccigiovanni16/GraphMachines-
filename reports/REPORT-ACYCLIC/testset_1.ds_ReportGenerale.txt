
+++++++++++++++++++++++++++++++++++REPORT+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

LISTA TEST FILE  
dict_keys(['dimethyl_ether.ct', 'dimethyl_sulfide.ct', 'dimethyl_disulfide.ct', 'ethyl_methyl_ether.ct', 'ethyl_methyl_peroxide.ct', 'dimethoxymethane.ct', 'ethyl_methyl_sulfide.ct', 'ethyl_methyl_disulfide.ct', 'bis(methylthio)methane.ct', 'methyl_propyl_ether.ct', 'isopropyl_methyl_ether.ct', 'diethyl_peroxide.ct', 'isopropyl_methyl_peroxide.ct', '1,1-dimethoxyethane.ct', '1,2-dimethoxyethane.ct', 'methyl_propyl_sulfide.ct', 'diethyl_sulfide.ct', 'isopropyl_methyl_sulfide.ct', 'diethyl_disulfide.ct', 'ethylthiomethylthiomethane.ct', '1,2-bis(methylthio)ethane.ct', 'butyl_methyl_ether.ct', 'ethyl_propyl_ether.ct', 'ethyl_isopropyl_ether.ct', 'isobutyl_methyl_ether.ct', 'sec-butyl_methyl_ether.ct', 'tert-butyl_methyl_ether.ct', 'diethoxymethane.ct', '1,3-dimethoxypropane.ct', '1-ethoxy-2-methoxyethane.ct', '1,2-dimethoxypropane.ct', 'ethyl_isopropyl_sulfide.ct', 'butyl_methyl_sulfide.ct', 'isobutyl_methyl_sulfide.ct', 'ethyl_propyl_sulfide.ct', 'tert-butyl_methyl_sulfide.ct', 'ethyl_propyl_disulfide.ct', 'bis(ethylthio)methane.ct', 'methyl_pentyl_ether.ct', 'ethyl_butyl_ether.ct', 'dipropyl_ether.ct', 'isopropyl_propyl_ether.ct', 'ethyl_isobutyl_ether.ct', 'isopentyl_methyl_ether.ct', 'methyl_2-methylbutyl_ether.ct', 'ethyl_sec-butyl_ether.ct', 'diisopropyl_ether.ct', 'methyl_tert-pentyl_ether.ct', '1,2-dimethylpropyl_methyl_ether.ct', '1,1-diethoxyethane.ct', '1,1-dimethoxy-2-methylpropane.ct', '2-ethoxy-2-methoxypropane.ct', '1,1-dimethoxybutane.ct', '1-methoxy-1-propoxyethane.ct', '1,4-dimethoxybutane.ct', '1,3-dimethoxybutane.ct', 'methyl_pentyl_sulfide.ct', 'butyl_ethyl_sulfide.ct', 'dipropyl_sulfide.ct', 'isopropyl_propyl_sulfide.ct', 'ethyl_isobutyl_sulfide.ct', 'isopentyl_methyl_sulfide.ct', 'methyl_2-methylbutyl_sulfide.ct', 'sec-butyl_ethyl_sulfide.ct', 'diisopropyl_sulfide.ct', '1-ethylpropyl_methyl_sulfide.ct', 'dipropyl_disulfide.ct', 'diisopropyl_disulfide.ct', 'sec-butyl_ethyl_disulfide.ct', 'isopropyl_propyl_disulfide.ct', 'tert-butyl_ethyl_disulfide.ct', '1,1-bis(ethylthio)ethane.ct', '1,2-bis(ethylthio)ethane.ct', 'ethyl_pentyl_ether.ct', 'butyl_propyl_ether.ct', 'butyl_isopropyl_ether.ct', 'isobutyl_propyl_ether.ct', 'ethyl_isopentyl_ether.ct', 'tert-butyl_propyl_ether.ct', '2,2-dimethylpropyl_ethyl_ether.ct', 'tert-butyl_isopropyl_ether.ct', 'ethyl_1-methylbutyl_ether.ct', '1,2-dimethylpropyl_ethyl_ether.ct', 'ethyl_1-ethylpropyl_ether.ct', 'dipropoxymethane.ct', '2,2-diethoxypropane.ct', '1-ethoxy-1-propoxyethane.ct', '1,1-diethoxypropane.ct', '1,3-diethoxypropane.ct', '1,5-dimethoxypentane.ct', '1-ethoxy-4-methoxybutane.ct', '1,3-dimethoxypentane.ct', 'hexyl_methyl_sulfide.ct', 'butyl_propyl_sulfide.ct', 'isobutyl_propyl_sulfide.ct', 'isobutyl_isopropyl_sulfide.ct', 'ethyl_2-methylbutyl_sulfide.ct', 'tert-butyl_propyl_sulfide.ct', 'sec-butyl_isopropyl_sulfide.ct', 'ethyl_isopentyl_sulfide.ct', '1,3-bis(ethylthio)propane.ct', 'dibutyl_ether.ct', 'isopentyl_propyl_ether.ct', 'butyl_isobutyl_ether.ct', 'butyl_sec-butyl_ether.ct', 'butyl_tert-butyl_ether.ct', 'sec-butyl_isobutyl_ether.ct', '1,3-dimethylpentyl_methyl_ether.ct', 'diisobutyl_ether.ct', 'di-tert-butyl_ether.ct', 'isopropyl_tert-pentyl_ether.ct', 'heptyl_methyl_ether.ct', '1-ethylpropyl_propyl_ether.ct', 'di-tert-butyl_peroxide.ct', '1,1-diisopropoxyethane.ct', '1,1-dipropoxyethane.ct', '1,1-dimethoxyhexane.ct', '2,4-dimethoxy-2-methylpentane.ct', 'dibutylsulfide.ct', 'diisobutyl_sulfide.ct', 'butyl_isobutyl_sulfide.ct', 'di-tert-butyl_sulfide.ct', 'di-sec-butyl_sulfide.ct', 'butyl_sec-butyl_sulfide.ct', 'sec-butyl_isobutyl_sulfide.ct', 'heptyl_methyl_sulfide.ct', 'dibutyl_disulfide.ct', 'di-tert-butyl_disulfide.ct', '1,1-bis(isopropylthio)ethane.ct', '1-ethyl-1,3-dimethylbutyl_methyl_ether.ct', 'ethyl_heptyl_ether.ct', 'butyl_isopentyl_ether.ct', 'tert-butyl_isopentyl_ether.ct', 'butyl_pentyl_ether.ct', '1,5-dimethylhexyl_methyl_ether.ct', 'isobutyl_isopentyl_ether.ct', 'methyl_octyl_ether.ct', '2-ethylhexyl_methyl_ether.ct', 'methyl_1,1,4-trimethylpentyl_ether.ct', '3,5-dimethylhexyl_methyl_ether.ct', 'ethyl_1,1,3-trimethylbutyl_ether.ct', 'tert-butyl_tert-pentyl_peroxide.ct', '1,1-dimethoxy-2,2-dimethylpentane.ct', '1,1-diethoxypentane.ct', '1,1-dipropoxypropane.ct', '1,3-dipropoxypropane.ct', '1,3-diisopropoxypropane.ct', 'ethyl_heptyl_sulfide.ct', 'methyl_octyl_sulfide.ct', 'bis(butylthio)methane.ct', '2,2-bis(propylthio)propane.ct', 'ethyl_octyl_ether.ct', 'ethyl_1,1,3,3-tetramethylbutyl_ether.ct', 'bis(1-ethylpropyl)_ether.ct', 'diisopentyl_ether.ct', 'dipentyl_ether.ct', 'isopropyl_heptyl_ether.ct', 'heptyl_propyl_ether.ct', 'isopentyl_pentyl_ether.ct', 'methyl_1-methyloctyl_ether.ct', 'di-tert-pentyl_sulfide.ct', 'dipentyl_sulfide.ct', 'diisopentyl_sulfide.ct', 'methyl_nonyl_sulfide.ct'])


LISTA VALIDATION FILE  
dict_keys(['dimethyl_peroxide.ct', 'diethyl_ether.ct', '1,1-bis(methylthio)ethane.ct', '2,2-dimethoxypropane.ct', 'ethyl_isopropyl_disulfide.ct', 'methyl_1-methylbutyl_ether.ct', '1,2-diethoxyethane.ct', 'tert-butyl_ethyl_sulfide.ct', 'hexyl_methyl_ether.ct', 'ethyl_tert-pentyl_ether.ct', '1,4-dimethoxypentane.ct', 'butyl_isopropyl_sulfide.ct', 'isobutyl_tert-butyl_ether.ct', '1,4-diethoxybutane.ct', 'diisobutyl_disulfide.ct', 'methyl_1-methylheptyl_ether.ct', '1,1-diisopropoxypropane.ct', 'bis(1-methylbutyl)_ether.ct', 'isobutyl_4-methylpentyl_sulfide.ct'])
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Our model: 

RegressionGm(
  (fc1): Linear(in_features=12, out_features=4, bias=False)
  (fc2): Linear(in_features=4, out_features=1, bias=False)
  (LRelu): SELU()
  (fc1Root): Linear(in_features=12, out_features=4, bias=False)
  (fc2Root): Linear(in_features=4, out_features=1, bias=False)
  (LReluRoot): SELU()
)
Printing children
------------------------------[Linear(in_features=12, out_features=4, bias=False), Linear(in_features=4, out_features=1, bias=False), SELU(), Linear(in_features=12, out_features=4, bias=False), Linear(in_features=4, out_features=1, bias=False), SELU()]

Printing Modules
------------------------------[RegressionGm(
  (fc1): Linear(in_features=12, out_features=4, bias=False)
  (fc2): Linear(in_features=4, out_features=1, bias=False)
  (LRelu): SELU()
  (fc1Root): Linear(in_features=12, out_features=4, bias=False)
  (fc2Root): Linear(in_features=4, out_features=1, bias=False)
  (LReluRoot): SELU()
), Linear(in_features=12, out_features=4, bias=False), Linear(in_features=4, out_features=1, bias=False), SELU(), Linear(in_features=12, out_features=4, bias=False), Linear(in_features=4, out_features=1, bias=False), SELU()]
The state dict keys: 

odict_keys(['fc1.weight', 'fc2.weight', 'fc1Root.weight', 'fc2Root.weight'])Models state_dict:fc1.weight	torch.Size([4, 12])fc2.weight	torch.Size([1, 4])fc1Root.weight	torch.Size([4, 12])fc2Root.weight	torch.Size([1, 4])OrderedDict([('fc1.weight', tensor([[-4.7530e-01,  7.1243e-01,  1.5639e-01,  1.1872e-01,  1.3312e-43,
         -1.3007e-02, -1.3113e+00, -1.6579e+00, -1.0131e-42, -7.1241e-02,
         -1.4131e+00, -8.8200e-02],
        [ 4.2632e-01,  2.4182e-01,  1.8546e-01,  2.3356e-01,  2.1888e-42,
          5.1117e-01, -2.8433e-01,  8.3926e-01, -1.3424e-42, -4.6299e-02,
          1.2556e+00, -7.5730e-02],
        [ 2.2897e-02,  9.9095e-02,  1.0926e-01,  2.2916e-01, -1.2373e-42,
          7.5682e-02,  3.4885e-01,  3.3765e-01,  1.4700e-42, -4.2138e-02,
          3.2910e-01, -1.9024e-01],
        [-2.0428e-01,  1.2453e-01,  1.3832e-01,  2.2543e-01, -1.8595e-42,
          1.9757e-01, -1.4036e+00, -8.5798e-01,  5.2969e-43, -8.8420e-02,
         -9.9626e-01, -6.7729e-03]])), ('fc2.weight', tensor([[2.6938, 2.1869, 2.1099, 2.7236]])), ('fc1Root.weight', tensor([[ 9.7321e-01, -1.7725e+00, -1.6464e+00, -1.8834e+00, -1.7116e+00,
          4.0566e-01,  3.3696e+00, -1.7652e+00,  1.2282e-41,  1.2928e+00,
          3.7401e-01,  7.9489e-01],
        [ 9.5535e-01, -1.9931e+00, -2.0450e+00, -1.6842e+00, -1.6092e+00,
          7.2767e-01,  3.9205e+00, -2.0020e+00,  1.1991e-41,  1.7019e+00,
          5.6701e-01,  8.3907e-01],
        [ 7.0196e-01, -2.0390e+00, -2.3172e+00, -1.7774e+00, -1.9890e+00,
          4.0581e-01,  4.0442e+00, -2.1419e+00,  1.4445e-41,  1.4755e+00,
          5.9931e-01,  9.8619e-01],
        [ 3.4384e+00,  4.0286e-01,  7.8414e-01,  1.3059e+00,  9.5248e-01,
          3.8721e+00, -1.9741e+00, -5.4289e-01, -7.2966e-42,  8.1219e-01,
          3.4927e+00,  1.4719e+00]])), ('fc2Root.weight', tensor([[ 2.7199,  2.4304,  2.3163, -2.8678]]))])
---------------plt.close(fig)    # close the figure window-------------------------------------------------------------------------------------------

 Optimizer's state_dict:
CRITERION = MSELoss()
OPTIMIZER = Adam (
Parameter Group 0
    amsgrad: False
    betas: (0.9, 0.999)
    eps: 1e-08
    lr: 0.001
    weight_decay: 0
)
Tempo di training 29.6238751411438


state	{140447991006384: {'step': 10000, 'exp_avg': tensor([[ 2.5920e+00,  9.2377e-02,  6.6431e-03, -1.0035e-03,  3.5032e-44,
          1.8917e+00,  1.4160e-03,  4.1922e-02, -2.5924e-43, -1.5840e-02,
         -9.6531e-02,  2.3723e+00],
        [ 6.4371e+00, -1.7473e+01, -5.7766e-02,  8.1533e-03,  5.6753e-43,
          5.5255e+00,  3.9433e-01,  6.8508e-01, -3.4332e-43, -3.1865e-03,
          4.5406e+00,  1.8573e+00],
        [ 7.5770e+00, -1.7833e+01, -5.5439e-02,  1.0146e-02, -3.1529e-43,
          6.8351e+00,  3.6661e-01,  5.6917e-01,  3.8536e-43, -1.1905e-02,
          4.5547e+00,  2.3387e+00],
        [ 6.0875e+00, -4.4952e+00, -1.7585e-02,  4.6423e-03, -4.8345e-43,
          5.9380e+00, -5.0276e-02, -2.8871e-01,  1.3312e-43, -2.3899e-02,
          1.5494e+00,  4.1689e+00]]), 'exp_avg_sq': tensor([[2.4745e+03, 8.9047e+00, 1.7164e-01, 7.2381e-02, 4.6314e-09, 2.4557e+03,
         7.8879e-03, 2.2523e-01, 1.5330e-07, 1.5782e-01, 1.0367e+01, 2.1663e+03],
        [8.8001e+03, 3.6557e+04, 5.5428e+00, 1.7056e-01, 5.7632e-08, 6.1789e+03,
         2.4179e+01, 1.0976e+02, 1.2642e-07, 3.5370e-01, 2.8359e+03, 1.7947e+03],
        [1.3852e+04, 4.3140e+04, 8.2690e+00, 2.6531e-01, 1.2604e-07, 1.0433e+04,
         2.7458e+01, 1.1194e+02, 3.3030e-07, 6.4911e-01, 3.2737e+03, 3.8970e+03],
        [1.1000e+04, 2.5730e+03, 1.8797e+00, 2.8879e-01, 3.0730e-07, 1.0617e+04,
         2.4127e-01, 2.5207e+00, 9.3270e-08, 6.9910e-01, 4.5141e+02, 7.1014e+03]])}, 140447991009024: {'step': 10000, 'exp_avg': tensor([[-3.1231,  2.8589,  0.0821, -1.8706]]), 'exp_avg_sq': tensor([[2811.3975, 2433.2200,   86.5951, 1121.3870]])}, 140447991008784: {'step': 10000, 'exp_avg': tensor([[-3.2231e-02,  5.8455e-02,  4.7471e-01,  2.2813e-01,  1.1745e-02,
         -6.4689e-03, -1.5450e-03, -7.8140e-03,  2.0179e-43,  4.7596e-03,
         -2.6015e-02, -3.6316e-02],
        [-2.7443e-02,  4.5758e-02,  4.1510e-01,  2.0382e-01,  9.2326e-03,
         -2.6734e-06,  1.3013e-02, -1.3703e-02,  2.0179e-43,  1.2905e-02,
         -1.9562e-02, -3.0412e-02],
        [-2.9454e-02,  4.1404e-02,  3.8979e-01,  1.9153e-01,  1.5951e-03,
         -4.5538e-03,  1.7274e-02, -1.6761e-02,  2.2981e-43,  9.9810e-03,
         -1.7712e-02, -2.6034e-02],
        [ 6.5582e-02, -6.5902e-02, -5.0201e-01, -1.1859e-01,  7.5889e-03,
          4.1626e-02, -5.1517e-03, -3.8696e-03, -1.1771e-43, -2.8022e-03,
          8.2088e-02,  5.7459e-02]]), 'exp_avg_sq': tensor([[1.9551e+00, 3.8049e+01, 6.3902e+01, 1.0064e+02, 4.3480e+00, 1.9789e+00,
         1.5436e-01, 1.9858e-01, 6.3728e-09, 9.9032e-02, 1.5389e+00, 4.9195e-01],
        [1.4875e+00, 2.9351e+01, 5.0185e+01, 8.3946e+01, 3.5806e+00, 1.5594e+00,
         1.2248e-01, 1.7445e-01, 2.4607e-09, 7.8367e-02, 1.1771e+00, 3.8713e-01],
        [1.1879e+00, 2.3510e+01, 4.1269e+01, 7.2435e+01, 3.0672e+00, 1.2829e+00,
         1.0640e-01, 1.4768e-01, 3.3773e-09, 6.6704e-02, 9.4551e-01, 3.1439e-01],
        [9.7834e-01, 5.9540e-01, 1.8960e+01, 7.0610e+00, 4.4073e-01, 9.9892e-01,
         1.2913e-02, 1.4414e-02, 2.0764e-09, 1.8659e-02, 7.7646e-01, 2.4637e-01]])}, 140447991008704: {'step': 10000, 'exp_avg': tensor([[-0.5837, -0.6744, -0.7439,  0.1967]]), 'exp_avg_sq': tensor([[188.0151, 260.3312, 315.5427,  10.1320]])}}param_groups	[{'lr': 0.001, 'betas': (0.9, 0.999), 'eps': 1e-08, 'weight_decay': 0, 'amsgrad': False, 'params': [140447991006384, 140447991009024, 140447991008784, 140447991008704]}]

Average Error Test Dataset= 4.996380053068462
RMSE Train Dataset = [52.60273383980984, 47.78622133229149, 45.381717069108625, 26.77295420121127, 11.244349098890288, 7.312837511408395, 6.3385653049986335, 6.043040082198578, 5.974423892286733, 5.943632151561549]
RMSE Test Dataset = [48.642527267653094, 48.23459770761673, 47.75169233748423, 32.21968203065092, 11.979942088807102, 7.174964920649357, 6.413891510072377, 6.446657056725699, 6.528208047019931, 6.493956764314581]
Number of epochs 10000

pred =18.347503662109375
true = tensor([14.])
difference = tensor([4.3475])


pred =44.66820526123047
true = tensor([34.6000])
difference = tensor([10.0682])


pred =159.9530029296875
true = tensor([156.])
difference = tensor([3.9530])


pred =80.6932373046875
true = tensor([83.])
difference = tensor([2.3068])


pred =164.2509002685547
true = tensor([165.5000])
difference = tensor([1.2491])


pred =85.7398910522461
true = tensor([93.])
difference = tensor([7.2601])


pred =109.84481811523438
true = tensor([123.5000])
difference = tensor([13.6552])


pred =119.9736328125
true = tensor([120.4000])
difference = tensor([0.4264])


pred =126.28938293457031
true = tensor([125.])
difference = tensor([1.2894])


pred =96.9123764038086
true = tensor([101.])
difference = tensor([4.0876])


pred =144.24652099609375
true = tensor([145.])
difference = tensor([0.7535])


pred =150.6009521484375
true = tensor([163.5000])
difference = tensor([12.8990])


pred =111.73246765136719
true = tensor([112.])
difference = tensor([0.2675])


pred =157.3400421142578
true = tensor([165.])
difference = tensor([7.6600])


pred =217.4625701904297
true = tensor([215.])
difference = tensor([2.4626])


pred =168.8873748779297
true = tensor([162.])
difference = tensor([6.8874])


pred =156.28091430664062
true = tensor([146.])
difference = tensor([10.2809])


pred =163.3201446533203
true = tensor([162.])
difference = tensor([1.3201])


pred =212.2430419921875
true = tensor([216.])
difference = tensor([3.7570])


